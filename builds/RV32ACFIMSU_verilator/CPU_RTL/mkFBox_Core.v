//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// valid                          O     1
// word_fst                       O    64
// word_snd                       O     5
// verbosity                      I     4
// CLK                            I     1 clock
// RST_N                          I     1 reset
// req_opcode                     I     7
// req_f7                         I     7
// req_rm                         I     3
// req_rs2                        I     5
// req_v1                         I    64
// req_v2                         I    64
// req_v3                         I    64
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFBox_Core(verbosity,
		   CLK,
		   RST_N,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_opcode,
		   req_f7,
		   req_rm,
		   req_rs2,
		   req_v1,
		   req_v2,
		   req_v3,
		   EN_req,

		   valid,

		   word_fst,

		   word_snd);
  input  [3 : 0] verbosity;
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [6 : 0] req_opcode;
  input  [6 : 0] req_f7;
  input  [2 : 0] req_rm;
  input  [4 : 0] req_rs2;
  input  [63 : 0] req_v1;
  input  [63 : 0] req_v2;
  input  [63 : 0] req_v3;
  input  EN_req;

  // value method valid
  output valid;

  // value method word_fst
  output [63 : 0] word_fst;

  // value method word_snd
  output [4 : 0] word_snd;

  // signals for module outputs
  wire [63 : 0] word_fst;
  wire [4 : 0] word_snd;
  wire RDY_server_reset_request_put, RDY_server_reset_response_get, valid;

  // inlined wires
  wire [68 : 0] dw_result$wget;
  wire dw_valid$wget, dw_valid$whas;

  // register requestR
  reg [214 : 0] requestR;
  wire [214 : 0] requestR$D_IN;
  wire requestR$EN;

  // register resultR
  reg [69 : 0] resultR;
  reg [69 : 0] resultR$D_IN;
  wire resultR$EN;

  // register stateR
  reg [1 : 0] stateR;
  reg [1 : 0] stateR$D_IN;
  wire stateR$EN;

  // ports of submodule fpu
  reg [201 : 0] fpu$server_core_request_put;
  wire [69 : 0] fpu$server_core_response_get;
  wire fpu$EN_server_core_request_put,
       fpu$EN_server_core_response_get,
       fpu$EN_server_reset_request_put,
       fpu$EN_server_reset_response_get,
       fpu$RDY_server_core_request_put,
       fpu$RDY_server_core_response_get,
       fpu$RDY_server_reset_request_put,
       fpu$RDY_server_reset_response_get;

  // ports of submodule frmFpuF
  wire frmFpuF$CLR, frmFpuF$DEQ, frmFpuF$D_IN, frmFpuF$ENQ;

  // ports of submodule resetReqsF
  wire resetReqsF$CLR,
       resetReqsF$DEQ,
       resetReqsF$EMPTY_N,
       resetReqsF$ENQ,
       resetReqsF$FULL_N;

  // ports of submodule resetRspsF
  wire resetRspsF$CLR,
       resetRspsF$DEQ,
       resetRspsF$EMPTY_N,
       resetRspsF$ENQ,
       resetRspsF$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_doFADD_S,
       CAN_FIRE_RL_doFCLASS_S,
       CAN_FIRE_RL_doFCVT_S_W,
       CAN_FIRE_RL_doFCVT_S_WU,
       CAN_FIRE_RL_doFCVT_WU_S,
       CAN_FIRE_RL_doFCVT_W_S,
       CAN_FIRE_RL_doFEQ_S,
       CAN_FIRE_RL_doFLE_S,
       CAN_FIRE_RL_doFLT_S,
       CAN_FIRE_RL_doFMADD_S,
       CAN_FIRE_RL_doFMAX_S,
       CAN_FIRE_RL_doFMIN_S,
       CAN_FIRE_RL_doFMSUB_S,
       CAN_FIRE_RL_doFMUL_S,
       CAN_FIRE_RL_doFMV_W_X,
       CAN_FIRE_RL_doFMV_X_W,
       CAN_FIRE_RL_doFNMADD_S,
       CAN_FIRE_RL_doFNMSUB_S,
       CAN_FIRE_RL_doFSGNJN_S,
       CAN_FIRE_RL_doFSGNJX_S,
       CAN_FIRE_RL_doFSGNJ_S,
       CAN_FIRE_RL_doFSUB_S,
       CAN_FIRE_RL_rl_drive_fpu_result,
       CAN_FIRE_RL_rl_get_fpu_result,
       CAN_FIRE_RL_rl_reset_begin,
       CAN_FIRE_RL_rl_reset_end,
       CAN_FIRE_req,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       WILL_FIRE_RL_doFADD_S,
       WILL_FIRE_RL_doFCLASS_S,
       WILL_FIRE_RL_doFCVT_S_W,
       WILL_FIRE_RL_doFCVT_S_WU,
       WILL_FIRE_RL_doFCVT_WU_S,
       WILL_FIRE_RL_doFCVT_W_S,
       WILL_FIRE_RL_doFEQ_S,
       WILL_FIRE_RL_doFLE_S,
       WILL_FIRE_RL_doFLT_S,
       WILL_FIRE_RL_doFMADD_S,
       WILL_FIRE_RL_doFMAX_S,
       WILL_FIRE_RL_doFMIN_S,
       WILL_FIRE_RL_doFMSUB_S,
       WILL_FIRE_RL_doFMUL_S,
       WILL_FIRE_RL_doFMV_W_X,
       WILL_FIRE_RL_doFMV_X_W,
       WILL_FIRE_RL_doFNMADD_S,
       WILL_FIRE_RL_doFNMSUB_S,
       WILL_FIRE_RL_doFSGNJN_S,
       WILL_FIRE_RL_doFSGNJX_S,
       WILL_FIRE_RL_doFSGNJ_S,
       WILL_FIRE_RL_doFSUB_S,
       WILL_FIRE_RL_rl_drive_fpu_result,
       WILL_FIRE_RL_rl_get_fpu_result,
       WILL_FIRE_RL_rl_reset_begin,
       WILL_FIRE_RL_rl_reset_end,
       WILL_FIRE_req,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get;

  // inputs to muxes for submodule ports
  wire [214 : 0] MUX_requestR$write_1__VAL_2;
  wire [201 : 0] MUX_fpu$server_core_request_put_1__VAL_1,
		 MUX_fpu$server_core_request_put_1__VAL_2,
		 MUX_fpu$server_core_request_put_1__VAL_3,
		 MUX_fpu$server_core_request_put_1__VAL_4,
		 MUX_fpu$server_core_request_put_1__VAL_5,
		 MUX_fpu$server_core_request_put_1__VAL_6,
		 MUX_fpu$server_core_request_put_1__VAL_7;
  wire [69 : 0] MUX_resultR$write_1__VAL_10,
		MUX_resultR$write_1__VAL_11,
		MUX_resultR$write_1__VAL_12,
		MUX_resultR$write_1__VAL_13,
		MUX_resultR$write_1__VAL_14,
		MUX_resultR$write_1__VAL_15,
		MUX_resultR$write_1__VAL_16,
		MUX_resultR$write_1__VAL_17,
		MUX_resultR$write_1__VAL_18,
		MUX_resultR$write_1__VAL_3,
		MUX_resultR$write_1__VAL_4,
		MUX_resultR$write_1__VAL_5,
		MUX_resultR$write_1__VAL_6,
		MUX_resultR$write_1__VAL_7,
		MUX_resultR$write_1__VAL_8,
		MUX_resultR$write_1__VAL_9;
  wire [68 : 0] MUX_dw_result$wset_1__VAL_1;
  wire MUX_dw_result$wset_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1064;
  reg [31 : 0] v__h1489;
  reg [31 : 0] v__h1678;
  reg [31 : 0] v__h1879;
  reg [31 : 0] v__h2129;
  reg [31 : 0] v__h2314;
  reg [31 : 0] v__h2499;
  reg [31 : 0] v__h2693;
  reg [31 : 0] v__h2871;
  reg [31 : 0] v__h3039;
  reg [31 : 0] v__h3241;
  reg [31 : 0] v__h9737;
  reg [31 : 0] v__h15915;
  reg [31 : 0] v__h17541;
  reg [31 : 0] v__h18323;
  reg [31 : 0] v__h20982;
  reg [31 : 0] v__h23538;
  reg [31 : 0] v__h23693;
  reg [31 : 0] v__h23863;
  reg [31 : 0] v__h25375;
  reg [31 : 0] v__h26475;
  reg [31 : 0] v__h27595;
  reg [31 : 0] v__h28376;
  reg [31 : 0] v__h1058;
  reg [31 : 0] v__h1483;
  reg [31 : 0] v__h1672;
  reg [31 : 0] v__h1873;
  reg [31 : 0] v__h2123;
  reg [31 : 0] v__h2308;
  reg [31 : 0] v__h2493;
  reg [31 : 0] v__h2687;
  reg [31 : 0] v__h2865;
  reg [31 : 0] v__h3033;
  reg [31 : 0] v__h3235;
  reg [31 : 0] v__h9731;
  reg [31 : 0] v__h15909;
  reg [31 : 0] v__h17535;
  reg [31 : 0] v__h18317;
  reg [31 : 0] v__h20976;
  reg [31 : 0] v__h23532;
  reg [31 : 0] v__h23687;
  reg [31 : 0] v__h23857;
  reg [31 : 0] v__h25369;
  reg [31 : 0] v__h26469;
  reg [31 : 0] v__h27589;
  reg [31 : 0] v__h28370;
  // synopsys translate_on

  // remaining internal signals
  reg [22 : 0] CASE_guard258_0b0_sfd___3248_BITS_31_TO_9_0b1__ETC__q12,
	       CASE_guard258_0b0_sfd___3248_BITS_31_TO_9_0b1__ETC__q13,
	       CASE_guard4470_0b0_sfd___34460_BITS_31_TO_9_0b_ETC__q25,
	       CASE_guard4470_0b0_sfd___34460_BITS_31_TO_9_0b_ETC__q26,
	       CASE_guard4996_0b0_sfd___34460_BITS_30_TO_8_0b_ETC__q23,
	       CASE_guard4996_0b0_sfd___34460_BITS_30_TO_8_0b_ETC__q24,
	       CASE_guard788_0b0_sfd___3248_BITS_30_TO_8_0b1__ETC__q14,
	       CASE_guard788_0b0_sfd___3248_BITS_30_TO_8_0b1__ETC__q15,
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d412,
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d430,
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d731,
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d746;
  reg [7 : 0] CASE_guard258_0b0_0_0b1_0_0b10_out_exp677_0b11_ETC__q5,
	      CASE_guard258_0b0_0_0b1_theResult___exp674_0b1_ETC__q4,
	      CASE_guard4470_0b0_0_0b1_0_0b10_out_exp4886_0b_ETC__q18,
	      CASE_guard4470_0b0_0_0b1_theResult___exp4883_0_ETC__q19,
	      CASE_guard4996_0b0_x5011_BITS_7_TO_0_0b1_theRe_ETC__q21,
	      CASE_guard4996_0b0_x5011_BITS_7_TO_0_0b1_x5011_ETC__q22,
	      CASE_guard788_0b0_x803_BITS_7_TO_0_0b1_theResu_ETC__q10,
	      CASE_guard788_0b0_x803_BITS_7_TO_0_0b1_x803_BI_ETC__q11,
	      CASE_requestR_BITS_194_TO_192_0x3_IF_guard4470_ETC__q20,
	      IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d360,
	      IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d389,
	      IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d708;
  reg [2 : 0] IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42;
  reg CASE_guard258_0b0_requestR_BIT_159_0b1_request_ETC__q6,
      CASE_guard788_0b0_requestR_BIT_159_0b1_request_ETC__q8,
      CASE_requestR_BITS_194_TO_192_0x2_requestR_BIT_ETC__q7,
      CASE_requestR_BITS_194_TO_192_0x2_requestR_BIT_ETC__q9;
  wire [63 : 0] IF_requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_r_ETC___d1135,
		IF_requestR_3_BITS_94_TO_87_87_EQ_255_88_AND_N_ETC___d1042,
		IF_requestR_3_BITS_94_TO_87_87_EQ_255_88_AND_N_ETC___d1059,
		res___1__h27694,
		res___1__h27929,
		res___1__h27939,
		res___1__h27958,
		res__h19084,
		res__h19320,
		res__h24810,
		res__h26322,
		res__h27422,
		res__h27974,
		res__h28173,
		x__h15996,
		x__h17624,
		x__h18408,
		x__h21067,
		x__h23772,
		x__h23944,
		x__h25456,
		x__h26556,
		x__h27674,
		x__h2780,
		x__h28097,
		x__h2951,
		x__h3119,
		x__h3323,
		x__h9819;
  wire [56 : 0] IF_requestR_3_BIT_159_20_THEN_NEG_0b0_CONCAT_N_ETC___d835,
		b__h16242,
		x__h16918,
		x__h18048;
  wire [32 : 0] _theResult_____2__h16177, out1___1__h16669;
  wire [31 : 0] IF_NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINU_ETC___d890,
		IF_NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINU_ETC___d892,
		IF_NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINU_ETC___d953,
		IF_requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_r_ETC___d955,
		IF_requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_ETC___d894,
		IF_requestR_3_BITS_94_TO_87_87_EQ_0_004_AND_re_ETC___d1037,
		IF_requestR_3_BITS_94_TO_87_87_EQ_0_004_AND_re_ETC___d1053,
		IF_requestR_3_BITS_94_TO_87_87_EQ_255_88_AND_r_ETC___d1038,
		IF_requestR_3_BITS_94_TO_87_87_EQ_255_88_AND_r_ETC___d1055,
		IF_requestR_3_BIT_159_20_THEN_2147483648_ELSE__ETC___d823,
		requestR_BITS_159_TO_128__q1,
		sfd___3__h14460,
		sfd___3__h8248,
		sfd__h3344,
		x__h15999,
		x__h17627,
		x__h2787,
		x__h2958,
		x__h3126,
		x__h3329;
  wire [24 : 0] sfd__h14487,
		sfd__h15026,
		sfd__h8275,
		sfd__h8818,
		value__h16244;
  wire [22 : 0] IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d406,
		IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d408,
		IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d424,
		IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d426,
		_theResult___fst_sfd__h14980,
		_theResult___fst_sfd__h15532,
		_theResult___fst_sfd__h15535,
		_theResult___fst_sfd__h8772,
		_theResult___fst_sfd__h9325,
		_theResult___fst_sfd__h9328,
		_theResult___sfd__h14884,
		_theResult___sfd__h15436,
		_theResult___sfd__h8675,
		_theResult___sfd__h9228,
		_theResult___snd_fst_sfd__h15538,
		_theResult___snd_fst_sfd__h9331,
		out_sfd__h14887,
		out_sfd__h15439,
		out_sfd__h8678,
		out_sfd__h9231;
  wire [19 : 0] NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d828,
		NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d860,
		NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d861,
		NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d926;
  wire [8 : 0] _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d268,
	       _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d627,
	       x__h15011,
	       x__h8803;
  wire [7 : 0] IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d357,
	       IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d383,
	       IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d385,
	       IF_requestR_3_BITS_159_TO_128_34_EQ_0_35_OR_NO_ETC___d395,
	       _theResult___exp__h14883,
	       _theResult___exp__h15435,
	       _theResult___exp__h8674,
	       _theResult___exp__h9227,
	       _theResult___fst_exp__h14979,
	       _theResult___fst_exp__h15531,
	       _theResult___fst_exp__h15534,
	       _theResult___fst_exp__h8771,
	       _theResult___fst_exp__h9324,
	       _theResult___fst_exp__h9327,
	       _theResult___snd_fst_exp__h15537,
	       _theResult___snd_fst_exp__h15540,
	       _theResult___snd_fst_exp__h15543,
	       _theResult___snd_fst_exp__h9330,
	       _theResult___snd_fst_exp__h9333,
	       _theResult___snd_fst_exp__h9336,
	       din_inc___2_exp__h15573,
	       din_inc___2_exp__h9370,
	       out_exp__h14886,
	       out_exp__h15438,
	       out_exp__h8677,
	       out_exp__h9230,
	       requestR_BITS_158_TO_151_MINUS_127__q27;
  wire [5 : 0] IF_IF_requestR_3_BIT_159_20_THEN_NEG_requestR__ETC___d265,
	       IF_requestR_3_BIT_159_20_THEN_0_ELSE_IF_reques_ETC___d624;
  wire [4 : 0] x__h15677,
	       x__h17332,
	       x__h18126,
	       x__h20440,
	       x__h26341,
	       x__h9496;
  wire [1 : 0] IF_sfd___3248_BIT_7_THEN_2_ELSE_0__q3,
	       IF_sfd___3248_BIT_8_THEN_2_ELSE_0__q2,
	       IF_sfd___34460_BIT_7_THEN_2_ELSE_0__q17,
	       IF_sfd___34460_BIT_8_THEN_2_ELSE_0__q16,
	       IF_x6918_BIT_24_THEN_2_ELSE_0__q28,
	       IF_x8048_BIT_24_THEN_2_ELSE_0__q29,
	       guard__h14470,
	       guard__h14996,
	       guard__h16175,
	       guard__h16729,
	       guard__h17827,
	       guard__h8258,
	       guard__h8788;
  wire IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159__ETC___d335,
       IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159__ETC___d485,
       IF_32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20__ETC___d800,
       IF_NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINU_ETC___d916,
       IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_OR_NO_ETC___d852,
       IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_OR_NO_ETC___d884,
       IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_OR_NO_ETC___d947,
       IF_requestR_3_BIT_159_20_THEN_NEG_requestR_3_B_ETC___d476,
       IF_requestR_3_BIT_159_20_THEN_NEG_requestR_3_B_ETC___d479,
       IF_requestR_3_BIT_159_20_THEN_NEG_requestR_3_B_ETC___d488,
       IF_requestR_3_BIT_159_20_THEN_NOT_requestR_3_B_ETC___d1031,
       NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d863,
       NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d928,
       NOT_IF_requestR_3_BIT_159_20_THEN_NEG_requestR_ETC___d273,
       NOT_requestR_3_BITS_158_TO_151_14_EQ_0_24_30_O_ETC___d905,
       NOT_requestR_3_BITS_158_TO_151_14_EQ_0_24_30_O_ETC___d970,
       NOT_requestR_3_BITS_158_TO_151_14_EQ_255_15_08_ETC___d1035,
       NOT_requestR_3_BITS_158_TO_151_14_EQ_255_15_08_ETC___d1121,
       NOT_requestR_3_BITS_158_TO_151_14_ULT_requestR_ETC___d1096,
       NOT_requestR_3_BIT_159_20_98_AND_NOT_requestR__ETC___d717,
       NOT_verbosity_ULE_1_4___d25,
       _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d269,
       _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d271,
       _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d274,
       _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d628,
       _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d629,
       _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d630,
       requestR_3_BITS_150_TO_128_16_ULE_requestR_3_B_ETC___d1023,
       requestR_3_BITS_150_TO_128_16_ULT_requestR_3_B_ETC___d1028,
       requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_requ_ETC___d1007,
       requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_requ_ETC___d1100,
       requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_0__ETC___d965,
       requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_0__ETC___d976,
       requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d1045,
       requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d1085,
       requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d996,
       requestR_3_BITS_158_TO_151_14_EQ_requestR_3_BI_ETC___d1022,
       requestR_3_BITS_158_TO_151_14_ULE_requestR_3_B_ETC___d1020,
       requestR_3_BITS_158_TO_151_14_ULE_requestR_3_B_ETC___d1095,
       requestR_3_BITS_158_TO_151_14_ULT_requestR_3_B_ETC___d1027,
       requestR_3_BITS_94_TO_87_87_EQ_0_004_AND_reque_ETC___d1011,
       requestR_3_BIT_159_20_OR_requestR_3_BIT_158_99_ETC___d791,
       requestR_3_BIT_159_20_OR_requestR_3_BIT_158_99_ETC___d794,
       requestR_3_BIT_159_20_OR_requestR_3_BIT_158_99_ETC___d803;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = resetReqsF$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = resetReqsF$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = resetRspsF$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = resetRspsF$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas && dw_valid$wget ;

  // value method word_fst
  assign word_fst = dw_result$wget[68:5] ;

  // value method word_snd
  assign word_snd = dw_result$wget[4:0] ;

  // submodule fpu
  mkFPU fpu(.CLK(CLK),
	    .RST_N(RST_N),
	    .server_core_request_put(fpu$server_core_request_put),
	    .EN_server_core_request_put(fpu$EN_server_core_request_put),
	    .EN_server_core_response_get(fpu$EN_server_core_response_get),
	    .EN_server_reset_request_put(fpu$EN_server_reset_request_put),
	    .EN_server_reset_response_get(fpu$EN_server_reset_response_get),
	    .RDY_server_core_request_put(fpu$RDY_server_core_request_put),
	    .server_core_response_get(fpu$server_core_response_get),
	    .RDY_server_core_response_get(fpu$RDY_server_core_response_get),
	    .RDY_server_reset_request_put(fpu$RDY_server_reset_request_put),
	    .RDY_server_reset_response_get(fpu$RDY_server_reset_response_get));

  // submodule frmFpuF
  FIFO2 #(.width(32'd1), .guarded(32'd1)) frmFpuF(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(frmFpuF$D_IN),
						  .ENQ(frmFpuF$ENQ),
						  .DEQ(frmFpuF$DEQ),
						  .CLR(frmFpuF$CLR),
						  .D_OUT(),
						  .FULL_N(),
						  .EMPTY_N());

  // submodule resetReqsF
  FIFO20 #(.guarded(32'd1)) resetReqsF(.RST(RST_N),
				       .CLK(CLK),
				       .ENQ(resetReqsF$ENQ),
				       .DEQ(resetReqsF$DEQ),
				       .CLR(resetReqsF$CLR),
				       .FULL_N(resetReqsF$FULL_N),
				       .EMPTY_N(resetReqsF$EMPTY_N));

  // submodule resetRspsF
  FIFO20 #(.guarded(32'd1)) resetRspsF(.RST(RST_N),
				       .CLK(CLK),
				       .ENQ(resetRspsF$ENQ),
				       .DEQ(resetRspsF$DEQ),
				       .CLR(resetRspsF$CLR),
				       .FULL_N(resetRspsF$FULL_N),
				       .EMPTY_N(resetRspsF$EMPTY_N));

  // rule RL_rl_reset_end
  assign CAN_FIRE_RL_rl_reset_end =
	     fpu$RDY_server_reset_response_get && resetRspsF$FULL_N &&
	     stateR == 2'd0 ;
  assign WILL_FIRE_RL_rl_reset_end = CAN_FIRE_RL_rl_reset_end ;

  // rule RL_doFADD_S
  assign CAN_FIRE_RL_doFADD_S =
	     fpu$RDY_server_core_request_put && requestR[214] &&
	     stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h0 ;
  assign WILL_FIRE_RL_doFADD_S = CAN_FIRE_RL_doFADD_S ;

  // rule RL_doFSUB_S
  assign CAN_FIRE_RL_doFSUB_S =
	     fpu$RDY_server_core_request_put && requestR[214] &&
	     stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h04 ;
  assign WILL_FIRE_RL_doFSUB_S = CAN_FIRE_RL_doFSUB_S ;

  // rule RL_doFMUL_S
  assign CAN_FIRE_RL_doFMUL_S =
	     fpu$RDY_server_core_request_put && requestR[214] &&
	     stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h08 ;
  assign WILL_FIRE_RL_doFMUL_S = CAN_FIRE_RL_doFMUL_S ;

  // rule RL_doFMADD_S
  assign CAN_FIRE_RL_doFMADD_S =
	     fpu$RDY_server_core_request_put && requestR[214] &&
	     stateR == 2'd1 &&
	     requestR[213:207] == 7'b1000011 &&
	     requestR[201:200] == 2'd0 ;
  assign WILL_FIRE_RL_doFMADD_S = CAN_FIRE_RL_doFMADD_S ;

  // rule RL_doFMSUB_S
  assign CAN_FIRE_RL_doFMSUB_S =
	     fpu$RDY_server_core_request_put && requestR[214] &&
	     stateR == 2'd1 &&
	     requestR[213:207] == 7'b1000111 &&
	     requestR[201:200] == 2'd0 ;
  assign WILL_FIRE_RL_doFMSUB_S = CAN_FIRE_RL_doFMSUB_S ;

  // rule RL_doFNMADD_S
  assign CAN_FIRE_RL_doFNMADD_S =
	     fpu$RDY_server_core_request_put && requestR[214] &&
	     stateR == 2'd1 &&
	     requestR[213:207] == 7'b1001111 &&
	     requestR[201:200] == 2'd0 ;
  assign WILL_FIRE_RL_doFNMADD_S = CAN_FIRE_RL_doFNMADD_S ;

  // rule RL_doFNMSUB_S
  assign CAN_FIRE_RL_doFNMSUB_S =
	     fpu$RDY_server_core_request_put && requestR[214] &&
	     stateR == 2'd1 &&
	     requestR[213:207] == 7'b1001011 &&
	     requestR[201:200] == 2'd0 ;
  assign WILL_FIRE_RL_doFNMSUB_S = CAN_FIRE_RL_doFNMSUB_S ;

  // rule RL_doFSGNJ_S
  assign CAN_FIRE_RL_doFSGNJ_S =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h10 &&
	     requestR[194:192] == 3'h0 ;
  assign WILL_FIRE_RL_doFSGNJ_S = CAN_FIRE_RL_doFSGNJ_S ;

  // rule RL_doFSGNJN_S
  assign CAN_FIRE_RL_doFSGNJN_S =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h10 &&
	     requestR[194:192] == 3'h1 ;
  assign WILL_FIRE_RL_doFSGNJN_S = CAN_FIRE_RL_doFSGNJN_S ;

  // rule RL_doFSGNJX_S
  assign CAN_FIRE_RL_doFSGNJX_S =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h10 &&
	     requestR[194:192] == 3'h2 ;
  assign WILL_FIRE_RL_doFSGNJX_S = CAN_FIRE_RL_doFSGNJX_S ;

  // rule RL_doFCVT_S_W
  assign CAN_FIRE_RL_doFCVT_S_W =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h68 &&
	     requestR[199:195] == 5'd0 ;
  assign WILL_FIRE_RL_doFCVT_S_W = CAN_FIRE_RL_doFCVT_S_W ;

  // rule RL_doFCVT_S_WU
  assign CAN_FIRE_RL_doFCVT_S_WU =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h68 &&
	     requestR[199:195] == 5'd1 ;
  assign WILL_FIRE_RL_doFCVT_S_WU = CAN_FIRE_RL_doFCVT_S_WU ;

  // rule RL_doFCVT_W_S
  assign CAN_FIRE_RL_doFCVT_W_S =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h60 &&
	     requestR[199:195] == 5'd0 ;
  assign WILL_FIRE_RL_doFCVT_W_S = CAN_FIRE_RL_doFCVT_W_S ;

  // rule RL_doFCVT_WU_S
  assign CAN_FIRE_RL_doFCVT_WU_S =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h60 &&
	     requestR[199:195] == 5'd1 ;
  assign WILL_FIRE_RL_doFCVT_WU_S = CAN_FIRE_RL_doFCVT_WU_S ;

  // rule RL_doFMIN_S
  assign CAN_FIRE_RL_doFMIN_S =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h14 &&
	     requestR[194:192] == 3'h0 ;
  assign WILL_FIRE_RL_doFMIN_S = CAN_FIRE_RL_doFMIN_S ;

  // rule RL_doFMAX_S
  assign CAN_FIRE_RL_doFMAX_S =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h14 &&
	     requestR[194:192] == 3'h1 ;
  assign WILL_FIRE_RL_doFMAX_S = CAN_FIRE_RL_doFMAX_S ;

  // rule RL_doFMV_W_X
  assign CAN_FIRE_RL_doFMV_W_X =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h78 &&
	     requestR[194:192] == 3'h0 ;
  assign WILL_FIRE_RL_doFMV_W_X = CAN_FIRE_RL_doFMV_W_X ;

  // rule RL_doFMV_X_W
  assign CAN_FIRE_RL_doFMV_X_W =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h70 &&
	     requestR[194:192] == 3'h0 ;
  assign WILL_FIRE_RL_doFMV_X_W = CAN_FIRE_RL_doFMV_X_W ;

  // rule RL_doFEQ_S
  assign CAN_FIRE_RL_doFEQ_S =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h50 &&
	     requestR[194:192] == 3'h2 ;
  assign WILL_FIRE_RL_doFEQ_S = CAN_FIRE_RL_doFEQ_S ;

  // rule RL_doFLT_S
  assign CAN_FIRE_RL_doFLT_S =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h50 &&
	     requestR[194:192] == 3'h1 ;
  assign WILL_FIRE_RL_doFLT_S = CAN_FIRE_RL_doFLT_S ;

  // rule RL_doFLE_S
  assign CAN_FIRE_RL_doFLE_S =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h50 &&
	     requestR[194:192] == 3'h0 ;
  assign WILL_FIRE_RL_doFLE_S = CAN_FIRE_RL_doFLE_S ;

  // rule RL_doFCLASS_S
  assign CAN_FIRE_RL_doFCLASS_S =
	     requestR[214] && stateR == 2'd1 &&
	     requestR[213:207] == 7'b1010011 &&
	     requestR[206:200] == 7'h70 &&
	     requestR[194:192] == 3'h1 ;
  assign WILL_FIRE_RL_doFCLASS_S = CAN_FIRE_RL_doFCLASS_S ;

  // rule RL_rl_get_fpu_result
  assign CAN_FIRE_RL_rl_get_fpu_result = MUX_dw_result$wset_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_get_fpu_result = MUX_dw_result$wset_1__SEL_1 ;

  // rule RL_rl_drive_fpu_result
  assign CAN_FIRE_RL_rl_drive_fpu_result = stateR == 2'd3 ;
  assign WILL_FIRE_RL_rl_drive_fpu_result = stateR == 2'd3 ;

  // rule RL_rl_reset_begin
  assign CAN_FIRE_RL_rl_reset_begin =
	     fpu$RDY_server_reset_request_put && resetReqsF$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_begin = CAN_FIRE_RL_rl_reset_begin ;

  // inputs to muxes for submodule ports
  assign MUX_dw_result$wset_1__SEL_1 =
	     fpu$RDY_server_core_response_get && stateR == 2'd2 ;
  assign MUX_dw_result$wset_1__VAL_1 =
	     { x__h28097, fpu$server_core_response_get[4:0] } ;
  assign MUX_fpu$server_core_request_put_1__VAL_1 =
	     { 1'd1,
	       requestR[191:128],
	       1'd1,
	       requestR[127:64],
	       65'h0AAAAAAAAAAAAAAAA,
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd0 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_2 =
	     { 1'd1,
	       requestR[191:128],
	       1'd1,
	       requestR[127:64],
	       65'h0AAAAAAAAAAAAAAAA,
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd1 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_3 =
	     { 1'd1,
	       requestR[191:128],
	       1'd1,
	       requestR[127:64],
	       65'h0AAAAAAAAAAAAAAAA,
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd2 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_4 =
	     { 1'd1,
	       requestR[191:128],
	       1'd1,
	       requestR[127:64],
	       1'd1,
	       requestR[63:0],
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd5 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_5 =
	     { 1'd1,
	       requestR[191:128],
	       1'd1,
	       requestR[127:64],
	       1'd1,
	       requestR[63:0],
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd6 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_6 =
	     { 1'd1,
	       requestR[191:128],
	       1'd1,
	       requestR[127:64],
	       1'd1,
	       requestR[63:0],
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd7 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_7 =
	     { 1'd1,
	       requestR[191:128],
	       1'd1,
	       requestR[127:64],
	       1'd1,
	       requestR[63:0],
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd8 } ;
  assign MUX_requestR$write_1__VAL_2 =
	     { 1'd1,
	       req_opcode,
	       req_f7,
	       req_rs2,
	       req_rm,
	       req_v1,
	       req_v2,
	       req_v3 } ;
  assign MUX_resultR$write_1__VAL_3 =
	     { 1'd1, x__h28097, fpu$server_core_response_get[4:0] } ;
  assign MUX_resultR$write_1__VAL_4 = { 1'd1, x__h27674, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_5 = { 1'd1, x__h26556, x__h26341 } ;
  assign MUX_resultR$write_1__VAL_6 = { 1'd1, x__h25456, x__h26341 } ;
  assign MUX_resultR$write_1__VAL_7 = { 1'd1, x__h23944, x__h20440 } ;
  assign MUX_resultR$write_1__VAL_8 = { 1'd1, x__h23772, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_9 = { 1'd1, res__h19320, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_10 = { 1'd1, x__h21067, x__h20440 } ;
  assign MUX_resultR$write_1__VAL_11 = { 1'd1, x__h18408, x__h20440 } ;
  assign MUX_resultR$write_1__VAL_12 = { 1'd1, x__h17624, x__h18126 } ;
  assign MUX_resultR$write_1__VAL_13 = { 1'd1, x__h15996, x__h17332 } ;
  assign MUX_resultR$write_1__VAL_14 = { 1'd1, x__h9819, x__h15677 } ;
  assign MUX_resultR$write_1__VAL_15 = { 1'd1, x__h3323, x__h9496 } ;
  assign MUX_resultR$write_1__VAL_16 = { 1'd1, x__h3119, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_17 = { 1'd1, x__h2951, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_18 = { 1'd1, x__h2780, 5'd0 } ;

  // inlined wires
  assign dw_valid$wget = !WILL_FIRE_RL_rl_drive_fpu_result || resultR[69] ;
  assign dw_valid$whas =
	     WILL_FIRE_RL_rl_drive_fpu_result ||
	     WILL_FIRE_RL_rl_get_fpu_result ;
  assign dw_result$wget =
	     WILL_FIRE_RL_rl_get_fpu_result ?
	       MUX_dw_result$wset_1__VAL_1 :
	       resultR[68:0] ;

  // register requestR
  assign requestR$D_IN =
	     WILL_FIRE_RL_rl_reset_begin ?
	       215'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_requestR$write_1__VAL_2 ;
  assign requestR$EN = WILL_FIRE_RL_rl_reset_begin || EN_req ;

  // register resultR
  always@(WILL_FIRE_RL_rl_reset_begin or
	  EN_req or
	  WILL_FIRE_RL_rl_get_fpu_result or
	  MUX_resultR$write_1__VAL_3 or
	  WILL_FIRE_RL_doFCLASS_S or
	  MUX_resultR$write_1__VAL_4 or
	  WILL_FIRE_RL_doFLE_S or
	  MUX_resultR$write_1__VAL_5 or
	  WILL_FIRE_RL_doFLT_S or
	  MUX_resultR$write_1__VAL_6 or
	  WILL_FIRE_RL_doFEQ_S or
	  MUX_resultR$write_1__VAL_7 or
	  WILL_FIRE_RL_doFMV_X_W or
	  MUX_resultR$write_1__VAL_8 or
	  WILL_FIRE_RL_doFMV_W_X or
	  MUX_resultR$write_1__VAL_9 or
	  WILL_FIRE_RL_doFMAX_S or
	  MUX_resultR$write_1__VAL_10 or
	  WILL_FIRE_RL_doFMIN_S or
	  MUX_resultR$write_1__VAL_11 or
	  WILL_FIRE_RL_doFCVT_WU_S or
	  MUX_resultR$write_1__VAL_12 or
	  WILL_FIRE_RL_doFCVT_W_S or
	  MUX_resultR$write_1__VAL_13 or
	  WILL_FIRE_RL_doFCVT_S_WU or
	  MUX_resultR$write_1__VAL_14 or
	  WILL_FIRE_RL_doFCVT_S_W or
	  MUX_resultR$write_1__VAL_15 or
	  WILL_FIRE_RL_doFSGNJX_S or
	  MUX_resultR$write_1__VAL_16 or
	  WILL_FIRE_RL_doFSGNJN_S or
	  MUX_resultR$write_1__VAL_17 or
	  WILL_FIRE_RL_doFSGNJ_S or MUX_resultR$write_1__VAL_18)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_begin || EN_req:
	resultR$D_IN = 70'h0AAAAAAAAAAAAAAAAA;
    WILL_FIRE_RL_rl_get_fpu_result: resultR$D_IN = MUX_resultR$write_1__VAL_3;
    WILL_FIRE_RL_doFCLASS_S: resultR$D_IN = MUX_resultR$write_1__VAL_4;
    WILL_FIRE_RL_doFLE_S: resultR$D_IN = MUX_resultR$write_1__VAL_5;
    WILL_FIRE_RL_doFLT_S: resultR$D_IN = MUX_resultR$write_1__VAL_6;
    WILL_FIRE_RL_doFEQ_S: resultR$D_IN = MUX_resultR$write_1__VAL_7;
    WILL_FIRE_RL_doFMV_X_W: resultR$D_IN = MUX_resultR$write_1__VAL_8;
    WILL_FIRE_RL_doFMV_W_X: resultR$D_IN = MUX_resultR$write_1__VAL_9;
    WILL_FIRE_RL_doFMAX_S: resultR$D_IN = MUX_resultR$write_1__VAL_10;
    WILL_FIRE_RL_doFMIN_S: resultR$D_IN = MUX_resultR$write_1__VAL_11;
    WILL_FIRE_RL_doFCVT_WU_S: resultR$D_IN = MUX_resultR$write_1__VAL_12;
    WILL_FIRE_RL_doFCVT_W_S: resultR$D_IN = MUX_resultR$write_1__VAL_13;
    WILL_FIRE_RL_doFCVT_S_WU: resultR$D_IN = MUX_resultR$write_1__VAL_14;
    WILL_FIRE_RL_doFCVT_S_W: resultR$D_IN = MUX_resultR$write_1__VAL_15;
    WILL_FIRE_RL_doFSGNJX_S: resultR$D_IN = MUX_resultR$write_1__VAL_16;
    WILL_FIRE_RL_doFSGNJN_S: resultR$D_IN = MUX_resultR$write_1__VAL_17;
    WILL_FIRE_RL_doFSGNJ_S: resultR$D_IN = MUX_resultR$write_1__VAL_18;
    default: resultR$D_IN = 70'h2AAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign resultR$EN =
	     WILL_FIRE_RL_rl_reset_begin || EN_req ||
	     WILL_FIRE_RL_doFSGNJ_S ||
	     WILL_FIRE_RL_doFSGNJN_S ||
	     WILL_FIRE_RL_doFSGNJX_S ||
	     WILL_FIRE_RL_doFCVT_S_W ||
	     WILL_FIRE_RL_doFCVT_S_WU ||
	     WILL_FIRE_RL_doFCVT_W_S ||
	     WILL_FIRE_RL_doFCVT_WU_S ||
	     WILL_FIRE_RL_doFMIN_S ||
	     WILL_FIRE_RL_doFMAX_S ||
	     WILL_FIRE_RL_doFMV_W_X ||
	     WILL_FIRE_RL_doFMV_X_W ||
	     WILL_FIRE_RL_doFEQ_S ||
	     WILL_FIRE_RL_doFLT_S ||
	     WILL_FIRE_RL_doFLE_S ||
	     WILL_FIRE_RL_doFCLASS_S ||
	     WILL_FIRE_RL_rl_get_fpu_result ;

  // register stateR
  always@(WILL_FIRE_RL_rl_reset_begin or
	  EN_req or
	  WILL_FIRE_RL_rl_get_fpu_result or
	  WILL_FIRE_RL_doFCLASS_S or
	  WILL_FIRE_RL_doFLE_S or
	  WILL_FIRE_RL_doFLT_S or
	  WILL_FIRE_RL_doFEQ_S or
	  WILL_FIRE_RL_doFMV_X_W or
	  WILL_FIRE_RL_doFMV_W_X or
	  WILL_FIRE_RL_doFMAX_S or
	  WILL_FIRE_RL_doFMIN_S or
	  WILL_FIRE_RL_doFCVT_WU_S or
	  WILL_FIRE_RL_doFCVT_W_S or
	  WILL_FIRE_RL_doFCVT_S_WU or
	  WILL_FIRE_RL_doFCVT_S_W or
	  WILL_FIRE_RL_doFSGNJX_S or
	  WILL_FIRE_RL_doFSGNJN_S or
	  WILL_FIRE_RL_doFSGNJ_S or
	  WILL_FIRE_RL_doFNMSUB_S or
	  WILL_FIRE_RL_doFNMADD_S or
	  WILL_FIRE_RL_doFMSUB_S or
	  WILL_FIRE_RL_doFMADD_S or
	  WILL_FIRE_RL_doFMUL_S or
	  WILL_FIRE_RL_doFSUB_S or
	  WILL_FIRE_RL_doFADD_S or WILL_FIRE_RL_rl_reset_end)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_begin: stateR$D_IN = 2'd0;
    EN_req: stateR$D_IN = 2'd1;
    WILL_FIRE_RL_rl_get_fpu_result || WILL_FIRE_RL_doFCLASS_S ||
    WILL_FIRE_RL_doFLE_S ||
    WILL_FIRE_RL_doFLT_S ||
    WILL_FIRE_RL_doFEQ_S ||
    WILL_FIRE_RL_doFMV_X_W ||
    WILL_FIRE_RL_doFMV_W_X ||
    WILL_FIRE_RL_doFMAX_S ||
    WILL_FIRE_RL_doFMIN_S ||
    WILL_FIRE_RL_doFCVT_WU_S ||
    WILL_FIRE_RL_doFCVT_W_S ||
    WILL_FIRE_RL_doFCVT_S_WU ||
    WILL_FIRE_RL_doFCVT_S_W ||
    WILL_FIRE_RL_doFSGNJX_S ||
    WILL_FIRE_RL_doFSGNJN_S ||
    WILL_FIRE_RL_doFSGNJ_S:
	stateR$D_IN = 2'd3;
    WILL_FIRE_RL_doFNMSUB_S || WILL_FIRE_RL_doFNMADD_S ||
    WILL_FIRE_RL_doFMSUB_S ||
    WILL_FIRE_RL_doFMADD_S ||
    WILL_FIRE_RL_doFMUL_S ||
    WILL_FIRE_RL_doFSUB_S ||
    WILL_FIRE_RL_doFADD_S:
	stateR$D_IN = 2'd2;
    WILL_FIRE_RL_rl_reset_end: stateR$D_IN = 2'd1;
    default: stateR$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign stateR$EN =
	     WILL_FIRE_RL_rl_reset_begin || WILL_FIRE_RL_rl_reset_end ||
	     EN_req ||
	     WILL_FIRE_RL_doFNMSUB_S ||
	     WILL_FIRE_RL_doFNMADD_S ||
	     WILL_FIRE_RL_doFMSUB_S ||
	     WILL_FIRE_RL_doFMADD_S ||
	     WILL_FIRE_RL_doFMUL_S ||
	     WILL_FIRE_RL_doFSUB_S ||
	     WILL_FIRE_RL_doFADD_S ||
	     WILL_FIRE_RL_rl_get_fpu_result ||
	     WILL_FIRE_RL_doFCLASS_S ||
	     WILL_FIRE_RL_doFLE_S ||
	     WILL_FIRE_RL_doFLT_S ||
	     WILL_FIRE_RL_doFEQ_S ||
	     WILL_FIRE_RL_doFMV_X_W ||
	     WILL_FIRE_RL_doFMV_W_X ||
	     WILL_FIRE_RL_doFMAX_S ||
	     WILL_FIRE_RL_doFMIN_S ||
	     WILL_FIRE_RL_doFCVT_WU_S ||
	     WILL_FIRE_RL_doFCVT_W_S ||
	     WILL_FIRE_RL_doFCVT_S_WU ||
	     WILL_FIRE_RL_doFCVT_S_W ||
	     WILL_FIRE_RL_doFSGNJX_S ||
	     WILL_FIRE_RL_doFSGNJN_S ||
	     WILL_FIRE_RL_doFSGNJ_S ;

  // submodule fpu
  always@(WILL_FIRE_RL_doFADD_S or
	  MUX_fpu$server_core_request_put_1__VAL_1 or
	  WILL_FIRE_RL_doFSUB_S or
	  MUX_fpu$server_core_request_put_1__VAL_2 or
	  WILL_FIRE_RL_doFMUL_S or
	  MUX_fpu$server_core_request_put_1__VAL_3 or
	  WILL_FIRE_RL_doFMADD_S or
	  MUX_fpu$server_core_request_put_1__VAL_4 or
	  WILL_FIRE_RL_doFMSUB_S or
	  MUX_fpu$server_core_request_put_1__VAL_5 or
	  WILL_FIRE_RL_doFNMADD_S or
	  MUX_fpu$server_core_request_put_1__VAL_6 or
	  WILL_FIRE_RL_doFNMSUB_S or MUX_fpu$server_core_request_put_1__VAL_7)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_doFADD_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_1;
      WILL_FIRE_RL_doFSUB_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_2;
      WILL_FIRE_RL_doFMUL_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_3;
      WILL_FIRE_RL_doFMADD_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_4;
      WILL_FIRE_RL_doFMSUB_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_5;
      WILL_FIRE_RL_doFNMADD_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_6;
      WILL_FIRE_RL_doFNMSUB_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_7;
      default: fpu$server_core_request_put =
		   202'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign fpu$EN_server_core_request_put =
	     WILL_FIRE_RL_doFADD_S || WILL_FIRE_RL_doFSUB_S ||
	     WILL_FIRE_RL_doFMUL_S ||
	     WILL_FIRE_RL_doFMADD_S ||
	     WILL_FIRE_RL_doFMSUB_S ||
	     WILL_FIRE_RL_doFNMADD_S ||
	     WILL_FIRE_RL_doFNMSUB_S ;
  assign fpu$EN_server_core_response_get = MUX_dw_result$wset_1__SEL_1 ;
  assign fpu$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_begin ;
  assign fpu$EN_server_reset_response_get = CAN_FIRE_RL_rl_reset_end ;

  // submodule frmFpuF
  assign frmFpuF$D_IN = 1'b0 ;
  assign frmFpuF$ENQ = 1'b0 ;
  assign frmFpuF$DEQ = 1'b0 ;
  assign frmFpuF$CLR = CAN_FIRE_RL_rl_reset_begin ;

  // submodule resetReqsF
  assign resetReqsF$ENQ = EN_server_reset_request_put ;
  assign resetReqsF$DEQ = CAN_FIRE_RL_rl_reset_begin ;
  assign resetReqsF$CLR = 1'b0 ;

  // submodule resetRspsF
  assign resetRspsF$ENQ = CAN_FIRE_RL_rl_reset_end ;
  assign resetRspsF$DEQ = EN_server_reset_response_get ;
  assign resetRspsF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159__ETC___d335 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d274 ?
	       ((requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
		 requestR[194:192] != 3'h3 &&
		 requestR[194:192] != 3'h4) ?
		  CASE_guard258_0b0_requestR_BIT_159_0b1_request_ETC__q6 :
		  CASE_requestR_BITS_194_TO_192_0x2_requestR_BIT_ETC__q7) :
	       ((x__h8803[7:0] == 8'd255) ?
		  requestR[159] :
		  ((requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
		    requestR[194:192] != 3'h3 &&
		    requestR[194:192] != 3'h4) ?
		     CASE_guard788_0b0_requestR_BIT_159_0b1_request_ETC__q8 :
		     CASE_requestR_BITS_194_TO_192_0x2_requestR_BIT_ETC__q9)) ;
  assign IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159__ETC___d485 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d274 ?
	       guard__h8258 != 2'b0 :
	       x__h8803[7:0] != 8'd255 && guard__h8788 != 2'b0 ;
  assign IF_32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20__ETC___d800 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d630 ?
	       guard__h14470 != 2'b0 :
	       x__h15011[7:0] != 8'd255 && guard__h14996 != 2'b0 ;
  assign IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d357 =
	     (guard__h8258 == 2'b0) ?
	       8'd0 :
	       (requestR[159] ? _theResult___exp__h8674 : 8'd0) ;
  assign IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d383 =
	     (guard__h8788 == 2'b0 || requestR[159]) ?
	       x__h8803[7:0] :
	       _theResult___exp__h9227 ;
  assign IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d385 =
	     (guard__h8788 == 2'b0) ?
	       x__h8803[7:0] :
	       (requestR[159] ? _theResult___exp__h9227 : x__h8803[7:0]) ;
  assign IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d406 =
	     (guard__h8258 == 2'b0 || requestR[159]) ?
	       sfd___3__h8248[31:9] :
	       _theResult___sfd__h8675 ;
  assign IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d408 =
	     (guard__h8258 == 2'b0) ?
	       sfd___3__h8248[31:9] :
	       (requestR[159] ?
		  _theResult___sfd__h8675 :
		  sfd___3__h8248[31:9]) ;
  assign IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d424 =
	     (guard__h8788 == 2'b0 || requestR[159]) ?
	       sfd___3__h8248[30:8] :
	       _theResult___sfd__h9228 ;
  assign IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d426 =
	     (guard__h8788 == 2'b0) ?
	       sfd___3__h8248[30:8] :
	       (requestR[159] ?
		  _theResult___sfd__h9228 :
		  sfd___3__h8248[30:8]) ;
  assign IF_IF_requestR_3_BIT_159_20_THEN_NEG_requestR__ETC___d265 =
	     sfd__h3344[31] ?
	       6'd0 :
	       (sfd__h3344[30] ?
		  6'd1 :
		  (sfd__h3344[29] ?
		     6'd2 :
		     (sfd__h3344[28] ?
			6'd3 :
			(sfd__h3344[27] ?
			   6'd4 :
			   (sfd__h3344[26] ?
			      6'd5 :
			      (sfd__h3344[25] ?
				 6'd6 :
				 (sfd__h3344[24] ?
				    6'd7 :
				    (sfd__h3344[23] ?
				       6'd8 :
				       (sfd__h3344[22] ?
					  6'd9 :
					  (sfd__h3344[21] ?
					     6'd10 :
					     (sfd__h3344[20] ?
						6'd11 :
						(sfd__h3344[19] ?
						   6'd12 :
						   (sfd__h3344[18] ?
						      6'd13 :
						      (sfd__h3344[17] ?
							 6'd14 :
							 (sfd__h3344[16] ?
							    6'd15 :
							    (sfd__h3344[15] ?
							       6'd16 :
							       (sfd__h3344[14] ?
								  6'd17 :
								  (sfd__h3344[13] ?
								     6'd18 :
								     (sfd__h3344[12] ?
									6'd19 :
									(sfd__h3344[11] ?
									   6'd20 :
									   (sfd__h3344[10] ?
									      6'd21 :
									      (sfd__h3344[9] ?
										 6'd22 :
										 (sfd__h3344[8] ?
										    6'd23 :
										    (sfd__h3344[7] ?
										       6'd24 :
										       (sfd__h3344[6] ?
											  6'd25 :
											  (sfd__h3344[5] ?
											     6'd26 :
											     (sfd__h3344[4] ?
												6'd27 :
												(sfd__h3344[3] ?
												   6'd28 :
												   (sfd__h3344[2] ?
												      6'd29 :
												      (sfd__h3344[1] ?
													 6'd30 :
													 (sfd__h3344[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign IF_NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINU_ETC___d890 =
	     NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d863 ?
	       (IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_OR_NO_ETC___d884 ?
		  ((x__h16918[56:25] == 32'h7FFFFFFF) ?
		     x__h16918[56:25] :
		     x__h16918[56:25] + 32'd1) :
		  x__h16918[56:25]) :
	       32'd0 ;
  assign IF_NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINU_ETC___d892 =
	     (NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d828 ==
	      20'd1048545) ?
	       ((_theResult_____2__h16177[32:31] == 2'b11) ?
		  _theResult_____2__h16177[31:0] :
		  IF_requestR_3_BIT_159_20_THEN_2147483648_ELSE__ETC___d823) :
	       (NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d861[19] ?
		  IF_requestR_3_BIT_159_20_THEN_2147483648_ELSE__ETC___d823 :
		  IF_NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINU_ETC___d890) ;
  assign IF_NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINU_ETC___d916 =
	     (NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d828 ==
	      20'd1048545) ?
	       _theResult_____2__h16177[32:31] == 2'b11 &&
	       guard__h16175 != 2'd0 :
	       !NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d861[19] &&
	       (!NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d863 ||
		guard__h16729 != 2'd0) ;
  assign IF_NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINU_ETC___d953 =
	     NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d928 ?
	       (IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_OR_NO_ETC___d947 ?
		  ((x__h18048[56:25] == 32'hFFFFFFFF) ?
		     x__h18048[56:25] :
		     x__h18048[56:25] + 32'd1) :
		  x__h18048[56:25]) :
	       32'd0 ;
  assign IF_requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_r_ETC___d1135 =
	     (requestR[158:151] == 8'd0 && requestR[150:128] == 23'd0) ?
	       res___1__h27939 :
	       ((requestR[158:151] == 8'd0) ? res___1__h27958 : res__h27974) ;
  assign IF_requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_r_ETC___d955 =
	     (requestR[158:151] == 8'd0 && requestR[150:128] == 23'd0) ?
	       32'd0 :
	       (NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d926[19] ?
		  32'hFFFFFFFF :
		  IF_NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINU_ETC___d953) ;
  assign IF_requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_ETC___d894 =
	     (requestR[158:151] == 8'd255 && requestR[150:128] == 23'd0) ?
	       IF_requestR_3_BIT_159_20_THEN_2147483648_ELSE__ETC___d823 :
	       ((requestR[158:151] == 8'd0 && requestR[150:128] == 23'd0) ?
		  32'd0 :
		  IF_NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINU_ETC___d892) ;
  assign IF_requestR_3_BITS_159_TO_128_34_EQ_0_35_OR_NO_ETC___d395 =
	     (requestR[159:128] == 32'd0 ||
	      !sfd__h3344[31] && !sfd__h3344[30] && !sfd__h3344[29] &&
	      !sfd__h3344[28] &&
	      !sfd__h3344[27] &&
	      !sfd__h3344[26] &&
	      !sfd__h3344[25] &&
	      !sfd__h3344[24] &&
	      !sfd__h3344[23] &&
	      !sfd__h3344[22] &&
	      !sfd__h3344[21] &&
	      !sfd__h3344[20] &&
	      !sfd__h3344[19] &&
	      !sfd__h3344[18] &&
	      !sfd__h3344[17] &&
	      !sfd__h3344[16] &&
	      !sfd__h3344[15] &&
	      !sfd__h3344[14] &&
	      !sfd__h3344[13] &&
	      !sfd__h3344[12] &&
	      !sfd__h3344[11] &&
	      !sfd__h3344[10] &&
	      !sfd__h3344[9] &&
	      !sfd__h3344[8] &&
	      !sfd__h3344[7] &&
	      !sfd__h3344[6] &&
	      !sfd__h3344[5] &&
	      !sfd__h3344[4] &&
	      !sfd__h3344[3] &&
	      !sfd__h3344[2] &&
	      !sfd__h3344[1] &&
	      !sfd__h3344[0]) ?
	       8'd0 :
	       _theResult___snd_fst_exp__h9336 ;
  assign IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_OR_NO_ETC___d852 =
	     (requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
	      requestR[194:192] != 3'h3 &&
	      requestR[194:192] != 3'h4) ?
	       ((guard__h16175 == 2'b10) ?
		  IF_requestR_3_BIT_159_20_THEN_NEG_0b0_CONCAT_N_ETC___d835[24] :
		  guard__h16175 == 2'b11) :
	       ((requestR[194:192] == 3'h3) ?
		  guard__h16175 != 2'd0 :
		  requestR[194:192] == 3'h1 &&
		  IF_requestR_3_BIT_159_20_THEN_NEG_0b0_CONCAT_N_ETC___d835[56] &&
		  guard__h16175 != 2'd0) ;
  assign IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_OR_NO_ETC___d884 =
	     (requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
	      requestR[194:192] != 3'h3 &&
	      requestR[194:192] != 3'h4) ?
	       ((guard__h16729 == 2'b10) ?
		  x__h16918[25] :
		  guard__h16729 == 2'b11) :
	       ((requestR[194:192] == 3'h3) ?
		  guard__h16729 != 2'd0 :
		  requestR[194:192] == 3'h1 && x__h16918[56] &&
		  guard__h16729 != 2'd0) ;
  assign IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_OR_NO_ETC___d947 =
	     (requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
	      requestR[194:192] != 3'h3 &&
	      requestR[194:192] != 3'h4) ?
	       ((guard__h17827 == 2'b10) ?
		  x__h18048[25] :
		  guard__h17827 == 2'b11) :
	       requestR[194:192] == 3'h3 && guard__h17827 != 2'd0 ;
  assign IF_requestR_3_BITS_94_TO_87_87_EQ_0_004_AND_re_ETC___d1037 =
	     requestR_3_BITS_94_TO_87_87_EQ_0_004_AND_reque_ETC___d1011 ?
	       requestR[95:64] :
	       (NOT_requestR_3_BITS_158_TO_151_14_EQ_255_15_08_ETC___d1035 ?
		  requestR[159:128] :
		  requestR[95:64]) ;
  assign IF_requestR_3_BITS_94_TO_87_87_EQ_0_004_AND_re_ETC___d1053 =
	     requestR_3_BITS_94_TO_87_87_EQ_0_004_AND_reque_ETC___d1011 ?
	       requestR[159:128] :
	       (NOT_requestR_3_BITS_158_TO_151_14_EQ_255_15_08_ETC___d1035 ?
		  requestR[95:64] :
		  requestR[159:128]) ;
  assign IF_requestR_3_BITS_94_TO_87_87_EQ_255_88_AND_N_ETC___d1042 =
	     (requestR[94:87] == 8'd255 && requestR[86:64] != 23'd0 &&
	      !requestR[86]) ?
	       res__h19320 :
	       ((requestR[158:151] == 8'd255 && requestR[150] &&
		 requestR[94:87] == 8'd255 &&
		 requestR[86]) ?
		  64'hFFFFFFFF7FC00000 :
		  { 32'hFFFFFFFF,
		    (requestR[158:151] == 8'd255 && requestR[150]) ?
		      requestR[95:64] :
		      IF_requestR_3_BITS_94_TO_87_87_EQ_255_88_AND_r_ETC___d1038 }) ;
  assign IF_requestR_3_BITS_94_TO_87_87_EQ_255_88_AND_N_ETC___d1059 =
	     (requestR[94:87] == 8'd255 && requestR[86:64] != 23'd0 &&
	      !requestR[86]) ?
	       res__h19320 :
	       ((requestR[158:151] == 8'd255 && requestR[150] &&
		 requestR[94:87] == 8'd255 &&
		 requestR[86]) ?
		  64'hFFFFFFFF7FC00000 :
		  { 32'hFFFFFFFF,
		    (requestR[158:151] == 8'd255 && requestR[150]) ?
		      requestR[95:64] :
		      IF_requestR_3_BITS_94_TO_87_87_EQ_255_88_AND_r_ETC___d1055 }) ;
  assign IF_requestR_3_BITS_94_TO_87_87_EQ_255_88_AND_r_ETC___d1038 =
	     (requestR[94:87] == 8'd255 && requestR[86] ||
	      requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_requ_ETC___d1007) ?
	       requestR[159:128] :
	       IF_requestR_3_BITS_94_TO_87_87_EQ_0_004_AND_re_ETC___d1037 ;
  assign IF_requestR_3_BITS_94_TO_87_87_EQ_255_88_AND_r_ETC___d1055 =
	     (requestR[94:87] == 8'd255 && requestR[86]) ?
	       requestR[159:128] :
	       (requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_requ_ETC___d1007 ?
		  requestR[95:64] :
		  IF_requestR_3_BITS_94_TO_87_87_EQ_0_004_AND_re_ETC___d1053) ;
  assign IF_requestR_3_BIT_159_20_THEN_0_ELSE_IF_reques_ETC___d624 =
	     requestR[159] ?
	       6'd0 :
	       (requestR[158] ?
		  6'd1 :
		  (requestR[157] ?
		     6'd2 :
		     (requestR[156] ?
			6'd3 :
			(requestR[155] ?
			   6'd4 :
			   (requestR[154] ?
			      6'd5 :
			      (requestR[153] ?
				 6'd6 :
				 (requestR[152] ?
				    6'd7 :
				    (requestR[151] ?
				       6'd8 :
				       (requestR[150] ?
					  6'd9 :
					  (requestR[149] ?
					     6'd10 :
					     (requestR[148] ?
						6'd11 :
						(requestR[147] ?
						   6'd12 :
						   (requestR[146] ?
						      6'd13 :
						      (requestR[145] ?
							 6'd14 :
							 (requestR[144] ?
							    6'd15 :
							    (requestR[143] ?
							       6'd16 :
							       (requestR[142] ?
								  6'd17 :
								  (requestR[141] ?
								     6'd18 :
								     (requestR[140] ?
									6'd19 :
									(requestR[139] ?
									   6'd20 :
									   (requestR[138] ?
									      6'd21 :
									      (requestR[137] ?
										 6'd22 :
										 (requestR[136] ?
										    6'd23 :
										    (requestR[135] ?
										       6'd24 :
										       (requestR[134] ?
											  6'd25 :
											  (requestR[133] ?
											     6'd26 :
											     (requestR[132] ?
												6'd27 :
												(requestR[131] ?
												   6'd28 :
												   (requestR[130] ?
												      6'd29 :
												      (requestR[129] ?
													 6'd30 :
													 (requestR[128] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign IF_requestR_3_BIT_159_20_THEN_2147483648_ELSE__ETC___d823 =
	     requestR[159] ? 32'h80000000 : 32'h7FFFFFFF ;
  assign IF_requestR_3_BIT_159_20_THEN_NEG_0b0_CONCAT_N_ETC___d835 =
	     requestR[159] ? -b__h16242 : b__h16242 ;
  assign IF_requestR_3_BIT_159_20_THEN_NEG_requestR_3_B_ETC___d476 =
	     (sfd__h3344[31] || sfd__h3344[30] || sfd__h3344[29] ||
	      sfd__h3344[28] ||
	      sfd__h3344[27] ||
	      sfd__h3344[26] ||
	      sfd__h3344[25] ||
	      sfd__h3344[24] ||
	      sfd__h3344[23] ||
	      sfd__h3344[22] ||
	      sfd__h3344[21] ||
	      sfd__h3344[20] ||
	      sfd__h3344[19] ||
	      sfd__h3344[18] ||
	      sfd__h3344[17] ||
	      sfd__h3344[16] ||
	      sfd__h3344[15] ||
	      sfd__h3344[14] ||
	      sfd__h3344[13] ||
	      sfd__h3344[12] ||
	      sfd__h3344[11] ||
	      sfd__h3344[10] ||
	      sfd__h3344[9] ||
	      sfd__h3344[8] ||
	      sfd__h3344[7] ||
	      sfd__h3344[6] ||
	      sfd__h3344[5] ||
	      sfd__h3344[4] ||
	      sfd__h3344[3] ||
	      sfd__h3344[2] ||
	      sfd__h3344[1] ||
	      sfd__h3344[0]) &&
	     (!_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d269 ||
	      !_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d271 &&
	      !_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d274 &&
	      _theResult___fst_exp__h9327 == 8'd255 &&
	      _theResult___fst_sfd__h9328 == 23'd0) ;
  assign IF_requestR_3_BIT_159_20_THEN_NEG_requestR_3_B_ETC___d479 =
	     (sfd__h3344[31] || sfd__h3344[30] || sfd__h3344[29] ||
	      sfd__h3344[28] ||
	      sfd__h3344[27] ||
	      sfd__h3344[26] ||
	      sfd__h3344[25] ||
	      sfd__h3344[24] ||
	      sfd__h3344[23] ||
	      sfd__h3344[22] ||
	      sfd__h3344[21] ||
	      sfd__h3344[20] ||
	      sfd__h3344[19] ||
	      sfd__h3344[18] ||
	      sfd__h3344[17] ||
	      sfd__h3344[16] ||
	      sfd__h3344[15] ||
	      sfd__h3344[14] ||
	      sfd__h3344[13] ||
	      sfd__h3344[12] ||
	      sfd__h3344[11] ||
	      sfd__h3344[10] ||
	      sfd__h3344[9] ||
	      sfd__h3344[8] ||
	      sfd__h3344[7] ||
	      sfd__h3344[6] ||
	      sfd__h3344[5] ||
	      sfd__h3344[4] ||
	      sfd__h3344[3] ||
	      sfd__h3344[2] ||
	      sfd__h3344[1] ||
	      sfd__h3344[0]) &&
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d269 &&
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d271 ;
  assign IF_requestR_3_BIT_159_20_THEN_NEG_requestR_3_B_ETC___d488 =
	     (sfd__h3344[31] || sfd__h3344[30] || sfd__h3344[29] ||
	      sfd__h3344[28] ||
	      sfd__h3344[27] ||
	      sfd__h3344[26] ||
	      sfd__h3344[25] ||
	      sfd__h3344[24] ||
	      sfd__h3344[23] ||
	      sfd__h3344[22] ||
	      sfd__h3344[21] ||
	      sfd__h3344[20] ||
	      sfd__h3344[19] ||
	      sfd__h3344[18] ||
	      sfd__h3344[17] ||
	      sfd__h3344[16] ||
	      sfd__h3344[15] ||
	      sfd__h3344[14] ||
	      sfd__h3344[13] ||
	      sfd__h3344[12] ||
	      sfd__h3344[11] ||
	      sfd__h3344[10] ||
	      sfd__h3344[9] ||
	      sfd__h3344[8] ||
	      sfd__h3344[7] ||
	      sfd__h3344[6] ||
	      sfd__h3344[5] ||
	      sfd__h3344[4] ||
	      sfd__h3344[3] ||
	      sfd__h3344[2] ||
	      sfd__h3344[1] ||
	      sfd__h3344[0]) &&
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d269 &&
	     !_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d271 &&
	     IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159__ETC___d485 ;
  assign IF_requestR_3_BIT_159_20_THEN_NOT_requestR_3_B_ETC___d1031 =
	     requestR[159] ?
	       !requestR_3_BITS_158_TO_151_14_ULE_requestR_3_B_ETC___d1020 ||
	       requestR_3_BITS_158_TO_151_14_EQ_requestR_3_BI_ETC___d1022 &&
	       !requestR_3_BITS_150_TO_128_16_ULE_requestR_3_B_ETC___d1023 :
	       requestR_3_BITS_158_TO_151_14_ULT_requestR_3_B_ETC___d1027 ||
	       requestR_3_BITS_158_TO_151_14_EQ_requestR_3_BI_ETC___d1022 &&
	       requestR_3_BITS_150_TO_128_16_ULT_requestR_3_B_ETC___d1028 ;
  assign IF_sfd___3248_BIT_7_THEN_2_ELSE_0__q3 =
	     sfd___3__h8248[7] ? 2'd2 : 2'd0 ;
  assign IF_sfd___3248_BIT_8_THEN_2_ELSE_0__q2 =
	     sfd___3__h8248[8] ? 2'd2 : 2'd0 ;
  assign IF_sfd___34460_BIT_7_THEN_2_ELSE_0__q17 =
	     sfd___3__h14460[7] ? 2'd2 : 2'd0 ;
  assign IF_sfd___34460_BIT_8_THEN_2_ELSE_0__q16 =
	     sfd___3__h14460[8] ? 2'd2 : 2'd0 ;
  assign IF_x6918_BIT_24_THEN_2_ELSE_0__q28 = x__h16918[24] ? 2'd2 : 2'd0 ;
  assign IF_x8048_BIT_24_THEN_2_ELSE_0__q29 = x__h18048[24] ? 2'd2 : 2'd0 ;
  assign NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d828 =
	     -{ {12{requestR_BITS_158_TO_151_MINUS_127__q27[7]}},
		requestR_BITS_158_TO_151_MINUS_127__q27 } ;
  assign NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d860 =
	     NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d828 +
	     20'd32 ;
  assign NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d861 =
	     NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d860 -
	     20'd2 ;
  assign NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d863 =
	     (NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d861 ^
	      20'h80000) <=
	     20'd524320 ;
  assign NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d926 =
	     NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d860 -
	     20'd1 ;
  assign NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d928 =
	     (NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d926 ^
	      20'h80000) <=
	     20'd524320 ;
  assign NOT_IF_requestR_3_BIT_159_20_THEN_NEG_requestR_ETC___d273 =
	     !sfd__h3344[31] && !sfd__h3344[30] && !sfd__h3344[29] &&
	     !sfd__h3344[28] &&
	     !sfd__h3344[27] &&
	     !sfd__h3344[26] &&
	     !sfd__h3344[25] &&
	     !sfd__h3344[24] &&
	     !sfd__h3344[23] &&
	     !sfd__h3344[22] &&
	     !sfd__h3344[21] &&
	     !sfd__h3344[20] &&
	     !sfd__h3344[19] &&
	     !sfd__h3344[18] &&
	     !sfd__h3344[17] &&
	     !sfd__h3344[16] &&
	     !sfd__h3344[15] &&
	     !sfd__h3344[14] &&
	     !sfd__h3344[13] &&
	     !sfd__h3344[12] &&
	     !sfd__h3344[11] &&
	     !sfd__h3344[10] &&
	     !sfd__h3344[9] &&
	     !sfd__h3344[8] &&
	     !sfd__h3344[7] &&
	     !sfd__h3344[6] &&
	     !sfd__h3344[5] &&
	     !sfd__h3344[4] &&
	     !sfd__h3344[3] &&
	     !sfd__h3344[2] &&
	     !sfd__h3344[1] &&
	     !sfd__h3344[0] ||
	     !_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d269 ||
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d271 ;
  assign NOT_requestR_3_BITS_158_TO_151_14_EQ_0_24_30_O_ETC___d905 =
	     (requestR[158:151] != 8'd0 || requestR[150:128] != 23'd0) &&
	     ((NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d828 ==
	       20'd1048545) ?
		_theResult_____2__h16177[32:31] != 2'b11 :
		NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d861[19] ||
		NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d863 &&
		IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_OR_NO_ETC___d884 &&
		x__h16918[56:25] == 32'h7FFFFFFF) ;
  assign NOT_requestR_3_BITS_158_TO_151_14_EQ_0_24_30_O_ETC___d970 =
	     (requestR[158:151] != 8'd0 || requestR[150:128] != 23'd0) &&
	     !NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d926[19] &&
	     (!NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d928 ||
	      guard__h17827 != 2'd0) ;
  assign NOT_requestR_3_BITS_158_TO_151_14_EQ_255_15_08_ETC___d1035 =
	     (requestR[158:151] != 8'd255 || requestR[150:128] == 23'd0) &&
	     (requestR[94:87] != 8'd255 || requestR[86:64] == 23'd0) &&
	     (requestR[158:151] != 8'd0 || requestR[150:128] != 23'd0 ||
	      requestR[94:87] != 8'd0 ||
	      requestR[86:64] != 23'd0) &&
	     (requestR[159] && !requestR[95] ||
	      (requestR[159] || !requestR[95]) &&
	      IF_requestR_3_BIT_159_20_THEN_NOT_requestR_3_B_ETC___d1031) ;
  assign NOT_requestR_3_BITS_158_TO_151_14_EQ_255_15_08_ETC___d1121 =
	     (requestR[158:151] != 8'd255 || requestR[150:128] == 23'd0) &&
	     (requestR[94:87] != 8'd255 || requestR[86:64] == 23'd0) &&
	     (requestR[159] && !requestR[95] ||
	      (requestR[159] || !requestR[95]) &&
	      IF_requestR_3_BIT_159_20_THEN_NOT_requestR_3_B_ETC___d1031 ||
	      requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_requ_ETC___d1100) ;
  assign NOT_requestR_3_BITS_158_TO_151_14_ULT_requestR_ETC___d1096 =
	     !requestR_3_BITS_158_TO_151_14_ULT_requestR_3_B_ETC___d1027 &&
	     (!requestR_3_BITS_158_TO_151_14_EQ_requestR_3_BI_ETC___d1022 ||
	      !requestR_3_BITS_150_TO_128_16_ULT_requestR_3_B_ETC___d1028) &&
	     requestR_3_BITS_158_TO_151_14_ULE_requestR_3_B_ETC___d1020 &&
	     (!requestR_3_BITS_158_TO_151_14_EQ_requestR_3_BI_ETC___d1022 ||
	      requestR_3_BITS_150_TO_128_16_ULE_requestR_3_B_ETC___d1023) ;
  assign NOT_requestR_3_BIT_159_20_98_AND_NOT_requestR__ETC___d717 =
	     !requestR[159] && !requestR[158] && !requestR[157] &&
	     !requestR[156] &&
	     !requestR[155] &&
	     !requestR[154] &&
	     !requestR[153] &&
	     !requestR[152] &&
	     !requestR[151] &&
	     !requestR[150] &&
	     !requestR[149] &&
	     !requestR[148] &&
	     !requestR[147] &&
	     !requestR[146] &&
	     !requestR[145] &&
	     !requestR[144] &&
	     !requestR[143] &&
	     !requestR[142] &&
	     !requestR[141] &&
	     !requestR[140] &&
	     !requestR[139] &&
	     !requestR[138] &&
	     !requestR[137] &&
	     !requestR[136] &&
	     !requestR[135] &&
	     !requestR[134] &&
	     !requestR[133] &&
	     !requestR[132] &&
	     !requestR[131] &&
	     !requestR[130] &&
	     !requestR[129] &&
	     !requestR[128] ||
	     !_32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d628 ||
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d629 ;
  assign NOT_verbosity_ULE_1_4___d25 = verbosity > 4'd1 ;
  assign _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d268 =
	     (9'd32 -
	      { 3'd0,
		IF_IF_requestR_3_BIT_159_20_THEN_NEG_requestR__ETC___d265 }) -
	     9'd1 ;
  assign _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d269 =
	     (_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d268 ^
	      9'h100) <=
	     9'd383 ;
  assign _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d271 =
	     (_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d268 ^
	      9'h100) <
	     9'd107 ;
  assign _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d274 =
	     (_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d268 ^
	      9'h100) <
	     9'd130 ;
  assign _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d627 =
	     (9'd32 -
	      { 3'd0,
		IF_requestR_3_BIT_159_20_THEN_0_ELSE_IF_reques_ETC___d624 }) -
	     9'd1 ;
  assign _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d628 =
	     (_32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d627 ^
	      9'h100) <=
	     9'd383 ;
  assign _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d629 =
	     (_32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d627 ^
	      9'h100) <
	     9'd107 ;
  assign _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d630 =
	     (_32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d627 ^
	      9'h100) <
	     9'd130 ;
  assign _theResult_____2__h16177 =
	     IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_OR_NO_ETC___d852 ?
	       out1___1__h16669 :
	       IF_requestR_3_BIT_159_20_THEN_NEG_0b0_CONCAT_N_ETC___d835[56:24] ;
  assign _theResult___exp__h14883 =
	     (sfd__h14487[24] || sfd__h14487[24:23] == 2'b01) ? 8'd1 : 8'd0 ;
  assign _theResult___exp__h15435 =
	     sfd__h15026[24] ?
	       ((x__h15011[7:0] == 8'd254) ?
		  8'd255 :
		  din_inc___2_exp__h15573) :
	       ((x__h15011[7:0] == 8'd0 && sfd__h15026[24:23] == 2'b01) ?
		  8'd1 :
		  x__h15011[7:0]) ;
  assign _theResult___exp__h8674 =
	     (sfd__h8275[24] || sfd__h8275[24:23] == 2'b01) ? 8'd1 : 8'd0 ;
  assign _theResult___exp__h9227 =
	     sfd__h8818[24] ?
	       ((x__h8803[7:0] == 8'd254) ? 8'd255 : din_inc___2_exp__h9370) :
	       ((x__h8803[7:0] == 8'd0 && sfd__h8818[24:23] == 2'b01) ?
		  8'd1 :
		  x__h8803[7:0]) ;
  assign _theResult___fst_exp__h14979 =
	     (requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
	      requestR[194:192] != 3'h3 &&
	      requestR[194:192] != 3'h4) ?
	       CASE_guard4470_0b0_0_0b1_0_0b10_out_exp4886_0b_ETC__q18 :
	       CASE_requestR_BITS_194_TO_192_0x3_IF_guard4470_ETC__q20 ;
  assign _theResult___fst_exp__h15531 =
	     (requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
	      requestR[194:192] != 3'h3 &&
	      requestR[194:192] != 3'h4) ?
	       CASE_guard4996_0b0_x5011_BITS_7_TO_0_0b1_x5011_ETC__q22 :
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d708 ;
  assign _theResult___fst_exp__h15534 =
	     (x__h15011[7:0] == 8'd255) ?
	       x__h15011[7:0] :
	       _theResult___fst_exp__h15531 ;
  assign _theResult___fst_exp__h8771 =
	     (requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
	      requestR[194:192] != 3'h3 &&
	      requestR[194:192] != 3'h4) ?
	       CASE_guard258_0b0_0_0b1_0_0b10_out_exp677_0b11_ETC__q5 :
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d360 ;
  assign _theResult___fst_exp__h9324 =
	     (requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
	      requestR[194:192] != 3'h3 &&
	      requestR[194:192] != 3'h4) ?
	       CASE_guard788_0b0_x803_BITS_7_TO_0_0b1_x803_BI_ETC__q11 :
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d389 ;
  assign _theResult___fst_exp__h9327 =
	     (x__h8803[7:0] == 8'd255) ?
	       x__h8803[7:0] :
	       _theResult___fst_exp__h9324 ;
  assign _theResult___fst_sfd__h14980 =
	     (requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
	      requestR[194:192] != 3'h3 &&
	      requestR[194:192] != 3'h4) ?
	       CASE_guard4470_0b0_sfd___34460_BITS_31_TO_9_0b_ETC__q26 :
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d731 ;
  assign _theResult___fst_sfd__h15532 =
	     (requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
	      requestR[194:192] != 3'h3 &&
	      requestR[194:192] != 3'h4) ?
	       CASE_guard4996_0b0_sfd___34460_BITS_30_TO_8_0b_ETC__q24 :
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d746 ;
  assign _theResult___fst_sfd__h15535 =
	     (x__h15011[7:0] == 8'd255) ?
	       sfd___3__h14460[30:8] :
	       _theResult___fst_sfd__h15532 ;
  assign _theResult___fst_sfd__h8772 =
	     (requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
	      requestR[194:192] != 3'h3 &&
	      requestR[194:192] != 3'h4) ?
	       CASE_guard258_0b0_sfd___3248_BITS_31_TO_9_0b1__ETC__q13 :
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d412 ;
  assign _theResult___fst_sfd__h9325 =
	     (requestR[194:192] != 3'h1 && requestR[194:192] != 3'h2 &&
	      requestR[194:192] != 3'h3 &&
	      requestR[194:192] != 3'h4) ?
	       CASE_guard788_0b0_sfd___3248_BITS_30_TO_8_0b1__ETC__q15 :
	       IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d430 ;
  assign _theResult___fst_sfd__h9328 =
	     (x__h8803[7:0] == 8'd255) ?
	       sfd___3__h8248[30:8] :
	       _theResult___fst_sfd__h9325 ;
  assign _theResult___sfd__h14884 =
	     sfd__h14487[24] ? sfd__h14487[23:1] : sfd__h14487[22:0] ;
  assign _theResult___sfd__h15436 =
	     sfd__h15026[24] ?
	       ((x__h15011[7:0] == 8'd254) ? 23'd0 : sfd__h15026[23:1]) :
	       sfd__h15026[22:0] ;
  assign _theResult___sfd__h8675 =
	     sfd__h8275[24] ? sfd__h8275[23:1] : sfd__h8275[22:0] ;
  assign _theResult___sfd__h9228 =
	     sfd__h8818[24] ?
	       ((x__h8803[7:0] == 8'd254) ? 23'd0 : sfd__h8818[23:1]) :
	       sfd__h8818[22:0] ;
  assign _theResult___snd_fst_exp__h15537 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d630 ?
	       _theResult___fst_exp__h14979 :
	       _theResult___fst_exp__h15534 ;
  assign _theResult___snd_fst_exp__h15540 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d629 ?
	       8'd0 :
	       _theResult___snd_fst_exp__h15537 ;
  assign _theResult___snd_fst_exp__h15543 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d628 ?
	       _theResult___snd_fst_exp__h15540 :
	       8'd255 ;
  assign _theResult___snd_fst_exp__h9330 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d274 ?
	       _theResult___fst_exp__h8771 :
	       _theResult___fst_exp__h9327 ;
  assign _theResult___snd_fst_exp__h9333 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d271 ?
	       8'd0 :
	       _theResult___snd_fst_exp__h9330 ;
  assign _theResult___snd_fst_exp__h9336 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d269 ?
	       _theResult___snd_fst_exp__h9333 :
	       8'd255 ;
  assign _theResult___snd_fst_sfd__h15538 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d630 ?
	       _theResult___fst_sfd__h14980 :
	       _theResult___fst_sfd__h15535 ;
  assign _theResult___snd_fst_sfd__h9331 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d274 ?
	       _theResult___fst_sfd__h8772 :
	       _theResult___fst_sfd__h9328 ;
  assign b__h16242 = { value__h16244, 32'd0 } ;
  assign din_inc___2_exp__h15573 = x__h15011[7:0] + 8'd1 ;
  assign din_inc___2_exp__h9370 = x__h8803[7:0] + 8'd1 ;
  assign guard__h14470 =
	     { IF_sfd___34460_BIT_8_THEN_2_ELSE_0__q16[1],
	       { sfd___3__h14460[7:0], 23'd0 } != 31'd0 } ;
  assign guard__h14996 =
	     { IF_sfd___34460_BIT_7_THEN_2_ELSE_0__q17[1],
	       { sfd___3__h14460[6:0], 24'd0 } != 31'd0 } ;
  assign guard__h16175 =
	     { IF_requestR_3_BIT_159_20_THEN_NEG_0b0_CONCAT_N_ETC___d835[23],
	       { IF_requestR_3_BIT_159_20_THEN_NEG_0b0_CONCAT_N_ETC___d835[22:0],
		 33'd0 } !=
	       56'd0 } ;
  assign guard__h16729 =
	     { IF_x6918_BIT_24_THEN_2_ELSE_0__q28[1],
	       { x__h16918[23:0], 32'd0 } != 56'd0 } ;
  assign guard__h17827 =
	     { IF_x8048_BIT_24_THEN_2_ELSE_0__q29[1],
	       { x__h18048[23:0], 32'd0 } != 56'd0 } ;
  assign guard__h8258 =
	     { IF_sfd___3248_BIT_8_THEN_2_ELSE_0__q2[1],
	       { sfd___3__h8248[7:0], 23'd0 } != 31'd0 } ;
  assign guard__h8788 =
	     { IF_sfd___3248_BIT_7_THEN_2_ELSE_0__q3[1],
	       { sfd___3__h8248[6:0], 24'd0 } != 31'd0 } ;
  assign out1___1__h16669 =
	     IF_requestR_3_BIT_159_20_THEN_NEG_0b0_CONCAT_N_ETC___d835[56:24] +
	     33'd1 ;
  assign out_exp__h14886 =
	     sfd___3__h14460[9] ? _theResult___exp__h14883 : 8'd0 ;
  assign out_exp__h15438 =
	     sfd___3__h14460[8] ? _theResult___exp__h15435 : x__h15011[7:0] ;
  assign out_exp__h8677 = sfd___3__h8248[9] ? _theResult___exp__h8674 : 8'd0 ;
  assign out_exp__h9230 =
	     sfd___3__h8248[8] ? _theResult___exp__h9227 : x__h8803[7:0] ;
  assign out_sfd__h14887 =
	     sfd___3__h14460[9] ?
	       _theResult___sfd__h14884 :
	       sfd___3__h14460[31:9] ;
  assign out_sfd__h15439 =
	     sfd___3__h14460[8] ?
	       _theResult___sfd__h15436 :
	       sfd___3__h14460[30:8] ;
  assign out_sfd__h8678 =
	     sfd___3__h8248[9] ?
	       _theResult___sfd__h8675 :
	       sfd___3__h8248[31:9] ;
  assign out_sfd__h9231 =
	     sfd___3__h8248[8] ?
	       _theResult___sfd__h9228 :
	       sfd___3__h8248[30:8] ;
  assign requestR_3_BITS_150_TO_128_16_ULE_requestR_3_B_ETC___d1023 =
	     requestR[150:128] <= requestR[86:64] ;
  assign requestR_3_BITS_150_TO_128_16_ULT_requestR_3_B_ETC___d1028 =
	     requestR[150:128] < requestR[86:64] ;
  assign requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_requ_ETC___d1007 =
	     requestR[158:151] == 8'd0 && requestR[150:128] == 23'd0 &&
	     requestR[159] &&
	     requestR[94:87] == 8'd0 &&
	     requestR[86:64] == 23'd0 &&
	     !requestR[95] ;
  assign requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_requ_ETC___d1100 =
	     requestR[158:151] == 8'd0 && requestR[150:128] == 23'd0 &&
	     requestR[94:87] == 8'd0 &&
	     requestR[86:64] == 23'd0 ||
	     (!requestR[159] || requestR[95]) &&
	     (requestR[159] || !requestR[95]) &&
	     (requestR[159] ?
		requestR_3_BITS_158_TO_151_14_ULE_requestR_3_B_ETC___d1095 :
		NOT_requestR_3_BITS_158_TO_151_14_ULT_requestR_ETC___d1096) ;
  assign requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_0__ETC___d965 =
	     requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0 ||
	     requestR[158:151] == 8'd255 && requestR[150:128] == 23'd0 ||
	     (requestR[158:151] != 8'd0 || requestR[150:128] != 23'd0) &&
	     (NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d926[19] ||
	      NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d928 &&
	      IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_OR_NO_ETC___d947 &&
	      x__h18048[56:25] == 32'hFFFFFFFF) ;
  assign requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_0__ETC___d976 =
	     { requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_0__ETC___d965,
	       3'd0,
	       (requestR[158:151] != 8'd255 || requestR[150:128] == 23'd0) &&
	       (requestR[158:151] != 8'd255 || requestR[150:128] != 23'd0) &&
	       NOT_requestR_3_BITS_158_TO_151_14_EQ_0_24_30_O_ETC___d970 } ==
	     5'd0 ||
	     requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_0__ETC___d965 ;
  assign requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d1045 =
	     requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0 &&
	     !requestR[150] ||
	     requestR[94:87] == 8'd255 && requestR[86:64] != 23'd0 &&
	     !requestR[86] ;
  assign requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d1085 =
	     requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d1045 ||
	     requestR[158:151] == 8'd255 && requestR[150] ||
	     requestR[94:87] == 8'd255 && requestR[86] ;
  assign requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d996 =
	     requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0 &&
	     !requestR[150] &&
	     requestR[94:87] == 8'd255 &&
	     requestR[86:64] != 23'd0 &&
	     !requestR[86] ;
  assign requestR_3_BITS_158_TO_151_14_EQ_requestR_3_BI_ETC___d1022 =
	     requestR[158:151] == requestR[94:87] ;
  assign requestR_3_BITS_158_TO_151_14_ULE_requestR_3_B_ETC___d1020 =
	     requestR[158:151] <= requestR[94:87] ;
  assign requestR_3_BITS_158_TO_151_14_ULE_requestR_3_B_ETC___d1095 =
	     requestR_3_BITS_158_TO_151_14_ULE_requestR_3_B_ETC___d1020 &&
	     (!requestR_3_BITS_158_TO_151_14_EQ_requestR_3_BI_ETC___d1022 ||
	      requestR_3_BITS_150_TO_128_16_ULE_requestR_3_B_ETC___d1023) &&
	     !requestR_3_BITS_158_TO_151_14_ULT_requestR_3_B_ETC___d1027 &&
	     (!requestR_3_BITS_158_TO_151_14_EQ_requestR_3_BI_ETC___d1022 ||
	      !requestR_3_BITS_150_TO_128_16_ULT_requestR_3_B_ETC___d1028) ;
  assign requestR_3_BITS_158_TO_151_14_ULT_requestR_3_B_ETC___d1027 =
	     requestR[158:151] < requestR[94:87] ;
  assign requestR_3_BITS_94_TO_87_87_EQ_0_004_AND_reque_ETC___d1011 =
	     requestR[94:87] == 8'd0 && requestR[86:64] == 23'd0 &&
	     requestR[95] &&
	     requestR[158:151] == 8'd0 &&
	     requestR[150:128] == 23'd0 &&
	     !requestR[159] ;
  assign requestR_3_BIT_159_20_OR_requestR_3_BIT_158_99_ETC___d791 =
	     (requestR[159] || requestR[158] || requestR[157] ||
	      requestR[156] ||
	      requestR[155] ||
	      requestR[154] ||
	      requestR[153] ||
	      requestR[152] ||
	      requestR[151] ||
	      requestR[150] ||
	      requestR[149] ||
	      requestR[148] ||
	      requestR[147] ||
	      requestR[146] ||
	      requestR[145] ||
	      requestR[144] ||
	      requestR[143] ||
	      requestR[142] ||
	      requestR[141] ||
	      requestR[140] ||
	      requestR[139] ||
	      requestR[138] ||
	      requestR[137] ||
	      requestR[136] ||
	      requestR[135] ||
	      requestR[134] ||
	      requestR[133] ||
	      requestR[132] ||
	      requestR[131] ||
	      requestR[130] ||
	      requestR[129] ||
	      requestR[128]) &&
	     (!_32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d628 ||
	      !_32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d629 &&
	      !_32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d630 &&
	      _theResult___fst_exp__h15534 == 8'd255 &&
	      _theResult___fst_sfd__h15535 == 23'd0) ;
  assign requestR_3_BIT_159_20_OR_requestR_3_BIT_158_99_ETC___d794 =
	     (requestR[159] || requestR[158] || requestR[157] ||
	      requestR[156] ||
	      requestR[155] ||
	      requestR[154] ||
	      requestR[153] ||
	      requestR[152] ||
	      requestR[151] ||
	      requestR[150] ||
	      requestR[149] ||
	      requestR[148] ||
	      requestR[147] ||
	      requestR[146] ||
	      requestR[145] ||
	      requestR[144] ||
	      requestR[143] ||
	      requestR[142] ||
	      requestR[141] ||
	      requestR[140] ||
	      requestR[139] ||
	      requestR[138] ||
	      requestR[137] ||
	      requestR[136] ||
	      requestR[135] ||
	      requestR[134] ||
	      requestR[133] ||
	      requestR[132] ||
	      requestR[131] ||
	      requestR[130] ||
	      requestR[129] ||
	      requestR[128]) &&
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d628 &&
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d629 ;
  assign requestR_3_BIT_159_20_OR_requestR_3_BIT_158_99_ETC___d803 =
	     (requestR[159] || requestR[158] || requestR[157] ||
	      requestR[156] ||
	      requestR[155] ||
	      requestR[154] ||
	      requestR[153] ||
	      requestR[152] ||
	      requestR[151] ||
	      requestR[150] ||
	      requestR[149] ||
	      requestR[148] ||
	      requestR[147] ||
	      requestR[146] ||
	      requestR[145] ||
	      requestR[144] ||
	      requestR[143] ||
	      requestR[142] ||
	      requestR[141] ||
	      requestR[140] ||
	      requestR[139] ||
	      requestR[138] ||
	      requestR[137] ||
	      requestR[136] ||
	      requestR[135] ||
	      requestR[134] ||
	      requestR[133] ||
	      requestR[132] ||
	      requestR[131] ||
	      requestR[130] ||
	      requestR[129] ||
	      requestR[128]) &&
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d628 &&
	     !_32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d629 &&
	     IF_32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20__ETC___d800 ;
  assign requestR_BITS_158_TO_151_MINUS_127__q27 =
	     requestR[158:151] - 8'd127 ;
  assign requestR_BITS_159_TO_128__q1 = requestR[159:128] ;
  assign res___1__h27694 =
	     (requestR[158:151] == 8'd255 && requestR[150]) ?
	       64'd512 :
	       64'd256 ;
  assign res___1__h27929 = requestR[159] ? 64'd1 : 64'd128 ;
  assign res___1__h27939 = requestR[159] ? 64'd8 : 64'd16 ;
  assign res___1__h27958 = requestR[159] ? 64'd4 : 64'd32 ;
  assign res__h19084 = { 32'hFFFFFFFF, requestR[95:64] } ;
  assign res__h19320 = { 32'hFFFFFFFF, requestR[159:128] } ;
  assign res__h24810 =
	     ((requestR[158:151] != 8'd255 || requestR[150:128] == 23'd0) &&
	      (requestR[94:87] != 8'd255 || requestR[86:64] == 23'd0) &&
	      requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_requ_ETC___d1100) ?
	       64'd1 :
	       64'd0 ;
  assign res__h26322 =
	     NOT_requestR_3_BITS_158_TO_151_14_EQ_255_15_08_ETC___d1035 ?
	       64'd1 :
	       64'd0 ;
  assign res__h27422 =
	     NOT_requestR_3_BITS_158_TO_151_14_EQ_255_15_08_ETC___d1121 ?
	       64'd1 :
	       64'd0 ;
  assign res__h27974 = requestR[159] ? 64'd2 : 64'd64 ;
  assign res__h28173 = { 32'hFFFFFFFF, fpu$server_core_response_get[36:5] } ;
  assign sfd___3__h14460 =
	     requestR[159:128] <<
	     IF_requestR_3_BIT_159_20_THEN_0_ELSE_IF_reques_ETC___d624 ;
  assign sfd___3__h8248 =
	     sfd__h3344 <<
	     IF_IF_requestR_3_BIT_159_20_THEN_NEG_requestR__ETC___d265 ;
  assign sfd__h14487 = { 2'd0, sfd___3__h14460[31:9] } + 25'd1 ;
  assign sfd__h15026 =
	     { 1'b0, x__h15011[7:0] != 8'd0, sfd___3__h14460[30:8] } + 25'd1 ;
  assign sfd__h3344 = requestR[159] ? -requestR[159:128] : requestR[159:128] ;
  assign sfd__h8275 = { 2'd0, sfd___3__h8248[31:9] } + 25'd1 ;
  assign sfd__h8818 =
	     { 1'b0, x__h8803[7:0] != 8'd0, sfd___3__h8248[30:8] } + 25'd1 ;
  assign value__h16244 =
	     { 1'b0, requestR[158:151] != 8'd0, requestR[150:128] } ;
  assign x__h15011 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_159_20_THE_ETC___d627 +
	     9'd127 ;
  assign x__h15677 =
	     { 2'd0,
	       requestR[159:128] != 32'd0 &&
	       requestR_3_BIT_159_20_OR_requestR_3_BIT_158_99_ETC___d791,
	       requestR[159:128] != 32'd0 &&
	       requestR_3_BIT_159_20_OR_requestR_3_BIT_158_99_ETC___d794,
	       requestR[159:128] != 32'd0 &&
	       requestR_3_BIT_159_20_OR_requestR_3_BIT_158_99_ETC___d803 } ;
  assign x__h15996 = { {32{x__h15999[31]}}, x__h15999 } ;
  assign x__h15999 =
	     (requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0 ||
	      !requestR[159] && requestR[158:151] == 8'd255 &&
	      requestR[150:128] == 23'd0) ?
	       32'h7FFFFFFF :
	       IF_requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_ETC___d894 ;
  assign x__h16918 =
	     IF_requestR_3_BIT_159_20_THEN_NEG_0b0_CONCAT_N_ETC___d835 >>
	     NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d861 |
	     ~(57'h1FFFFFFFFFFFFFF >>
	       NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d861) &
	     {57{IF_requestR_3_BIT_159_20_THEN_NEG_0b0_CONCAT_N_ETC___d835[56]}} ;
  assign x__h17332 =
	     { requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0 ||
	       requestR[158:151] == 8'd255 && requestR[150:128] == 23'd0 ||
	       NOT_requestR_3_BITS_158_TO_151_14_EQ_0_24_30_O_ETC___d905,
	       3'd0,
	       (requestR[158:151] != 8'd255 || requestR[150:128] == 23'd0) &&
	       (requestR[158:151] != 8'd255 || requestR[150:128] != 23'd0) &&
	       (requestR[158:151] != 8'd0 || requestR[150:128] != 23'd0) &&
	       IF_NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINU_ETC___d916 } ;
  assign x__h17624 = { {32{x__h17627[31]}}, x__h17627 } ;
  assign x__h17627 =
	     (requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0 ||
	      !requestR[159] && requestR[158:151] == 8'd255 &&
	      requestR[150:128] == 23'd0) ?
	       32'hFFFFFFFF :
	       (requestR[159] ?
		  32'd0 :
		  ((requestR[158:151] == 8'd255 &&
		    requestR[150:128] == 23'd0) ?
		     32'hFFFFFFFF :
		     IF_requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_r_ETC___d955)) ;
  assign x__h18048 =
	     { requestR[158:151] != 8'd0, requestR[150:128], 33'd0 } >>
	     NEG_SEXT_requestR_3_BITS_158_TO_151_14_MINUS_1_ETC___d926 ;
  assign x__h18126 =
	     { requestR[159] ?
		 requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_0__ETC___d976 :
		 requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_0__ETC___d965,
	       3'd0,
	       (requestR[158:151] != 8'd255 || requestR[150:128] == 23'd0) &&
	       (requestR[158:151] != 8'd255 || requestR[150:128] != 23'd0) &&
	       NOT_requestR_3_BITS_158_TO_151_14_EQ_0_24_30_O_ETC___d970 } ;
  assign x__h18408 =
	     requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d996 ?
	       64'hFFFFFFFF7FC00000 :
	       ((requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0 &&
		 !requestR[150]) ?
		  res__h19084 :
		  IF_requestR_3_BITS_94_TO_87_87_EQ_255_88_AND_N_ETC___d1042) ;
  assign x__h20440 =
	     { requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d1045,
	       4'd0 } ;
  assign x__h21067 =
	     requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d996 ?
	       64'hFFFFFFFF7FC00000 :
	       ((requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0 &&
		 !requestR[150]) ?
		  res__h19084 :
		  IF_requestR_3_BITS_94_TO_87_87_EQ_255_88_AND_N_ETC___d1059) ;
  assign x__h23772 =
	     { {32{requestR_BITS_159_TO_128__q1[31]}},
	       requestR_BITS_159_TO_128__q1 } ;
  assign x__h23944 =
	     requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d1085 ?
	       64'd0 :
	       res__h24810 ;
  assign x__h25456 =
	     requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d1085 ?
	       64'd0 :
	       res__h26322 ;
  assign x__h26341 =
	     { requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0 ||
	       requestR[94:87] == 8'd255 && requestR[86:64] != 23'd0,
	       4'd0 } ;
  assign x__h26556 =
	     requestR_3_BITS_158_TO_151_14_EQ_255_15_AND_NO_ETC___d1085 ?
	       64'd0 :
	       res__h27422 ;
  assign x__h27674 =
	     (requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0) ?
	       res___1__h27694 :
	       ((requestR[158:151] == 8'd255 && requestR[150:128] == 23'd0) ?
		  res___1__h27929 :
		  IF_requestR_3_BITS_158_TO_151_14_EQ_0_24_AND_r_ETC___d1135) ;
  assign x__h2780 = { 32'hFFFFFFFF, x__h2787 } ;
  assign x__h2787 = { requestR[95], requestR[158:128] } ;
  assign x__h28097 =
	     fpu$server_core_response_get[69] ?
	       ((fpu$server_core_response_get[35:28] == 8'd255 &&
		 fpu$server_core_response_get[27:5] != 23'd0) ?
		  64'hFFFFFFFF7FC00000 :
		  res__h28173) :
	       ((fpu$server_core_response_get[67:57] == 11'd2047 &&
		 fpu$server_core_response_get[56:5] != 52'd0) ?
		  64'h7FF8000000000000 :
		  fpu$server_core_response_get[68:5]) ;
  assign x__h2951 = { 32'hFFFFFFFF, x__h2958 } ;
  assign x__h2958 = { !requestR[95], requestR[158:128] } ;
  assign x__h3119 = { 32'hFFFFFFFF, x__h3126 } ;
  assign x__h3126 = { requestR[159] != requestR[95], requestR[158:128] } ;
  assign x__h3323 = { 32'hFFFFFFFF, x__h3329 } ;
  assign x__h3329 =
	     { requestR[159:128] != 32'd0 &&
	       (NOT_IF_requestR_3_BIT_159_20_THEN_NEG_requestR_ETC___d273 ?
		  requestR[159] :
		  IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159__ETC___d335),
	       IF_requestR_3_BITS_159_TO_128_34_EQ_0_35_OR_NO_ETC___d395,
	       (requestR[159:128] == 32'd0 ||
		NOT_IF_requestR_3_BIT_159_20_THEN_NEG_requestR_ETC___d273) ?
		 23'd0 :
		 _theResult___snd_fst_sfd__h9331 } ;
  assign x__h8803 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_159_20__ETC___d268 +
	     9'd127 ;
  assign x__h9496 =
	     { 2'd0,
	       requestR[159:128] != 32'd0 &&
	       IF_requestR_3_BIT_159_20_THEN_NEG_requestR_3_B_ETC___d476,
	       requestR[159:128] != 32'd0 &&
	       IF_requestR_3_BIT_159_20_THEN_NEG_requestR_3_B_ETC___d479,
	       requestR[159:128] != 32'd0 &&
	       IF_requestR_3_BIT_159_20_THEN_NEG_requestR_3_B_ETC___d488 } ;
  assign x__h9819 =
	     { 33'h1FFFFFFFE,
	       (requestR[159:128] == 32'd0) ?
		 8'd0 :
		 _theResult___snd_fst_exp__h15543,
	       (requestR[159:128] == 32'd0 ||
		NOT_requestR_3_BIT_159_20_98_AND_NOT_requestR__ETC___d717) ?
		 23'd0 :
		 _theResult___snd_fst_sfd__h15538 } ;
  always@(requestR)
  begin
    case (requestR[194:192])
      3'h0:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42 =
	      requestR[194:192];
      3'h1: IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42 = 3'd4;
      3'h2: IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42 = 3'd3;
      3'h3: IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42 = 3'd2;
      3'h4: IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42 = 3'd1;
      default: IF_requestR_3_BITS_194_TO_192_2_EQ_0x0_3_THEN__ETC___d42 =
		   3'd0;
    endcase
  end
  always@(guard__h8258 or _theResult___exp__h8674)
  begin
    case (guard__h8258)
      2'b0: CASE_guard258_0b0_0_0b1_theResult___exp674_0b1_ETC__q4 = 8'd0;
      2'b01, 2'b10, 2'b11:
	  CASE_guard258_0b0_0_0b1_theResult___exp674_0b1_ETC__q4 =
	      _theResult___exp__h8674;
    endcase
  end
  always@(requestR or
	  IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d357 or
	  guard__h8258 or
	  _theResult___exp__h8674 or
	  CASE_guard258_0b0_0_0b1_theResult___exp674_0b1_ETC__q4)
  begin
    case (requestR[194:192])
      3'h2:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d360 =
	      IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d357;
      3'h3:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d360 =
	      (guard__h8258 == 2'b0 || requestR[159]) ?
		8'd0 :
		_theResult___exp__h8674;
      3'h4:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d360 =
	      CASE_guard258_0b0_0_0b1_theResult___exp674_0b1_ETC__q4;
      default: IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d360 =
		   8'd0;
    endcase
  end
  always@(guard__h8258 or out_exp__h8677 or _theResult___exp__h8674)
  begin
    case (guard__h8258)
      2'b0, 2'b01:
	  CASE_guard258_0b0_0_0b1_0_0b10_out_exp677_0b11_ETC__q5 = 8'd0;
      2'b10:
	  CASE_guard258_0b0_0_0b1_0_0b10_out_exp677_0b11_ETC__q5 =
	      out_exp__h8677;
      2'b11:
	  CASE_guard258_0b0_0_0b1_0_0b10_out_exp677_0b11_ETC__q5 =
	      _theResult___exp__h8674;
    endcase
  end
  always@(guard__h8258 or requestR)
  begin
    case (guard__h8258)
      2'b0, 2'b01, 2'b10:
	  CASE_guard258_0b0_requestR_BIT_159_0b1_request_ETC__q6 =
	      requestR[159];
      2'd3:
	  CASE_guard258_0b0_requestR_BIT_159_0b1_request_ETC__q6 =
	      guard__h8258 == 2'b11 && requestR[159];
    endcase
  end
  always@(requestR or guard__h8258)
  begin
    case (requestR[194:192])
      3'h2, 3'h3:
	  CASE_requestR_BITS_194_TO_192_0x2_requestR_BIT_ETC__q7 =
	      requestR[159];
      3'h4:
	  CASE_requestR_BITS_194_TO_192_0x2_requestR_BIT_ETC__q7 =
	      (guard__h8258 == 2'b0) ?
		requestR[159] :
		(guard__h8258 == 2'b01 || guard__h8258 == 2'b10 ||
		 guard__h8258 == 2'b11) &&
		requestR[159];
      default: CASE_requestR_BITS_194_TO_192_0x2_requestR_BIT_ETC__q7 =
		   requestR[194:192] == 3'h1 && requestR[159];
    endcase
  end
  always@(guard__h8788 or requestR)
  begin
    case (guard__h8788)
      2'b0, 2'b01, 2'b10:
	  CASE_guard788_0b0_requestR_BIT_159_0b1_request_ETC__q8 =
	      requestR[159];
      2'd3:
	  CASE_guard788_0b0_requestR_BIT_159_0b1_request_ETC__q8 =
	      guard__h8788 == 2'b11 && requestR[159];
    endcase
  end
  always@(requestR or guard__h8788)
  begin
    case (requestR[194:192])
      3'h2, 3'h3:
	  CASE_requestR_BITS_194_TO_192_0x2_requestR_BIT_ETC__q9 =
	      requestR[159];
      3'h4:
	  CASE_requestR_BITS_194_TO_192_0x2_requestR_BIT_ETC__q9 =
	      (guard__h8788 == 2'b0) ?
		requestR[159] :
		(guard__h8788 == 2'b01 || guard__h8788 == 2'b10 ||
		 guard__h8788 == 2'b11) &&
		requestR[159];
      default: CASE_requestR_BITS_194_TO_192_0x2_requestR_BIT_ETC__q9 =
		   requestR[194:192] == 3'h1 && requestR[159];
    endcase
  end
  always@(guard__h8788 or x__h8803 or _theResult___exp__h9227)
  begin
    case (guard__h8788)
      2'b0:
	  CASE_guard788_0b0_x803_BITS_7_TO_0_0b1_theResu_ETC__q10 =
	      x__h8803[7:0];
      2'b01, 2'b10, 2'b11:
	  CASE_guard788_0b0_x803_BITS_7_TO_0_0b1_theResu_ETC__q10 =
	      _theResult___exp__h9227;
    endcase
  end
  always@(requestR or
	  x__h8803 or
	  IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d385 or
	  IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d383 or
	  CASE_guard788_0b0_x803_BITS_7_TO_0_0b1_theResu_ETC__q10)
  begin
    case (requestR[194:192])
      3'h1:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d389 =
	      x__h8803[7:0];
      3'h2:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d389 =
	      IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d385;
      3'h3:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d389 =
	      IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d383;
      3'h4:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d389 =
	      CASE_guard788_0b0_x803_BITS_7_TO_0_0b1_theResu_ETC__q10;
      default: IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d389 =
		   8'd0;
    endcase
  end
  always@(guard__h8788 or
	  x__h8803 or out_exp__h9230 or _theResult___exp__h9227)
  begin
    case (guard__h8788)
      2'b0, 2'b01:
	  CASE_guard788_0b0_x803_BITS_7_TO_0_0b1_x803_BI_ETC__q11 =
	      x__h8803[7:0];
      2'b10:
	  CASE_guard788_0b0_x803_BITS_7_TO_0_0b1_x803_BI_ETC__q11 =
	      out_exp__h9230;
      2'b11:
	  CASE_guard788_0b0_x803_BITS_7_TO_0_0b1_x803_BI_ETC__q11 =
	      _theResult___exp__h9227;
    endcase
  end
  always@(guard__h8258 or sfd___3__h8248 or _theResult___sfd__h8675)
  begin
    case (guard__h8258)
      2'b0:
	  CASE_guard258_0b0_sfd___3248_BITS_31_TO_9_0b1__ETC__q12 =
	      sfd___3__h8248[31:9];
      2'b01, 2'b10, 2'b11:
	  CASE_guard258_0b0_sfd___3248_BITS_31_TO_9_0b1__ETC__q12 =
	      _theResult___sfd__h8675;
    endcase
  end
  always@(requestR or
	  sfd___3__h8248 or
	  IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d408 or
	  IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d406 or
	  CASE_guard258_0b0_sfd___3248_BITS_31_TO_9_0b1__ETC__q12)
  begin
    case (requestR[194:192])
      3'h1:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d412 =
	      sfd___3__h8248[31:9];
      3'h2:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d412 =
	      IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d408;
      3'h3:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d412 =
	      IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d406;
      3'h4:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d412 =
	      CASE_guard258_0b0_sfd___3248_BITS_31_TO_9_0b1__ETC__q12;
      default: IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d412 =
		   23'd0;
    endcase
  end
  always@(guard__h8258 or
	  sfd___3__h8248 or out_sfd__h8678 or _theResult___sfd__h8675)
  begin
    case (guard__h8258)
      2'b0, 2'b01:
	  CASE_guard258_0b0_sfd___3248_BITS_31_TO_9_0b1__ETC__q13 =
	      sfd___3__h8248[31:9];
      2'b10:
	  CASE_guard258_0b0_sfd___3248_BITS_31_TO_9_0b1__ETC__q13 =
	      out_sfd__h8678;
      2'b11:
	  CASE_guard258_0b0_sfd___3248_BITS_31_TO_9_0b1__ETC__q13 =
	      _theResult___sfd__h8675;
    endcase
  end
  always@(guard__h8788 or sfd___3__h8248 or _theResult___sfd__h9228)
  begin
    case (guard__h8788)
      2'b0:
	  CASE_guard788_0b0_sfd___3248_BITS_30_TO_8_0b1__ETC__q14 =
	      sfd___3__h8248[30:8];
      2'b01, 2'b10, 2'b11:
	  CASE_guard788_0b0_sfd___3248_BITS_30_TO_8_0b1__ETC__q14 =
	      _theResult___sfd__h9228;
    endcase
  end
  always@(requestR or
	  sfd___3__h8248 or
	  IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d426 or
	  IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d424 or
	  CASE_guard788_0b0_sfd___3248_BITS_30_TO_8_0b1__ETC__q14)
  begin
    case (requestR[194:192])
      3'h1:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d430 =
	      sfd___3__h8248[30:8];
      3'h2:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d430 =
	      IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d426;
      3'h3:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d430 =
	      IF_IF_IF_requestR_3_BIT_159_20_THEN_NEG_reques_ETC___d424;
      3'h4:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d430 =
	      CASE_guard788_0b0_sfd___3248_BITS_30_TO_8_0b1__ETC__q14;
      default: IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d430 =
		   23'd0;
    endcase
  end
  always@(guard__h8788 or
	  sfd___3__h8248 or out_sfd__h9231 or _theResult___sfd__h9228)
  begin
    case (guard__h8788)
      2'b0, 2'b01:
	  CASE_guard788_0b0_sfd___3248_BITS_30_TO_8_0b1__ETC__q15 =
	      sfd___3__h8248[30:8];
      2'b10:
	  CASE_guard788_0b0_sfd___3248_BITS_30_TO_8_0b1__ETC__q15 =
	      out_sfd__h9231;
      2'b11:
	  CASE_guard788_0b0_sfd___3248_BITS_30_TO_8_0b1__ETC__q15 =
	      _theResult___sfd__h9228;
    endcase
  end
  always@(guard__h14470 or out_exp__h14886 or _theResult___exp__h14883)
  begin
    case (guard__h14470)
      2'b0, 2'b01:
	  CASE_guard4470_0b0_0_0b1_0_0b10_out_exp4886_0b_ETC__q18 = 8'd0;
      2'b10:
	  CASE_guard4470_0b0_0_0b1_0_0b10_out_exp4886_0b_ETC__q18 =
	      out_exp__h14886;
      2'b11:
	  CASE_guard4470_0b0_0_0b1_0_0b10_out_exp4886_0b_ETC__q18 =
	      _theResult___exp__h14883;
    endcase
  end
  always@(guard__h14470 or _theResult___exp__h14883)
  begin
    case (guard__h14470)
      2'b0: CASE_guard4470_0b0_0_0b1_theResult___exp4883_0_ETC__q19 = 8'd0;
      2'b01, 2'b10, 2'b11:
	  CASE_guard4470_0b0_0_0b1_theResult___exp4883_0_ETC__q19 =
	      _theResult___exp__h14883;
    endcase
  end
  always@(requestR or
	  guard__h14470 or
	  _theResult___exp__h14883 or
	  CASE_guard4470_0b0_0_0b1_theResult___exp4883_0_ETC__q19)
  begin
    case (requestR[194:192])
      3'h3:
	  CASE_requestR_BITS_194_TO_192_0x3_IF_guard4470_ETC__q20 =
	      (guard__h14470 == 2'b0) ? 8'd0 : _theResult___exp__h14883;
      3'h4:
	  CASE_requestR_BITS_194_TO_192_0x3_IF_guard4470_ETC__q20 =
	      CASE_guard4470_0b0_0_0b1_theResult___exp4883_0_ETC__q19;
      default: CASE_requestR_BITS_194_TO_192_0x3_IF_guard4470_ETC__q20 = 8'd0;
    endcase
  end
  always@(guard__h14996 or x__h15011 or _theResult___exp__h15435)
  begin
    case (guard__h14996)
      2'b0:
	  CASE_guard4996_0b0_x5011_BITS_7_TO_0_0b1_theRe_ETC__q21 =
	      x__h15011[7:0];
      2'b01, 2'b10, 2'b11:
	  CASE_guard4996_0b0_x5011_BITS_7_TO_0_0b1_theRe_ETC__q21 =
	      _theResult___exp__h15435;
    endcase
  end
  always@(requestR or
	  x__h15011 or
	  guard__h14996 or
	  _theResult___exp__h15435 or
	  CASE_guard4996_0b0_x5011_BITS_7_TO_0_0b1_theRe_ETC__q21)
  begin
    case (requestR[194:192])
      3'h1, 3'h2:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d708 =
	      x__h15011[7:0];
      3'h3:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d708 =
	      (guard__h14996 == 2'b0) ?
		x__h15011[7:0] :
		_theResult___exp__h15435;
      3'h4:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d708 =
	      CASE_guard4996_0b0_x5011_BITS_7_TO_0_0b1_theRe_ETC__q21;
      default: IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d708 =
		   8'd0;
    endcase
  end
  always@(guard__h14996 or
	  x__h15011 or out_exp__h15438 or _theResult___exp__h15435)
  begin
    case (guard__h14996)
      2'b0, 2'b01:
	  CASE_guard4996_0b0_x5011_BITS_7_TO_0_0b1_x5011_ETC__q22 =
	      x__h15011[7:0];
      2'b10:
	  CASE_guard4996_0b0_x5011_BITS_7_TO_0_0b1_x5011_ETC__q22 =
	      out_exp__h15438;
      2'b11:
	  CASE_guard4996_0b0_x5011_BITS_7_TO_0_0b1_x5011_ETC__q22 =
	      _theResult___exp__h15435;
    endcase
  end
  always@(guard__h14996 or sfd___3__h14460 or _theResult___sfd__h15436)
  begin
    case (guard__h14996)
      2'b0:
	  CASE_guard4996_0b0_sfd___34460_BITS_30_TO_8_0b_ETC__q23 =
	      sfd___3__h14460[30:8];
      2'b01, 2'b10, 2'b11:
	  CASE_guard4996_0b0_sfd___34460_BITS_30_TO_8_0b_ETC__q23 =
	      _theResult___sfd__h15436;
    endcase
  end
  always@(requestR or
	  sfd___3__h14460 or
	  guard__h14996 or
	  _theResult___sfd__h15436 or
	  CASE_guard4996_0b0_sfd___34460_BITS_30_TO_8_0b_ETC__q23)
  begin
    case (requestR[194:192])
      3'h1, 3'h2:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d746 =
	      sfd___3__h14460[30:8];
      3'h3:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d746 =
	      (guard__h14996 == 2'b0) ?
		sfd___3__h14460[30:8] :
		_theResult___sfd__h15436;
      3'h4:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d746 =
	      CASE_guard4996_0b0_sfd___34460_BITS_30_TO_8_0b_ETC__q23;
      default: IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d746 =
		   23'd0;
    endcase
  end
  always@(guard__h14996 or
	  sfd___3__h14460 or out_sfd__h15439 or _theResult___sfd__h15436)
  begin
    case (guard__h14996)
      2'b0, 2'b01:
	  CASE_guard4996_0b0_sfd___34460_BITS_30_TO_8_0b_ETC__q24 =
	      sfd___3__h14460[30:8];
      2'b10:
	  CASE_guard4996_0b0_sfd___34460_BITS_30_TO_8_0b_ETC__q24 =
	      out_sfd__h15439;
      2'b11:
	  CASE_guard4996_0b0_sfd___34460_BITS_30_TO_8_0b_ETC__q24 =
	      _theResult___sfd__h15436;
    endcase
  end
  always@(guard__h14470 or sfd___3__h14460 or _theResult___sfd__h14884)
  begin
    case (guard__h14470)
      2'b0:
	  CASE_guard4470_0b0_sfd___34460_BITS_31_TO_9_0b_ETC__q25 =
	      sfd___3__h14460[31:9];
      2'b01, 2'b10, 2'b11:
	  CASE_guard4470_0b0_sfd___34460_BITS_31_TO_9_0b_ETC__q25 =
	      _theResult___sfd__h14884;
    endcase
  end
  always@(requestR or
	  sfd___3__h14460 or
	  guard__h14470 or
	  _theResult___sfd__h14884 or
	  CASE_guard4470_0b0_sfd___34460_BITS_31_TO_9_0b_ETC__q25)
  begin
    case (requestR[194:192])
      3'h1, 3'h2:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d731 =
	      sfd___3__h14460[31:9];
      3'h3:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d731 =
	      (guard__h14470 == 2'b0) ?
		sfd___3__h14460[31:9] :
		_theResult___sfd__h14884;
      3'h4:
	  IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d731 =
	      CASE_guard4470_0b0_sfd___34460_BITS_31_TO_9_0b_ETC__q25;
      default: IF_requestR_3_BITS_194_TO_192_2_EQ_0x4_7_THEN__ETC___d731 =
		   23'd0;
    endcase
  end
  always@(guard__h14470 or
	  sfd___3__h14460 or out_sfd__h14887 or _theResult___sfd__h14884)
  begin
    case (guard__h14470)
      2'b0, 2'b01:
	  CASE_guard4470_0b0_sfd___34460_BITS_31_TO_9_0b_ETC__q26 =
	      sfd___3__h14460[31:9];
      2'b10:
	  CASE_guard4470_0b0_sfd___34460_BITS_31_TO_9_0b_ETC__q26 =
	      out_sfd__h14887;
      2'b11:
	  CASE_guard4470_0b0_sfd___34460_BITS_31_TO_9_0b_ETC__q26 =
	      _theResult___sfd__h14884;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        stateR <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (stateR$EN) stateR <= `BSV_ASSIGNMENT_DELAY stateR$D_IN;
      end
    if (requestR$EN) requestR <= `BSV_ASSIGNMENT_DELAY requestR$D_IN;
    if (resultR$EN) resultR <= `BSV_ASSIGNMENT_DELAY resultR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    requestR = 215'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    resultR = 70'h2AAAAAAAAAAAAAAAAA;
    stateR = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFADD_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h1064 = $stime;
	  #0;
	end
    v__h1058 = v__h1064 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFADD_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFADD: ", v__h1058);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSUB_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h1489 = $stime;
	  #0;
	end
    v__h1483 = v__h1489 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSUB_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFSUB: ", v__h1483);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMUL_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h1678 = $stime;
	  #0;
	end
    v__h1672 = v__h1678 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMUL_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMUL: ", v__h1672);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMADD_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h1879 = $stime;
	  #0;
	end
    v__h1873 = v__h1879 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMADD_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMADD_S ", v__h1873);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMSUB_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2129 = $stime;
	  #0;
	end
    v__h2123 = v__h2129 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMSUB_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMSUB_S ", v__h2123);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFNMADD_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2314 = $stime;
	  #0;
	end
    v__h2308 = v__h2314 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFNMADD_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFNMADD_S ", v__h2308);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFNMSUB_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2499 = $stime;
	  #0;
	end
    v__h2493 = v__h2499 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFNMSUB_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFNMSUB_S ", v__h2493);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJ_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2693 = $stime;
	  #0;
	end
    v__h2687 = v__h2693 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJ_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFSGNJ_S ", v__h2687);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJN_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2871 = $stime;
	  #0;
	end
    v__h2865 = v__h2871 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJN_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFSGNJN_S ", v__h2865);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJX_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3039 = $stime;
	  #0;
	end
    v__h3033 = v__h3039 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJX_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFSGNJX_S ", v__h3033);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_W && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3241 = $stime;
	  #0;
	end
    v__h3235 = v__h3241 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_W && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_S_W ", v__h3235);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_WU && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h9737 = $stime;
	  #0;
	end
    v__h9731 = v__h9737 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_WU && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_S_WU ", v__h9731);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_W_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h15915 = $stime;
	  #0;
	end
    v__h15909 = v__h15915 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_W_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_W_S ", v__h15909);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_WU_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h17541 = $stime;
	  #0;
	end
    v__h17535 = v__h17541 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_WU_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_WU_S ", v__h17535);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMIN_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h18323 = $stime;
	  #0;
	end
    v__h18317 = v__h18323 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMIN_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMIN_S ", v__h18317);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMAX_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h20982 = $stime;
	  #0;
	end
    v__h20976 = v__h20982 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMAX_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMAX_S ", v__h20976);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMV_W_X && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h23538 = $stime;
	  #0;
	end
    v__h23532 = v__h23538 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMV_W_X && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMV_W_X ", v__h23532);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMV_X_W && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h23693 = $stime;
	  #0;
	end
    v__h23687 = v__h23693 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMV_X_W && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMV_X_W ", v__h23687);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFEQ_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h23863 = $stime;
	  #0;
	end
    v__h23857 = v__h23863 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFEQ_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFEQ_S ", v__h23857);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFLT_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h25375 = $stime;
	  #0;
	end
    v__h25369 = v__h25375 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFLT_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFLT_S ", v__h25369);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFLE_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h26475 = $stime;
	  #0;
	end
    v__h26469 = v__h26475 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFLE_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFLE_S ", v__h26469);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCLASS_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h27595 = $stime;
	  #0;
	end
    v__h27589 = v__h27595 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCLASS_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCLASS_S ", v__h27589);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h28376 = $stime;
	  #0;
	end
    v__h28370 = v__h28376 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write("%0d: %m.rl_get_fpu_result: ", v__h28370);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write("<");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[69])
	if (fpu$server_core_response_get[36])
	  $write("tagged S ",
		 "<Float %s%x.%x>",
		 "-",
		 fpu$server_core_response_get[35:28],
		 fpu$server_core_response_get[27:5]);
	else
	  $write("tagged S ",
		 "<Float %s%x.%x>",
		 "+",
		 fpu$server_core_response_get[35:28],
		 fpu$server_core_response_get[27:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[69])
	if (fpu$server_core_response_get[68])
	  $write("tagged D ",
		 "<Float %s%x.%x>",
		 "-",
		 fpu$server_core_response_get[67:57],
		 fpu$server_core_response_get[56:5]);
	else
	  $write("tagged D ",
		 "<Float %s%x.%x>",
		 "+",
		 fpu$server_core_response_get[67:57],
		 fpu$server_core_response_get[56:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write("<Exception: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[4])
	$write("Invalid_Op ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[4])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[3])
	$write("Divide_0 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[3])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[2])
	$write("Overflow ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[2])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[1])
	$write("Underflow ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[1])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[0])
	$write("Inexact ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[0])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write(">");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write(">");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkFBox_Core

