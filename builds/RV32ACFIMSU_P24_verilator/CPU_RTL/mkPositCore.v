//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_core_request_put    O     1 reg
// server_core_response_get       O    71
// RDY_server_core_response_get   O     1 reg
// verbosity                      I     4
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_core_request_put        I   138
// EN_server_core_request_put     I     1
// EN_server_core_response_get    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPositCore(verbosity,
		   CLK,
		   RST_N,

		   server_core_request_put,
		   EN_server_core_request_put,
		   RDY_server_core_request_put,

		   EN_server_core_response_get,
		   server_core_response_get,
		   RDY_server_core_response_get);
  input  [3 : 0] verbosity;
  input  CLK;
  input  RST_N;

  // action method server_core_request_put
  input  [137 : 0] server_core_request_put;
  input  EN_server_core_request_put;
  output RDY_server_core_request_put;

  // actionvalue method server_core_response_get
  input  EN_server_core_response_get;
  output [70 : 0] server_core_response_get;
  output RDY_server_core_response_get;

  // signals for module outputs
  wire [70 : 0] server_core_response_get;
  wire RDY_server_core_request_put, RDY_server_core_response_get;

  // inlined wires
  wire [32 : 0] ffI_f_rv$port0__write_1,
		ffI_f_rv$port1__read,
		ffI_f_rv$port2__read;
  wire [3 : 0] opcode_in_rv$port0__write_1,
	       opcode_in_rv$port1__read,
	       opcode_in_rv$port2__read;
  wire ffI_f_rv$EN_port0__write, opcode_in_rv$EN_port1__write;

  // register ffI_f_rv
  reg [32 : 0] ffI_f_rv;
  wire [32 : 0] ffI_f_rv$D_IN;
  wire ffI_f_rv$EN;

  // register fma_check_quire
  reg fma_check_quire;
  wire fma_check_quire$D_IN, fma_check_quire$EN;

  // register opcode_in_rv
  reg [3 : 0] opcode_in_rv;
  wire [3 : 0] opcode_in_rv$D_IN;
  wire opcode_in_rv$EN;

  // register rg_quire
  reg [287 : 0] rg_quire;
  wire [287 : 0] rg_quire$D_IN;
  wire rg_quire$EN;

  // register rg_quire_busy
  reg rg_quire_busy;
  wire rg_quire_busy$D_IN, rg_quire_busy$EN;

  // ports of submodule extracter1_fifo_output_reg
  wire [29 : 0] extracter1_fifo_output_reg$D_IN,
		extracter1_fifo_output_reg$D_OUT;
  wire extracter1_fifo_output_reg$CLR,
       extracter1_fifo_output_reg$DEQ,
       extracter1_fifo_output_reg$EMPTY_N,
       extracter1_fifo_output_reg$ENQ,
       extracter1_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage0_reg
  wire [25 : 0] extracter1_fifo_stage0_reg$D_IN;
  wire extracter1_fifo_stage0_reg$CLR,
       extracter1_fifo_stage0_reg$DEQ,
       extracter1_fifo_stage0_reg$ENQ;

  // ports of submodule extracter1_fifo_stage1_reg
  wire [34 : 0] extracter1_fifo_stage1_reg$D_IN;
  wire extracter1_fifo_stage1_reg$CLR,
       extracter1_fifo_stage1_reg$DEQ,
       extracter1_fifo_stage1_reg$ENQ;

  // ports of submodule extracter1_fifo_stage2_reg
  wire [31 : 0] extracter1_fifo_stage2_reg$D_IN;
  wire extracter1_fifo_stage2_reg$CLR,
       extracter1_fifo_stage2_reg$DEQ,
       extracter1_fifo_stage2_reg$ENQ;

  // ports of submodule extracter2_fifo_output_reg
  wire [29 : 0] extracter2_fifo_output_reg$D_IN,
		extracter2_fifo_output_reg$D_OUT;
  wire extracter2_fifo_output_reg$CLR,
       extracter2_fifo_output_reg$DEQ,
       extracter2_fifo_output_reg$EMPTY_N,
       extracter2_fifo_output_reg$ENQ,
       extracter2_fifo_output_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage0_reg
  wire [25 : 0] extracter2_fifo_stage0_reg$D_IN;
  wire extracter2_fifo_stage0_reg$CLR,
       extracter2_fifo_stage0_reg$DEQ,
       extracter2_fifo_stage0_reg$ENQ;

  // ports of submodule extracter2_fifo_stage1_reg
  wire [34 : 0] extracter2_fifo_stage1_reg$D_IN;
  wire extracter2_fifo_stage1_reg$CLR,
       extracter2_fifo_stage1_reg$DEQ,
       extracter2_fifo_stage1_reg$ENQ;

  // ports of submodule extracter2_fifo_stage2_reg
  wire [31 : 0] extracter2_fifo_stage2_reg$D_IN;
  wire extracter2_fifo_stage2_reg$CLR,
       extracter2_fifo_stage2_reg$DEQ,
       extracter2_fifo_stage2_reg$ENQ;

  // ports of submodule ffI
  wire [137 : 0] ffI$D_IN, ffI$D_OUT;
  wire ffI$CLR, ffI$DEQ, ffI$EMPTY_N, ffI$ENQ, ffI$FULL_N;

  // ports of submodule ffO
  reg [70 : 0] ffO$D_IN;
  wire [70 : 0] ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule fma_adder_fifo_output_reg
  wire fma_adder_fifo_output_reg$CLR,
       fma_adder_fifo_output_reg$DEQ,
       fma_adder_fifo_output_reg$EMPTY_N,
       fma_adder_fifo_output_reg$ENQ,
       fma_adder_fifo_output_reg$FULL_N;

  // ports of submodule fma_adder_fifo_stage0_reg
  wire [294 : 0] fma_adder_fifo_stage0_reg$D_IN,
		 fma_adder_fifo_stage0_reg$D_OUT;
  wire fma_adder_fifo_stage0_reg$CLR,
       fma_adder_fifo_stage0_reg$DEQ,
       fma_adder_fifo_stage0_reg$EMPTY_N,
       fma_adder_fifo_stage0_reg$ENQ,
       fma_adder_fifo_stage0_reg$FULL_N;

  // ports of submodule fma_ffO
  wire fma_ffO$CLR, fma_ffO$DEQ, fma_ffO$EMPTY_N, fma_ffO$ENQ, fma_ffO$FULL_N;

  // ports of submodule fma_multiplier_fifo_output_reg
  wire [292 : 0] fma_multiplier_fifo_output_reg$D_IN,
		 fma_multiplier_fifo_output_reg$D_OUT;
  wire fma_multiplier_fifo_output_reg$CLR,
       fma_multiplier_fifo_output_reg$DEQ,
       fma_multiplier_fifo_output_reg$EMPTY_N,
       fma_multiplier_fifo_output_reg$ENQ,
       fma_multiplier_fifo_output_reg$FULL_N;

  // ports of submodule fma_multiplier_fifo_stage0_reg
  wire [52 : 0] fma_multiplier_fifo_stage0_reg$D_IN,
		fma_multiplier_fifo_stage0_reg$D_OUT;
  wire fma_multiplier_fifo_stage0_reg$CLR,
       fma_multiplier_fifo_stage0_reg$DEQ,
       fma_multiplier_fifo_stage0_reg$EMPTY_N,
       fma_multiplier_fifo_stage0_reg$ENQ,
       fma_multiplier_fifo_stage0_reg$FULL_N;

  // ports of submodule ftop_fToP_fifo_output_reg
  wire [32 : 0] ftop_fToP_fifo_output_reg$D_IN,
		ftop_fToP_fifo_output_reg$D_OUT;
  wire ftop_fToP_fifo_output_reg$CLR,
       ftop_fToP_fifo_output_reg$DEQ,
       ftop_fToP_fifo_output_reg$EMPTY_N,
       ftop_fToP_fifo_output_reg$ENQ,
       ftop_fToP_fifo_output_reg$FULL_N;

  // ports of submodule ftop_fToP_fifo_stage0_reg
  wire [38 : 0] ftop_fToP_fifo_stage0_reg$D_IN,
		ftop_fToP_fifo_stage0_reg$D_OUT;
  wire ftop_fToP_fifo_stage0_reg$CLR,
       ftop_fToP_fifo_stage0_reg$DEQ,
       ftop_fToP_fifo_stage0_reg$EMPTY_N,
       ftop_fToP_fifo_stage0_reg$ENQ,
       ftop_fToP_fifo_stage0_reg$FULL_N;

  // ports of submodule ftop_ffO
  wire [32 : 0] ftop_ffO$D_IN, ftop_ffO$D_OUT;
  wire ftop_ffO$CLR,
       ftop_ffO$DEQ,
       ftop_ffO$EMPTY_N,
       ftop_ffO$ENQ,
       ftop_ffO$FULL_N;

  // ports of submodule need_normalize
  wire need_normalize$CLR,
       need_normalize$DEQ,
       need_normalize$D_IN,
       need_normalize$ENQ;

  // ports of submodule normalizer_fifo_output_reg
  wire [27 : 0] normalizer_fifo_output_reg$D_IN,
		normalizer_fifo_output_reg$D_OUT;
  wire normalizer_fifo_output_reg$CLR,
       normalizer_fifo_output_reg$DEQ,
       normalizer_fifo_output_reg$EMPTY_N,
       normalizer_fifo_output_reg$ENQ,
       normalizer_fifo_output_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage0_reg
  wire [49 : 0] normalizer_fifo_stage0_reg$D_IN;
  wire normalizer_fifo_stage0_reg$CLR,
       normalizer_fifo_stage0_reg$DEQ,
       normalizer_fifo_stage0_reg$ENQ;

  // ports of submodule normalizer_fifo_stage1_reg
  wire [53 : 0] normalizer_fifo_stage1_reg$D_IN;
  wire normalizer_fifo_stage1_reg$CLR,
       normalizer_fifo_stage1_reg$DEQ,
       normalizer_fifo_stage1_reg$ENQ;

  // ports of submodule normalizer_fifo_stage2_reg
  wire [27 : 0] normalizer_fifo_stage2_reg$D_IN;
  wire normalizer_fifo_stage2_reg$CLR,
       normalizer_fifo_stage2_reg$DEQ,
       normalizer_fifo_stage2_reg$ENQ;

  // ports of submodule opcode_norm
  wire [2 : 0] opcode_norm$D_IN, opcode_norm$D_OUT;
  wire opcode_norm$CLR,
       opcode_norm$DEQ,
       opcode_norm$EMPTY_N,
       opcode_norm$ENQ,
       opcode_norm$FULL_N;

  // ports of submodule opcode_out
  wire [2 : 0] opcode_out$D_IN, opcode_out$D_OUT;
  wire opcode_out$CLR,
       opcode_out$DEQ,
       opcode_out$EMPTY_N,
       opcode_out$ENQ,
       opcode_out$FULL_N;

  // ports of submodule ptof_ffO
  wire [34 : 0] ptof_ffO$D_IN, ptof_ffO$D_OUT;
  wire ptof_ffO$CLR,
       ptof_ffO$DEQ,
       ptof_ffO$EMPTY_N,
       ptof_ffO$ENQ,
       ptof_ffO$FULL_N;

  // ports of submodule ptof_ptoF_fifo_output_reg
  wire [34 : 0] ptof_ptoF_fifo_output_reg$D_IN,
		ptof_ptoF_fifo_output_reg$D_OUT;
  wire ptof_ptoF_fifo_output_reg$CLR,
       ptof_ptoF_fifo_output_reg$DEQ,
       ptof_ptoF_fifo_output_reg$EMPTY_N,
       ptof_ptoF_fifo_output_reg$ENQ,
       ptof_ptoF_fifo_output_reg$FULL_N;

  // ports of submodule ptof_ptoF_fifo_stage0_reg
  wire [41 : 0] ptof_ptoF_fifo_stage0_reg$D_IN,
		ptof_ptoF_fifo_stage0_reg$D_OUT;
  wire ptof_ptoF_fifo_stage0_reg$CLR,
       ptof_ptoF_fifo_stage0_reg$DEQ,
       ptof_ptoF_fifo_stage0_reg$EMPTY_N,
       ptof_ptoF_fifo_stage0_reg$ENQ,
       ptof_ptoF_fifo_stage0_reg$FULL_N;

  // ports of submodule ptoq_ffO
  wire ptoq_ffO$CLR,
       ptoq_ffO$DEQ,
       ptoq_ffO$EMPTY_N,
       ptoq_ffO$ENQ,
       ptoq_ffO$FULL_N;

  // ports of submodule ptoq_positToquire_fifo_output_reg
  wire ptoq_positToquire_fifo_output_reg$CLR,
       ptoq_positToquire_fifo_output_reg$DEQ,
       ptoq_positToquire_fifo_output_reg$EMPTY_N,
       ptoq_positToquire_fifo_output_reg$ENQ,
       ptoq_positToquire_fifo_output_reg$FULL_N;

  // ports of submodule ptoq_positToquire_fifo_stage0_reg
  wire [29 : 0] ptoq_positToquire_fifo_stage0_reg$D_IN;
  wire ptoq_positToquire_fifo_stage0_reg$CLR,
       ptoq_positToquire_fifo_stage0_reg$DEQ,
       ptoq_positToquire_fifo_stage0_reg$ENQ;

  // ports of submodule ptoq_positToquire_fifo_stage1_reg
  wire [266 : 0] ptoq_positToquire_fifo_stage1_reg$D_IN,
		 ptoq_positToquire_fifo_stage1_reg$D_OUT;
  wire ptoq_positToquire_fifo_stage1_reg$CLR,
       ptoq_positToquire_fifo_stage1_reg$DEQ,
       ptoq_positToquire_fifo_stage1_reg$EMPTY_N,
       ptoq_positToquire_fifo_stage1_reg$ENQ,
       ptoq_positToquire_fifo_stage1_reg$FULL_N;

  // ports of submodule qtop_ffO
  wire [32 : 0] qtop_ffO$D_IN, qtop_ffO$D_OUT;
  wire qtop_ffO$CLR,
       qtop_ffO$DEQ,
       qtop_ffO$EMPTY_N,
       qtop_ffO$ENQ,
       qtop_ffO$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_output_reg
  wire [32 : 0] qtop_quireToPosit1_fifo_output_reg$D_IN,
		qtop_quireToPosit1_fifo_output_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_output_reg$CLR,
       qtop_quireToPosit1_fifo_output_reg$DEQ,
       qtop_quireToPosit1_fifo_output_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_output_reg$ENQ,
       qtop_quireToPosit1_fifo_output_reg$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_stage0_reg
  wire [298 : 0] qtop_quireToPosit1_fifo_stage0_reg$D_IN,
		 qtop_quireToPosit1_fifo_stage0_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_stage0_reg$CLR,
       qtop_quireToPosit1_fifo_stage0_reg$DEQ,
       qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_stage0_reg$ENQ,
       qtop_quireToPosit1_fifo_stage0_reg$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_stage1_reg
  wire [32 : 0] qtop_quireToPosit1_fifo_stage1_reg$D_IN,
		qtop_quireToPosit1_fifo_stage1_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_stage1_reg$CLR,
       qtop_quireToPosit1_fifo_stage1_reg$DEQ,
       qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_stage1_reg$ENQ,
       qtop_quireToPosit1_fifo_stage1_reg$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_extract_in,
       CAN_FIRE_RL_fma_adder_stage_1,
       CAN_FIRE_RL_fma_multiplier_stage_1,
       CAN_FIRE_RL_fma_rl_connect1,
       CAN_FIRE_RL_fma_rl_out,
       CAN_FIRE_RL_ftop_fToP_stage_1,
       CAN_FIRE_RL_ftop_rl_out,
       CAN_FIRE_RL_ptof_ptoF_stage_2,
       CAN_FIRE_RL_ptof_rl_out,
       CAN_FIRE_RL_ptoq_positToquire_stage_2,
       CAN_FIRE_RL_ptoq_rl_out,
       CAN_FIRE_RL_qtop_quireToPosit1_stage_1,
       CAN_FIRE_RL_qtop_quireToPosit1_stage_2,
       CAN_FIRE_RL_qtop_rl_out,
       CAN_FIRE_RL_rl_fma,
       CAN_FIRE_RL_rl_ftop,
       CAN_FIRE_RL_rl_norm,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_RL_rl_ptof,
       CAN_FIRE_RL_rl_ptoq,
       CAN_FIRE_RL_rl_qtop,
       CAN_FIRE_server_core_request_put,
       CAN_FIRE_server_core_response_get,
       WILL_FIRE_RL_extract_in,
       WILL_FIRE_RL_fma_adder_stage_1,
       WILL_FIRE_RL_fma_multiplier_stage_1,
       WILL_FIRE_RL_fma_rl_connect1,
       WILL_FIRE_RL_fma_rl_out,
       WILL_FIRE_RL_ftop_fToP_stage_1,
       WILL_FIRE_RL_ftop_rl_out,
       WILL_FIRE_RL_ptof_ptoF_stage_2,
       WILL_FIRE_RL_ptof_rl_out,
       WILL_FIRE_RL_ptoq_positToquire_stage_2,
       WILL_FIRE_RL_ptoq_rl_out,
       WILL_FIRE_RL_qtop_quireToPosit1_stage_1,
       WILL_FIRE_RL_qtop_quireToPosit1_stage_2,
       WILL_FIRE_RL_qtop_rl_out,
       WILL_FIRE_RL_rl_fma,
       WILL_FIRE_RL_rl_ftop,
       WILL_FIRE_RL_rl_norm,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_RL_rl_ptof,
       WILL_FIRE_RL_rl_ptoq,
       WILL_FIRE_RL_rl_qtop,
       WILL_FIRE_server_core_request_put,
       WILL_FIRE_server_core_response_get;

  // inputs to muxes for submodule ports
  wire [287 : 0] MUX_rg_quire$write_1__VAL_1, MUX_rg_quire$write_1__VAL_2;
  wire MUX_opcode_out$enq_1__SEL_1,
       MUX_rg_quire_busy$write_1__SEL_1,
       MUX_rg_quire_busy$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h57841;
  reg [31 : 0] v__h113692;
  reg [31 : 0] v__h118210;
  reg [31 : 0] v__h109224;
  reg [31 : 0] v__h119345;
  reg [31 : 0] v__h119487;
  reg [31 : 0] v__h57835;
  reg [31 : 0] v__h109218;
  reg [31 : 0] v__h113686;
  reg [31 : 0] v__h118204;
  reg [31 : 0] v__h119339;
  reg [31 : 0] v__h119481;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] float_no__h31224;
  reg [23 : 0] IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603,
	       output_regf_out_posit__h109296,
	       output_regf_out_posit__h113792;
  reg [18 : 0] x__h41657, x__h49536;
  reg [1 : 0] CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1,
	      CASE_float_no1224_0_2_4286578688_1_0__q34,
	      CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q32,
	      CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q33;
  reg CASE_shift_new009265_0_NOT_ftop_ffOD_OUT_BIT__ETC__q21,
      CASE_shift_new009265_0_ftop_ffOD_OUT_BIT_0_1__ETC__q20,
      CASE_shift_new013765_0_NOT_qtop_ffOD_OUT_BIT__ETC__q25,
      CASE_shift_new013765_0_qtop_ffOD_OUT_BIT_0_1__ETC__q24,
      IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329,
      IF_opcode_out_first__028_EQ_0_029_OR_opcode_ou_ETC___d2051;
  wire [295 : 0] rg_quire_15_BIT_287_16_AND_rg_quire_15_BITS_28_ETC___d1631;
  wire [287 : 0] IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d110,
		 IF_NOT_rg_quire_15_BIT_287_16_17_AND_NOT_fma_m_ETC___d130,
		 SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77,
		 fma_adder_fifo_stage0_reg_first__7_BITS_294_TO_ETC___d82,
		 rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123,
		 twos_complement_carry_int_frac__h28908,
		 twos_complement_carry_int_frac__h437,
		 x__h1257,
		 x__h15830;
  wire [286 : 0] carry_int_frac_shifted__h29747,
		 twos_complement_carry_int_frac__h60012,
		 x__h801;
  wire [263 : 0] IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d36,
		 f_new___1__h710,
		 f_new__h487,
		 f_new__h59863,
		 f_new__h657,
		 int_frac__h59846,
		 mask1__h712,
		 x__h893;
  wire [79 : 0] _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d944;
  wire [49 : 0] extracter1_fifo_output_reg_first__09_BIT_27_24_ETC___d946;
  wire [39 : 0] fma_multiplier_fifo_stage0_regD_OUT_BITS_39_TO_0__q9, x__h670;
  wire [31 : 0] float_no__h31221;
  wire [26 : 0] IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR__ETC___d863,
		IF_ffI_first__06_BITS_94_TO_72_38_EQ_0_39_AND__ETC___d597;
  wire [23 : 0] frac__h31214, in_posit2___1_posit_inp__h41970, x__h31302;
  wire [22 : 0] IF_IF_NOT_IF_ftop_ffO_first__648_BIT_28_653_TH_ETC___d1775,
		IF_IF_NOT_IF_qtop_ffO_first__824_BIT_28_829_TH_ETC___d1951,
		IF_NOT_IF_ftop_ffO_first__648_BIT_28_653_THEN__ETC___d1771,
		IF_NOT_IF_qtop_ffO_first__824_BIT_28_829_THEN__ETC___d1947,
		IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d27,
		IF_ftop_ffO_first__648_BIT_28_653_THEN_1_SL_22_ETC___d1694,
		IF_qtop_ffO_first__824_BIT_28_829_THEN_1_SL_22_ETC___d1870,
		INV_new_inp1914__q11,
		INV_new_inp4106__q2,
		a__h109312,
		a__h113808,
		b__h109545,
		b__h109783,
		b__h110640,
		b__h112637,
		b__h114041,
		b__h114279,
		b__h115135,
		b__h117132,
		frac_f__h31220,
		k__h109843,
		k__h109888,
		k__h114339,
		k__h114383,
		k_expo__h109268,
		k_expo__h113768,
		new_inp1914_AND_INV_0x7FFFFE_SL_x9487_SRL_x9489__q12,
		new_inp4106_AND_INV_0x7FFFFE_SL_x1608_SRL_x1610__q10,
		new_inp__h34106,
		new_inp__h41914,
		stage0_regf_frac__h58910,
		x__h109561,
		x__h109900,
		x__h114057,
		x__h114395,
		y__h109562,
		y__h109563,
		y__h114058,
		y__h114059;
  wire [19 : 0] IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173,
		f1__h58261,
		f2__h58262,
		frac__h30454,
		x__h112036,
		x__h116531,
		x__h30521;
  wire [18 : 0] frac__h34114,
		frac__h41922,
		ftop_ffOD_OUT_BITS_20_TO_2__q19,
		qtop_ffOD_OUT_BITS_20_TO_2__q23,
		stage1_regf_frac__h29529,
		x12036_BITS_18_TO_0__q18,
		x16531_BITS_18_TO_0__q22,
		x_frac__h30468;
  wire [9 : 0] IF_0_CONCAT_IF_IF_rg_quire_15_BIT_287_16_THEN__ETC___d1625,
	       IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12,
	       IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8,
	       SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8,
	       _0_CONCAT_IF_IF_rg_quire_15_BIT_287_16_THEN_0_M_ETC___d1620,
	       _155_MINUS_0_CONCAT_IF_IF_rg_quire_15_BIT_287_1_ETC___d1622,
	       x__h29835,
	       x__h703,
	       x__h791;
  wire [8 : 0] SEXT_extracter1_fifo_output_reg_first__09_BITS_ETC___d934,
	       _0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q29,
	       fma_multiplier_fifo_stage0_regD_OUT_BITS_48_T_ETC__q7,
	       msbZeros__h60013,
	       x__h31272,
	       x__h59907,
	       x__h869;
  wire [7 : 0] IF_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_T_ETC___d999,
	       IF_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_T_ETC__q30,
	       IF_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_T_ETC__q31,
	       IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC___d958,
	       IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC__q26,
	       IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC__q27,
	       SEXT_IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ__ETC___d714,
	       SEXT_IF_IF_ffI_first__06_BIT_95_40_THEN_0_MINU_ETC___d448,
	       SEXT_IF_new_inp1914_BIT_22_THEN_b2686_ELSE_b26883__q14,
	       SEXT_IF_new_inp4106_BIT_22_THEN_b4807_ELSE_b48095__q16,
	       _0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d1001,
	       _0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d1005,
	       extracter1_fifo_output_regD_OUT_BITS_26_TO_19__q17,
	       extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d960,
	       extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d964,
	       extracter2_fifo_output_regD_OUT_BITS_26_TO_19__q28,
	       ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3,
	       qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6;
  wire [5 : 0] IF_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_T_ETC___d1010,
	       IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC___d969,
	       IF_ftop_fToP_fifo_stage0_reg_first__06_BIT_7_0_ETC___d213,
	       IF_new_inp1914_BIT_22_THEN_b2686_ELSE_b2688__q13,
	       IF_new_inp4106_BIT_22_THEN_b4807_ELSE_b4809__q15,
	       IF_ptof_ptoF_fifo_stage0_reg_first__45_BIT_7_5_ETC___d259,
	       _0_MINUS_ftop_ffOD_OUT_BITS_28_TO_23__q4,
	       _0_MINUS_qtop_ffOD_OUT_BITS_28_TO_23__q5,
	       b__h34807,
	       b__h34809,
	       b__h42686,
	       b__h42688,
	       x__h30581,
	       x__h31362,
	       x__h38068,
	       x__h45947;
  wire [4 : 0] IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653__ETC___d1687,
	       IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829__ETC___d1863,
	       IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d807,
	       IF_IF_ffI_first__06_BIT_95_40_THEN_0_MINUS_ffI_ETC___d541,
	       IF_ftop_ffO_first__648_BIT_27_659_AND_NOT_ftop_ETC___d1665,
	       IF_qtop_ffO_first__824_BIT_27_835_AND_NOT_qtop_ETC___d1841,
	       _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712,
	       _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888,
	       _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1672,
	       _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1848,
	       ftop_ffO_first__648_BITS_27_TO_23_660_PLUS_1___d1661,
	       qtop_ffO_first__824_BITS_27_TO_23_836_PLUS_1___d1837,
	       x__h109886,
	       x__h110727,
	       x__h112212,
	       x__h112373,
	       x__h114381,
	       x__h115222,
	       x__h116707,
	       x__h116868,
	       x__h34817,
	       x__h38075,
	       x__h41608,
	       x__h41610,
	       x__h41645,
	       x__h42696,
	       x__h45954,
	       x__h49487,
	       x__h49489,
	       x__h49524;
  wire [2 : 0] _theResult___snd_snd__h110818,
	       _theResult___snd_snd__h115313,
	       i1__h112263,
	       i1__h116758,
	       i__h112165,
	       i__h116660,
	       shift_new0__h109265,
	       shift_new0__h113765,
	       shift_new__h110765,
	       shift_new__h115260,
	       x__h110769,
	       x__h115264;
  wire [1 : 0] IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC___d928,
	       _theResult___fst__h110672,
	       _theResult___fst__h115167,
	       expo__h34113,
	       expo__h41921,
	       expo_new__h110737,
	       expo_new__h110766,
	       expo_new__h115232,
	       expo_new__h115261,
	       mask_e__h110670,
	       mask_e__h115165,
	       truncated_frac__h1204,
	       x__h110643,
	       x__h112056,
	       x__h115138,
	       x__h116551;
  wire IF_IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_6_ETC___d1747,
       IF_IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_8_ETC___d1923,
       IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15,
       IF_opcode_norm_first__634_EQ_4_635_THEN_ftop_f_ETC___d1644,
       NOT_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__64_ETC___d1763,
       NOT_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__64_ETC___d1807,
       NOT_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__82_ETC___d1939,
       NOT_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__82_ETC___d1983,
       NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1715,
       NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1724,
       NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1779,
       NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1785,
       NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1804,
       NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1808,
       NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1891,
       NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1900,
       NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1955,
       NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1961,
       NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1980,
       NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1984,
       NOT_IF_ftop_ffO_first__648_BIT_28_653_THEN_1_S_ETC___d1699,
       NOT_IF_qtop_ffO_first__824_BIT_28_829_THEN_1_S_ETC___d1875,
       NOT_NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_ETC___d1737,
       NOT_NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_ETC___d1913,
       NOT_verbosity_ULE_1_66___d867,
       _0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d996,
       _0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d997,
       _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1749,
       _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1925,
       _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1673,
       _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1849,
       _theResult____h109275,
       _theResult____h113775,
       add_round__h31222,
       all_bits_0__h1207,
       extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d955,
       extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d956,
       flag_prev_truncate__h109274,
       flag_prev_truncate__h113774,
       flag_truncated_frac__h1202,
       ftop_ffO_first__648_BITS_20_TO_2_703_BIT_IF_22_ETC___d1721,
       ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1730,
       ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1734,
       qtop_ffO_first__824_BITS_20_TO_2_879_BIT_IF_22_ETC___d1897,
       qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1906,
       qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1910,
       qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166,
       truncated_frac_msb__h109270,
       truncated_frac_msb__h113770,
       truncated_frac_msb__h31216,
       truncated_frac_zero__h30455,
       truncated_frac_zero__h31215,
       x__h1250,
       x__h1252,
       x__h28363,
       x__h28368,
       x__h29851,
       x__h29894,
       x__h30594,
       x__h30671,
       x__h30683,
       x__h30684,
       x__h31389,
       x__h31390,
       x__h31410,
       x__h5435,
       x__h58169,
       x__h58254,
       x__h58276,
       x__h58278,
       x__h59499,
       x__h59670,
       x__h64164,
       x__h832,
       x__h876,
       y__h112253,
       y__h112257,
       y__h116748,
       y__h116752,
       y__h1251,
       y__h15806,
       y__h28381,
       y__h31411;

  // action method server_core_request_put
  assign RDY_server_core_request_put = ffI$FULL_N ;
  assign CAN_FIRE_server_core_request_put = ffI$FULL_N ;
  assign WILL_FIRE_server_core_request_put = EN_server_core_request_put ;

  // actionvalue method server_core_response_get
  assign server_core_response_get =
	     { CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1,
	       ffO$D_OUT[68:0] } ;
  assign RDY_server_core_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_server_core_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_server_core_response_get = EN_server_core_response_get ;

  // submodule extracter1_fifo_output_reg
  FIFO2 #(.width(32'd30),
	  .guarded(32'd1)) extracter1_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_output_reg$D_IN),
						      .ENQ(extracter1_fifo_output_reg$ENQ),
						      .DEQ(extracter1_fifo_output_reg$DEQ),
						      .CLR(extracter1_fifo_output_reg$CLR),
						      .D_OUT(extracter1_fifo_output_reg$D_OUT),
						      .FULL_N(extracter1_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_stage0_reg
  FIFO2 #(.width(32'd26),
	  .guarded(32'd1)) extracter1_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage0_reg$D_IN),
						      .ENQ(extracter1_fifo_stage0_reg$ENQ),
						      .DEQ(extracter1_fifo_stage0_reg$DEQ),
						      .CLR(extracter1_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage1_reg
  FIFO2 #(.width(32'd35),
	  .guarded(32'd1)) extracter1_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage1_reg$D_IN),
						      .ENQ(extracter1_fifo_stage1_reg$ENQ),
						      .DEQ(extracter1_fifo_stage1_reg$DEQ),
						      .CLR(extracter1_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage2_reg
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) extracter1_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage2_reg$D_IN),
						      .ENQ(extracter1_fifo_stage2_reg$ENQ),
						      .DEQ(extracter1_fifo_stage2_reg$DEQ),
						      .CLR(extracter1_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_output_reg
  FIFO2 #(.width(32'd30),
	  .guarded(32'd1)) extracter2_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_output_reg$D_IN),
						      .ENQ(extracter2_fifo_output_reg$ENQ),
						      .DEQ(extracter2_fifo_output_reg$DEQ),
						      .CLR(extracter2_fifo_output_reg$CLR),
						      .D_OUT(extracter2_fifo_output_reg$D_OUT),
						      .FULL_N(extracter2_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_output_reg$EMPTY_N));

  // submodule extracter2_fifo_stage0_reg
  FIFO2 #(.width(32'd26),
	  .guarded(32'd1)) extracter2_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage0_reg$D_IN),
						      .ENQ(extracter2_fifo_stage0_reg$ENQ),
						      .DEQ(extracter2_fifo_stage0_reg$DEQ),
						      .CLR(extracter2_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage1_reg
  FIFO2 #(.width(32'd35),
	  .guarded(32'd1)) extracter2_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage1_reg$D_IN),
						      .ENQ(extracter2_fifo_stage1_reg$ENQ),
						      .DEQ(extracter2_fifo_stage1_reg$DEQ),
						      .CLR(extracter2_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage2_reg
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) extracter2_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage2_reg$D_IN),
						      .ENQ(extracter2_fifo_stage2_reg$ENQ),
						      .DEQ(extracter2_fifo_stage2_reg$DEQ),
						      .CLR(extracter2_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule ffI
  FIFO2 #(.width(32'd138), .guarded(32'd1)) ffI(.RST(RST_N),
						.CLK(CLK),
						.D_IN(ffI$D_IN),
						.ENQ(ffI$ENQ),
						.DEQ(ffI$DEQ),
						.CLR(ffI$CLR),
						.D_OUT(ffI$D_OUT),
						.FULL_N(ffI$FULL_N),
						.EMPTY_N(ffI$EMPTY_N));

  // submodule ffO
  FIFO2 #(.width(32'd71), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule fma_adder_fifo_output_reg
  FIFO20 #(.guarded(32'd1)) fma_adder_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .ENQ(fma_adder_fifo_output_reg$ENQ),
						      .DEQ(fma_adder_fifo_output_reg$DEQ),
						      .CLR(fma_adder_fifo_output_reg$CLR),
						      .FULL_N(fma_adder_fifo_output_reg$FULL_N),
						      .EMPTY_N(fma_adder_fifo_output_reg$EMPTY_N));

  // submodule fma_adder_fifo_stage0_reg
  FIFO2 #(.width(32'd295),
	  .guarded(32'd1)) fma_adder_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(fma_adder_fifo_stage0_reg$D_IN),
						     .ENQ(fma_adder_fifo_stage0_reg$ENQ),
						     .DEQ(fma_adder_fifo_stage0_reg$DEQ),
						     .CLR(fma_adder_fifo_stage0_reg$CLR),
						     .D_OUT(fma_adder_fifo_stage0_reg$D_OUT),
						     .FULL_N(fma_adder_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(fma_adder_fifo_stage0_reg$EMPTY_N));

  // submodule fma_ffO
  FIFO20 #(.guarded(32'd1)) fma_ffO(.RST(RST_N),
				    .CLK(CLK),
				    .ENQ(fma_ffO$ENQ),
				    .DEQ(fma_ffO$DEQ),
				    .CLR(fma_ffO$CLR),
				    .FULL_N(fma_ffO$FULL_N),
				    .EMPTY_N(fma_ffO$EMPTY_N));

  // submodule fma_multiplier_fifo_output_reg
  FIFO2 #(.width(32'd293),
	  .guarded(32'd1)) fma_multiplier_fifo_output_reg(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fma_multiplier_fifo_output_reg$D_IN),
							  .ENQ(fma_multiplier_fifo_output_reg$ENQ),
							  .DEQ(fma_multiplier_fifo_output_reg$DEQ),
							  .CLR(fma_multiplier_fifo_output_reg$CLR),
							  .D_OUT(fma_multiplier_fifo_output_reg$D_OUT),
							  .FULL_N(fma_multiplier_fifo_output_reg$FULL_N),
							  .EMPTY_N(fma_multiplier_fifo_output_reg$EMPTY_N));

  // submodule fma_multiplier_fifo_stage0_reg
  FIFO2 #(.width(32'd53),
	  .guarded(32'd1)) fma_multiplier_fifo_stage0_reg(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fma_multiplier_fifo_stage0_reg$D_IN),
							  .ENQ(fma_multiplier_fifo_stage0_reg$ENQ),
							  .DEQ(fma_multiplier_fifo_stage0_reg$DEQ),
							  .CLR(fma_multiplier_fifo_stage0_reg$CLR),
							  .D_OUT(fma_multiplier_fifo_stage0_reg$D_OUT),
							  .FULL_N(fma_multiplier_fifo_stage0_reg$FULL_N),
							  .EMPTY_N(fma_multiplier_fifo_stage0_reg$EMPTY_N));

  // submodule ftop_fToP_fifo_output_reg
  FIFO2 #(.width(32'd33),
	  .guarded(32'd1)) ftop_fToP_fifo_output_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ftop_fToP_fifo_output_reg$D_IN),
						     .ENQ(ftop_fToP_fifo_output_reg$ENQ),
						     .DEQ(ftop_fToP_fifo_output_reg$DEQ),
						     .CLR(ftop_fToP_fifo_output_reg$CLR),
						     .D_OUT(ftop_fToP_fifo_output_reg$D_OUT),
						     .FULL_N(ftop_fToP_fifo_output_reg$FULL_N),
						     .EMPTY_N(ftop_fToP_fifo_output_reg$EMPTY_N));

  // submodule ftop_fToP_fifo_stage0_reg
  FIFO2 #(.width(32'd39),
	  .guarded(32'd1)) ftop_fToP_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ftop_fToP_fifo_stage0_reg$D_IN),
						     .ENQ(ftop_fToP_fifo_stage0_reg$ENQ),
						     .DEQ(ftop_fToP_fifo_stage0_reg$DEQ),
						     .CLR(ftop_fToP_fifo_stage0_reg$CLR),
						     .D_OUT(ftop_fToP_fifo_stage0_reg$D_OUT),
						     .FULL_N(ftop_fToP_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(ftop_fToP_fifo_stage0_reg$EMPTY_N));

  // submodule ftop_ffO
  FIFO2 #(.width(32'd33), .guarded(32'd1)) ftop_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ftop_ffO$D_IN),
						    .ENQ(ftop_ffO$ENQ),
						    .DEQ(ftop_ffO$DEQ),
						    .CLR(ftop_ffO$CLR),
						    .D_OUT(ftop_ffO$D_OUT),
						    .FULL_N(ftop_ffO$FULL_N),
						    .EMPTY_N(ftop_ffO$EMPTY_N));

  // submodule need_normalize
  FIFO1 #(.width(32'd1), .guarded(32'd1)) need_normalize(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(need_normalize$D_IN),
							 .ENQ(need_normalize$ENQ),
							 .DEQ(need_normalize$DEQ),
							 .CLR(need_normalize$CLR),
							 .D_OUT(),
							 .FULL_N(),
							 .EMPTY_N());

  // submodule normalizer_fifo_output_reg
  FIFO2 #(.width(32'd28),
	  .guarded(32'd1)) normalizer_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_output_reg$D_IN),
						      .ENQ(normalizer_fifo_output_reg$ENQ),
						      .DEQ(normalizer_fifo_output_reg$DEQ),
						      .CLR(normalizer_fifo_output_reg$CLR),
						      .D_OUT(normalizer_fifo_output_reg$D_OUT),
						      .FULL_N(normalizer_fifo_output_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_output_reg$EMPTY_N));

  // submodule normalizer_fifo_stage0_reg
  FIFO2 #(.width(32'd50),
	  .guarded(32'd1)) normalizer_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage0_reg$D_IN),
						      .ENQ(normalizer_fifo_stage0_reg$ENQ),
						      .DEQ(normalizer_fifo_stage0_reg$DEQ),
						      .CLR(normalizer_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage1_reg
  FIFO2 #(.width(32'd54),
	  .guarded(32'd1)) normalizer_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage1_reg$D_IN),
						      .ENQ(normalizer_fifo_stage1_reg$ENQ),
						      .DEQ(normalizer_fifo_stage1_reg$DEQ),
						      .CLR(normalizer_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage2_reg
  FIFO2 #(.width(32'd28),
	  .guarded(32'd1)) normalizer_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage2_reg$D_IN),
						      .ENQ(normalizer_fifo_stage2_reg$ENQ),
						      .DEQ(normalizer_fifo_stage2_reg$DEQ),
						      .CLR(normalizer_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule opcode_norm
  FIFO1 #(.width(32'd3), .guarded(32'd1)) opcode_norm(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(opcode_norm$D_IN),
						      .ENQ(opcode_norm$ENQ),
						      .DEQ(opcode_norm$DEQ),
						      .CLR(opcode_norm$CLR),
						      .D_OUT(opcode_norm$D_OUT),
						      .FULL_N(opcode_norm$FULL_N),
						      .EMPTY_N(opcode_norm$EMPTY_N));

  // submodule opcode_out
  FIFO1 #(.width(32'd3), .guarded(32'd1)) opcode_out(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(opcode_out$D_IN),
						     .ENQ(opcode_out$ENQ),
						     .DEQ(opcode_out$DEQ),
						     .CLR(opcode_out$CLR),
						     .D_OUT(opcode_out$D_OUT),
						     .FULL_N(opcode_out$FULL_N),
						     .EMPTY_N(opcode_out$EMPTY_N));

  // submodule ptof_ffO
  FIFO2 #(.width(32'd35), .guarded(32'd1)) ptof_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ptof_ffO$D_IN),
						    .ENQ(ptof_ffO$ENQ),
						    .DEQ(ptof_ffO$DEQ),
						    .CLR(ptof_ffO$CLR),
						    .D_OUT(ptof_ffO$D_OUT),
						    .FULL_N(ptof_ffO$FULL_N),
						    .EMPTY_N(ptof_ffO$EMPTY_N));

  // submodule ptof_ptoF_fifo_output_reg
  FIFO2 #(.width(32'd35),
	  .guarded(32'd1)) ptof_ptoF_fifo_output_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ptof_ptoF_fifo_output_reg$D_IN),
						     .ENQ(ptof_ptoF_fifo_output_reg$ENQ),
						     .DEQ(ptof_ptoF_fifo_output_reg$DEQ),
						     .CLR(ptof_ptoF_fifo_output_reg$CLR),
						     .D_OUT(ptof_ptoF_fifo_output_reg$D_OUT),
						     .FULL_N(ptof_ptoF_fifo_output_reg$FULL_N),
						     .EMPTY_N(ptof_ptoF_fifo_output_reg$EMPTY_N));

  // submodule ptof_ptoF_fifo_stage0_reg
  FIFO2 #(.width(32'd42),
	  .guarded(32'd1)) ptof_ptoF_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ptof_ptoF_fifo_stage0_reg$D_IN),
						     .ENQ(ptof_ptoF_fifo_stage0_reg$ENQ),
						     .DEQ(ptof_ptoF_fifo_stage0_reg$DEQ),
						     .CLR(ptof_ptoF_fifo_stage0_reg$CLR),
						     .D_OUT(ptof_ptoF_fifo_stage0_reg$D_OUT),
						     .FULL_N(ptof_ptoF_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(ptof_ptoF_fifo_stage0_reg$EMPTY_N));

  // submodule ptoq_ffO
  FIFO20 #(.guarded(32'd1)) ptoq_ffO(.RST(RST_N),
				     .CLK(CLK),
				     .ENQ(ptoq_ffO$ENQ),
				     .DEQ(ptoq_ffO$DEQ),
				     .CLR(ptoq_ffO$CLR),
				     .FULL_N(ptoq_ffO$FULL_N),
				     .EMPTY_N(ptoq_ffO$EMPTY_N));

  // submodule ptoq_positToquire_fifo_output_reg
  FIFO20 #(.guarded(32'd1)) ptoq_positToquire_fifo_output_reg(.RST(RST_N),
							      .CLK(CLK),
							      .ENQ(ptoq_positToquire_fifo_output_reg$ENQ),
							      .DEQ(ptoq_positToquire_fifo_output_reg$DEQ),
							      .CLR(ptoq_positToquire_fifo_output_reg$CLR),
							      .FULL_N(ptoq_positToquire_fifo_output_reg$FULL_N),
							      .EMPTY_N(ptoq_positToquire_fifo_output_reg$EMPTY_N));

  // submodule ptoq_positToquire_fifo_stage0_reg
  FIFO2 #(.width(32'd30),
	  .guarded(32'd1)) ptoq_positToquire_fifo_stage0_reg(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ptoq_positToquire_fifo_stage0_reg$D_IN),
							     .ENQ(ptoq_positToquire_fifo_stage0_reg$ENQ),
							     .DEQ(ptoq_positToquire_fifo_stage0_reg$DEQ),
							     .CLR(ptoq_positToquire_fifo_stage0_reg$CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N());

  // submodule ptoq_positToquire_fifo_stage1_reg
  FIFO2 #(.width(32'd267),
	  .guarded(32'd1)) ptoq_positToquire_fifo_stage1_reg(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ptoq_positToquire_fifo_stage1_reg$D_IN),
							     .ENQ(ptoq_positToquire_fifo_stage1_reg$ENQ),
							     .DEQ(ptoq_positToquire_fifo_stage1_reg$DEQ),
							     .CLR(ptoq_positToquire_fifo_stage1_reg$CLR),
							     .D_OUT(ptoq_positToquire_fifo_stage1_reg$D_OUT),
							     .FULL_N(ptoq_positToquire_fifo_stage1_reg$FULL_N),
							     .EMPTY_N(ptoq_positToquire_fifo_stage1_reg$EMPTY_N));

  // submodule qtop_ffO
  FIFO2 #(.width(32'd33), .guarded(32'd1)) qtop_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(qtop_ffO$D_IN),
						    .ENQ(qtop_ffO$ENQ),
						    .DEQ(qtop_ffO$DEQ),
						    .CLR(qtop_ffO$CLR),
						    .D_OUT(qtop_ffO$D_OUT),
						    .FULL_N(qtop_ffO$FULL_N),
						    .EMPTY_N(qtop_ffO$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_output_reg
  FIFO2 #(.width(32'd33),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_output_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_output_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_output_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_output_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_output_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_output_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_output_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_output_reg$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_stage0_reg
  FIFO2 #(.width(32'd299),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_stage0_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_stage0_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_stage0_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_stage0_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_stage0_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_stage0_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_stage0_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_stage1_reg
  FIFO2 #(.width(32'd33),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_stage1_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_stage1_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_stage1_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_stage1_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_stage1_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_stage1_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_stage1_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N));

  // rule RL_extract_in
  assign CAN_FIRE_RL_extract_in =
	     ffI$EMPTY_N && !opcode_in_rv[3] &&
	     IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329 ;
  assign WILL_FIRE_RL_extract_in = CAN_FIRE_RL_extract_in ;

  // rule RL_rl_fma
  assign CAN_FIRE_RL_rl_fma =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     fma_multiplier_fifo_stage0_reg$FULL_N &&
	     opcode_out$FULL_N &&
	     (opcode_in_rv$port1__read[2:0] == 3'd0 ||
	      opcode_in_rv$port1__read[2:0] == 3'd2) &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_fma = CAN_FIRE_RL_rl_fma ;

  // rule RL_rl_ptof
  assign CAN_FIRE_RL_rl_ptof =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     opcode_out$FULL_N &&
	     ptof_ptoF_fifo_stage0_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd5 ;
  assign WILL_FIRE_RL_rl_ptof = CAN_FIRE_RL_rl_ptof ;

  // rule RL_rl_ftop
  assign CAN_FIRE_RL_rl_ftop =
	     opcode_in_rv$port1__read[3] && ffI_f_rv$port1__read[32] &&
	     ftop_fToP_fifo_stage0_reg$FULL_N &&
	     opcode_norm$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd4 ;
  assign WILL_FIRE_RL_rl_ftop = CAN_FIRE_RL_rl_ftop ;

  // rule RL_rl_ptoq
  assign CAN_FIRE_RL_rl_ptoq =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     opcode_out$FULL_N &&
	     ptoq_positToquire_fifo_stage1_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd7 &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_ptoq = CAN_FIRE_RL_rl_ptoq ;

  // rule RL_rl_qtop
  assign CAN_FIRE_RL_rl_qtop =
	     opcode_in_rv$port1__read[3] && opcode_norm$FULL_N &&
	     qtop_quireToPosit1_fifo_stage0_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd6 &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_qtop = CAN_FIRE_RL_rl_qtop ;

  // rule RL_rl_norm
  assign CAN_FIRE_RL_rl_norm =
	     opcode_out$FULL_N && opcode_norm$EMPTY_N &&
	     IF_opcode_norm_first__634_EQ_4_635_THEN_ftop_f_ETC___d1644 ;
  assign WILL_FIRE_RL_rl_norm =
	     CAN_FIRE_RL_rl_norm && !WILL_FIRE_RL_rl_ptoq &&
	     !WILL_FIRE_RL_rl_ptof &&
	     !WILL_FIRE_RL_rl_fma ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out =
	     opcode_out$EMPTY_N &&
	     IF_opcode_out_first__028_EQ_0_029_OR_opcode_ou_ETC___d2051 ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_fma_rl_connect1
  assign CAN_FIRE_RL_fma_rl_connect1 =
	     fma_multiplier_fifo_output_reg$EMPTY_N &&
	     fma_adder_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_rl_connect1 = CAN_FIRE_RL_fma_rl_connect1 ;

  // rule RL_fma_rl_out
  assign CAN_FIRE_RL_fma_rl_out =
	     fma_adder_fifo_output_reg$EMPTY_N && fma_ffO$FULL_N ;
  assign WILL_FIRE_RL_fma_rl_out = CAN_FIRE_RL_fma_rl_out ;

  // rule RL_fma_multiplier_stage_1
  assign CAN_FIRE_RL_fma_multiplier_stage_1 =
	     fma_multiplier_fifo_stage0_reg$EMPTY_N &&
	     fma_multiplier_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_multiplier_stage_1 =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;

  // rule RL_fma_adder_stage_1
  assign CAN_FIRE_RL_fma_adder_stage_1 =
	     fma_adder_fifo_stage0_reg$EMPTY_N &&
	     fma_adder_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_adder_stage_1 = CAN_FIRE_RL_fma_adder_stage_1 ;

  // rule RL_ptoq_rl_out
  assign CAN_FIRE_RL_ptoq_rl_out =
	     ptoq_positToquire_fifo_output_reg$EMPTY_N && ptoq_ffO$FULL_N ;
  assign WILL_FIRE_RL_ptoq_rl_out = CAN_FIRE_RL_ptoq_rl_out ;

  // rule RL_ptoq_positToquire_stage_2
  assign CAN_FIRE_RL_ptoq_positToquire_stage_2 =
	     ptoq_positToquire_fifo_stage1_reg$EMPTY_N &&
	     ptoq_positToquire_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ptoq_positToquire_stage_2 =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;

  // rule RL_qtop_rl_out
  assign CAN_FIRE_RL_qtop_rl_out =
	     qtop_quireToPosit1_fifo_output_reg$EMPTY_N && qtop_ffO$FULL_N ;
  assign WILL_FIRE_RL_qtop_rl_out = CAN_FIRE_RL_qtop_rl_out ;

  // rule RL_qtop_quireToPosit1_stage_1
  assign CAN_FIRE_RL_qtop_quireToPosit1_stage_1 =
	     qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N &&
	     qtop_quireToPosit1_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_qtop_quireToPosit1_stage_1 =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;

  // rule RL_qtop_quireToPosit1_stage_2
  assign CAN_FIRE_RL_qtop_quireToPosit1_stage_2 =
	     qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N &&
	     qtop_quireToPosit1_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_qtop_quireToPosit1_stage_2 =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;

  // rule RL_ftop_rl_out
  assign CAN_FIRE_RL_ftop_rl_out =
	     ftop_fToP_fifo_output_reg$EMPTY_N && ftop_ffO$FULL_N ;
  assign WILL_FIRE_RL_ftop_rl_out = CAN_FIRE_RL_ftop_rl_out ;

  // rule RL_ftop_fToP_stage_1
  assign CAN_FIRE_RL_ftop_fToP_stage_1 =
	     ftop_fToP_fifo_stage0_reg$EMPTY_N &&
	     ftop_fToP_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ftop_fToP_stage_1 = CAN_FIRE_RL_ftop_fToP_stage_1 ;

  // rule RL_ptof_rl_out
  assign CAN_FIRE_RL_ptof_rl_out =
	     ptof_ptoF_fifo_output_reg$EMPTY_N && ptof_ffO$FULL_N ;
  assign WILL_FIRE_RL_ptof_rl_out = CAN_FIRE_RL_ptof_rl_out ;

  // rule RL_ptof_ptoF_stage_2
  assign CAN_FIRE_RL_ptof_ptoF_stage_2 =
	     ptof_ptoF_fifo_stage0_reg$EMPTY_N &&
	     ptof_ptoF_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ptof_ptoF_stage_2 = CAN_FIRE_RL_ptof_ptoF_stage_2 ;

  // inputs to muxes for submodule ports
  assign MUX_opcode_out$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptoq || WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fma ;
  assign MUX_rg_quire_busy$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd7) ;
  assign MUX_rg_quire_busy$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 ;
  assign MUX_rg_quire$write_1__VAL_1 =
	     (ptoq_positToquire_fifo_stage1_reg$D_OUT[1:0] == 2'd2) ?
	       288'd0 :
	       twos_complement_carry_int_frac__h28908 ;
  assign MUX_rg_quire$write_1__VAL_2 =
	     (x__h1250 | y__h1251) ?
	       288'h800000000000000000000000000000000000000000000000000000000000000000000000 :
	       IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d110 ;

  // inlined wires
  assign opcode_in_rv$port0__write_1 = { 1'd1, ffI$D_OUT[2:0] } ;
  assign opcode_in_rv$port1__read =
	     CAN_FIRE_RL_extract_in ?
	       opcode_in_rv$port0__write_1 :
	       opcode_in_rv ;
  assign opcode_in_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_qtop || WILL_FIRE_RL_rl_ptoq ||
	     WILL_FIRE_RL_rl_ftop ||
	     WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fma ;
  assign opcode_in_rv$port2__read =
	     opcode_in_rv$EN_port1__write ? 4'd2 : opcode_in_rv$port1__read ;
  assign ffI_f_rv$EN_port0__write =
	     WILL_FIRE_RL_extract_in && ffI$D_OUT[2:0] == 3'd4 ;
  assign ffI_f_rv$port0__write_1 = { 1'd1, ffI$D_OUT[103:72] } ;
  assign ffI_f_rv$port1__read =
	     ffI_f_rv$EN_port0__write ? ffI_f_rv$port0__write_1 : ffI_f_rv ;
  assign ffI_f_rv$port2__read =
	     CAN_FIRE_RL_rl_ftop ? 33'h0AAAAAAAA : ffI_f_rv$port1__read ;

  // register ffI_f_rv
  assign ffI_f_rv$D_IN = ffI_f_rv$port2__read ;
  assign ffI_f_rv$EN = 1'b1 ;

  // register fma_check_quire
  assign fma_check_quire$D_IN = 1'b0 ;
  assign fma_check_quire$EN = 1'b0 ;

  // register opcode_in_rv
  assign opcode_in_rv$D_IN = opcode_in_rv$port2__read ;
  assign opcode_in_rv$EN = 1'b1 ;

  // register rg_quire
  assign rg_quire$D_IN =
	     WILL_FIRE_RL_ptoq_positToquire_stage_2 ?
	       MUX_rg_quire$write_1__VAL_1 :
	       MUX_rg_quire$write_1__VAL_2 ;
  assign rg_quire$EN =
	     WILL_FIRE_RL_fma_adder_stage_1 ||
	     WILL_FIRE_RL_ptoq_positToquire_stage_2 ;

  // register rg_quire_busy
  assign rg_quire_busy$D_IN =
	     !MUX_rg_quire_busy$write_1__SEL_1 &&
	     !MUX_rg_quire_busy$write_1__SEL_2 ;
  assign rg_quire_busy$EN =
	     WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 ||
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd7) ||
	     WILL_FIRE_RL_rl_qtop ||
	     WILL_FIRE_RL_rl_ptoq ||
	     WILL_FIRE_RL_rl_fma ;

  // submodule extracter1_fifo_output_reg
  assign extracter1_fifo_output_reg$D_IN =
	     { (ffI$D_OUT[94:72] == 23'd0 && !ffI$D_OUT[95]) ?
		 2'd2 :
		 ((ffI$D_OUT[94:72] == 23'd0 && ffI$D_OUT[95]) ? 2'd1 : 2'd0),
	       ffI$D_OUT[95],
	       IF_ffI_first__06_BITS_94_TO_72_38_EQ_0_39_AND__ETC___d597 } ;
  assign extracter1_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_extract_in &&
	     (ffI$D_OUT[2:0] == 3'd1 || ffI$D_OUT[2:0] == 3'd3 ||
	      ffI$D_OUT[2:0] == 3'd2 ||
	      ffI$D_OUT[2:0] == 3'd0 ||
	      ffI$D_OUT[2:0] == 3'd5 ||
	      ffI$D_OUT[2:0] == 3'd7) ;
  assign extracter1_fifo_output_reg$DEQ = MUX_opcode_out$enq_1__SEL_1 ;
  assign extracter1_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage0_reg
  assign extracter1_fifo_stage0_reg$D_IN = 26'h0 ;
  assign extracter1_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage1_reg
  assign extracter1_fifo_stage1_reg$D_IN = 35'h0 ;
  assign extracter1_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage2_reg
  assign extracter1_fifo_stage2_reg$D_IN = 32'h0 ;
  assign extracter1_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_output_reg
  assign extracter2_fifo_output_reg$D_IN =
	     { (IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603[22:0] ==
		23'd0 &&
		!IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603[23]) ?
		 2'd2 :
		 ((IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603[22:0] ==
		   23'd0 &&
		   IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603[23]) ?
		    2'd1 :
		    2'd0),
	       IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603[23],
	       IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR__ETC___d863 } ;
  assign extracter2_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_extract_in &&
	     (ffI$D_OUT[2:0] == 3'd1 || ffI$D_OUT[2:0] == 3'd3 ||
	      ffI$D_OUT[2:0] == 3'd2 ||
	      ffI$D_OUT[2:0] == 3'd0) ;
  assign extracter2_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_fma ;
  assign extracter2_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage0_reg
  assign extracter2_fifo_stage0_reg$D_IN = 26'h0 ;
  assign extracter2_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage1_reg
  assign extracter2_fifo_stage1_reg$D_IN = 35'h0 ;
  assign extracter2_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage2_reg
  assign extracter2_fifo_stage2_reg$D_IN = 32'h0 ;
  assign extracter2_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule ffI
  assign ffI$D_IN =
	     { CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q32,
	       server_core_request_put[135:72],
	       CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q33,
	       server_core_request_put[69:0] } ;
  assign ffI$ENQ = EN_server_core_request_put ;
  assign ffI$DEQ = CAN_FIRE_RL_extract_in ;
  assign ffI$CLR = 1'b0 ;

  // submodule ffO
  always@(opcode_out$D_OUT or
	  normalizer_fifo_output_reg$D_OUT or ptof_ffO$D_OUT)
  begin
    case (opcode_out$D_OUT)
      3'd0, 3'd2, 3'd7: ffO$D_IN = 71'h555555555540000000;
      3'd5:
	  ffO$D_IN =
	      { 34'h1AAAAAAAA,
		ptof_ffO$D_OUT[34:3],
		2'd0,
		ptof_ffO$D_OUT[2:1] == 2'd1,
		ptof_ffO$D_OUT[2:1] == 2'd2 && ptof_ffO$D_OUT[0],
		ptof_ffO$D_OUT[0] };
      default: ffO$D_IN =
		   { 41'h12AAAAAAAAA,
		     normalizer_fifo_output_reg$D_OUT[27:3],
		     normalizer_fifo_output_reg$D_OUT[27],
		     1'd0,
		     normalizer_fifo_output_reg$D_OUT[2:1] == 2'd1,
		     normalizer_fifo_output_reg$D_OUT[2:1] == 2'd2 &&
		     normalizer_fifo_output_reg$D_OUT[0],
		     normalizer_fifo_output_reg$D_OUT[0] };
    endcase
  end
  assign ffO$ENQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd7 ||
	      opcode_out$D_OUT == 3'd5 ||
	      opcode_out$D_OUT == 3'd4 ||
	      opcode_out$D_OUT == 3'd6) ;
  assign ffO$DEQ = EN_server_core_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule fma_adder_fifo_output_reg
  assign fma_adder_fifo_output_reg$ENQ = CAN_FIRE_RL_fma_adder_stage_1 ;
  assign fma_adder_fifo_output_reg$DEQ = CAN_FIRE_RL_fma_rl_out ;
  assign fma_adder_fifo_output_reg$CLR = 1'b0 ;

  // submodule fma_adder_fifo_stage0_reg
  assign fma_adder_fifo_stage0_reg$D_IN =
	     { IF_NOT_rg_quire_15_BIT_287_16_17_AND_NOT_fma_m_ETC___d130,
	       x__h28363,
	       x__h28368,
	       (rg_quire == 288'd0) ? 2'd2 : 2'd0,
	       fma_multiplier_fifo_output_reg$D_OUT[292:290] } ;
  assign fma_adder_fifo_stage0_reg$ENQ = CAN_FIRE_RL_fma_rl_connect1 ;
  assign fma_adder_fifo_stage0_reg$DEQ = CAN_FIRE_RL_fma_adder_stage_1 ;
  assign fma_adder_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule fma_ffO
  assign fma_ffO$ENQ = CAN_FIRE_RL_fma_rl_out ;
  assign fma_ffO$DEQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2) ;
  assign fma_ffO$CLR = 1'b0 ;

  // submodule fma_multiplier_fifo_output_reg
  assign fma_multiplier_fifo_output_reg$D_IN =
	     { (twos_complement_carry_int_frac__h437 == 288'd0 &&
		fma_multiplier_fifo_stage0_reg$D_OUT[51:50] == 2'd0) ?
		 2'd2 :
		 fma_multiplier_fifo_stage0_reg$D_OUT[51:50],
	       fma_multiplier_fifo_stage0_reg$D_OUT[52],
	       twos_complement_carry_int_frac__h437,
	       x__h832,
	       x__h876 } ;
  assign fma_multiplier_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;
  assign fma_multiplier_fifo_output_reg$DEQ = CAN_FIRE_RL_fma_rl_connect1 ;
  assign fma_multiplier_fifo_output_reg$CLR = 1'b0 ;

  // submodule fma_multiplier_fifo_stage0_reg
  assign fma_multiplier_fifo_stage0_reg$D_IN =
	     { x__h58169,
	       (extracter1_fifo_output_reg$D_OUT[29:28] == 2'd2 &&
		extracter2_fifo_output_reg$D_OUT[29:28] == 2'd2) ?
		 2'd2 :
		 ((extracter1_fifo_output_reg$D_OUT[29:28] == 2'd1 ||
		   extracter2_fifo_output_reg$D_OUT[29:28] == 2'd1) ?
		    2'd1 :
		    2'd0),
	       extracter1_fifo_output_reg_first__09_BIT_27_24_ETC___d946 } ;
  assign fma_multiplier_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_fma ;
  assign fma_multiplier_fifo_stage0_reg$DEQ =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;
  assign fma_multiplier_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ftop_fToP_fifo_output_reg
  assign ftop_fToP_fifo_output_reg$D_IN =
	     { ftop_fToP_fifo_stage0_reg$D_OUT[38:27],
	       x_frac__h30468,
	       x__h30594,
	       x__h30671 } ;
  assign ftop_fToP_fifo_output_reg$ENQ = CAN_FIRE_RL_ftop_fToP_stage_1 ;
  assign ftop_fToP_fifo_output_reg$DEQ = CAN_FIRE_RL_ftop_rl_out ;
  assign ftop_fToP_fifo_output_reg$CLR = 1'b0 ;

  // submodule ftop_fToP_fifo_stage0_reg
  assign ftop_fToP_fifo_stage0_reg$D_IN =
	     { ffI_f_rv$port1__read[31],
	       (ffI_f_rv$port1__read[30:23] == 8'd255 &&
		ffI_f_rv$port1__read[22:0] == 23'd0) ?
		 2'd1 :
		 ((ffI_f_rv$port1__read[30:23] == 8'd0 &&
		   ffI_f_rv$port1__read[22:0] == 23'd0) ?
		    2'd2 :
		    2'd0),
	       x__h59499,
	       IF_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_T_ETC___d999,
	       ffI_f_rv$port1__read[22:4],
	       IF_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_T_ETC___d1010,
	       ffI_f_rv$port1__read[3],
	       x__h59670 } ;
  assign ftop_fToP_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_ftop ;
  assign ftop_fToP_fifo_stage0_reg$DEQ = CAN_FIRE_RL_ftop_fToP_stage_1 ;
  assign ftop_fToP_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ftop_ffO
  assign ftop_ffO$D_IN = ftop_fToP_fifo_output_reg$D_OUT ;
  assign ftop_ffO$ENQ = CAN_FIRE_RL_ftop_rl_out ;
  assign ftop_ffO$DEQ = WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 ;
  assign ftop_ffO$CLR = 1'b0 ;

  // submodule need_normalize
  assign need_normalize$D_IN = 1'b0 ;
  assign need_normalize$ENQ = 1'b0 ;
  assign need_normalize$DEQ = 1'b0 ;
  assign need_normalize$CLR = 1'b0 ;

  // submodule normalizer_fifo_output_reg
  assign normalizer_fifo_output_reg$D_IN =
	     (opcode_norm$D_OUT == 3'd4) ?
	       { ftop_ffO$D_OUT[29],
		 output_regf_out_posit__h109296,
		 ftop_ffO$D_OUT[31:30],
		 flag_prev_truncate__h109274 - _theResult____h109275 ||
		 a__h109312 == 23'd0 &&
		 NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1808 } :
	       { qtop_ffO$D_OUT[29],
		 output_regf_out_posit__h113792,
		 qtop_ffO$D_OUT[31:30],
		 flag_prev_truncate__h113774 - _theResult____h113775 ||
		 a__h113808 == 23'd0 &&
		 NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1984 } ;
  assign normalizer_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_rl_norm &&
	     (opcode_norm$D_OUT == 3'd4 || opcode_norm$D_OUT == 3'd6) ;
  assign normalizer_fifo_output_reg$DEQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd4 || opcode_out$D_OUT == 3'd6) ;
  assign normalizer_fifo_output_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage0_reg
  assign normalizer_fifo_stage0_reg$D_IN = 50'h0 ;
  assign normalizer_fifo_stage0_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage1_reg
  assign normalizer_fifo_stage1_reg$D_IN = 54'h0 ;
  assign normalizer_fifo_stage1_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage2_reg
  assign normalizer_fifo_stage2_reg$D_IN = 28'h0 ;
  assign normalizer_fifo_stage2_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule opcode_norm
  assign opcode_norm$D_IN = opcode_in_rv$port1__read[2:0] ;
  assign opcode_norm$ENQ = WILL_FIRE_RL_rl_qtop || WILL_FIRE_RL_rl_ftop ;
  assign opcode_norm$DEQ = WILL_FIRE_RL_rl_norm ;
  assign opcode_norm$CLR = 1'b0 ;

  // submodule opcode_out
  assign opcode_out$D_IN =
	     MUX_opcode_out$enq_1__SEL_1 ?
	       opcode_in_rv$port1__read[2:0] :
	       opcode_norm$D_OUT ;
  assign opcode_out$ENQ =
	     WILL_FIRE_RL_rl_ptoq || WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fma ||
	     WILL_FIRE_RL_rl_norm ;
  assign opcode_out$DEQ = CAN_FIRE_RL_rl_out ;
  assign opcode_out$CLR = 1'b0 ;

  // submodule ptof_ffO
  assign ptof_ffO$D_IN = ptof_ptoF_fifo_output_reg$D_OUT ;
  assign ptof_ffO$ENQ = CAN_FIRE_RL_ptof_rl_out ;
  assign ptof_ffO$DEQ = WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd5 ;
  assign ptof_ffO$CLR = 1'b0 ;

  // submodule ptof_ptoF_fifo_output_reg
  assign ptof_ptoF_fifo_output_reg$D_IN =
	     { float_no__h31224,
	       (ptof_ptoF_fifo_stage0_reg$D_OUT[40:39] == 2'd0) ?
		 CASE_float_no1224_0_2_4286578688_1_0__q34 :
		 ptof_ptoF_fifo_stage0_reg$D_OUT[40:39],
	       add_round__h31222 } ;
  assign ptof_ptoF_fifo_output_reg$ENQ = CAN_FIRE_RL_ptof_ptoF_stage_2 ;
  assign ptof_ptoF_fifo_output_reg$DEQ = CAN_FIRE_RL_ptof_rl_out ;
  assign ptof_ptoF_fifo_output_reg$CLR = 1'b0 ;

  // submodule ptof_ptoF_fifo_stage0_reg
  assign ptof_ptoF_fifo_stage0_reg$D_IN =
	     { extracter1_fifo_output_reg$D_OUT[27],
	       extracter1_fifo_output_reg$D_OUT[29:28],
	       IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC___d958,
	       stage0_regf_frac__h58910,
	       IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC___d969,
	       2'd1 } ;
  assign ptof_ptoF_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_ptof ;
  assign ptof_ptoF_fifo_stage0_reg$DEQ = CAN_FIRE_RL_ptof_ptoF_stage_2 ;
  assign ptof_ptoF_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ptoq_ffO
  assign ptoq_ffO$ENQ = CAN_FIRE_RL_ptoq_rl_out ;
  assign ptoq_ffO$DEQ = WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd7 ;
  assign ptoq_ffO$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_output_reg
  assign ptoq_positToquire_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;
  assign ptoq_positToquire_fifo_output_reg$DEQ = CAN_FIRE_RL_ptoq_rl_out ;
  assign ptoq_positToquire_fifo_output_reg$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_stage0_reg
  assign ptoq_positToquire_fifo_stage0_reg$D_IN = 30'h0 ;
  assign ptoq_positToquire_fifo_stage0_reg$ENQ = 1'b0 ;
  assign ptoq_positToquire_fifo_stage0_reg$DEQ = 1'b0 ;
  assign ptoq_positToquire_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_stage1_reg
  assign ptoq_positToquire_fifo_stage1_reg$D_IN =
	     { extracter1_fifo_output_reg$D_OUT[27],
	       int_frac__h59846,
	       extracter1_fifo_output_reg$D_OUT[29:28] } ;
  assign ptoq_positToquire_fifo_stage1_reg$ENQ = CAN_FIRE_RL_rl_ptoq ;
  assign ptoq_positToquire_fifo_stage1_reg$DEQ =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;
  assign ptoq_positToquire_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule qtop_ffO
  assign qtop_ffO$D_IN = qtop_quireToPosit1_fifo_output_reg$D_OUT ;
  assign qtop_ffO$ENQ = CAN_FIRE_RL_qtop_rl_out ;
  assign qtop_ffO$DEQ = MUX_rg_quire_busy$write_1__SEL_2 ;
  assign qtop_ffO$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_output_reg
  assign qtop_quireToPosit1_fifo_output_reg$D_IN =
	     qtop_quireToPosit1_fifo_stage1_reg$D_OUT ;
  assign qtop_quireToPosit1_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;
  assign qtop_quireToPosit1_fifo_output_reg$DEQ = CAN_FIRE_RL_qtop_rl_out ;
  assign qtop_quireToPosit1_fifo_output_reg$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_stage0_reg
  assign qtop_quireToPosit1_fifo_stage0_reg$D_IN =
	     { rg_quire[287],
	       (!rg_quire[287] && rg_quire[286:0] == 287'd0) ? 2'd2 : 2'd0,
	       rg_quire_15_BIT_287_16_AND_rg_quire_15_BITS_28_ETC___d1631 } ;
  assign qtop_quireToPosit1_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_qtop ;
  assign qtop_quireToPosit1_fifo_stage0_reg$DEQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;
  assign qtop_quireToPosit1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_stage1_reg
  assign qtop_quireToPosit1_fifo_stage1_reg$D_IN =
	     { qtop_quireToPosit1_fifo_stage0_reg$D_OUT[298:287],
	       stage1_regf_frac__h29529,
	       x__h29851,
	       x__h29894 } ;
  assign qtop_quireToPosit1_fifo_stage1_reg$ENQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;
  assign qtop_quireToPosit1_fifo_stage1_reg$DEQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;
  assign qtop_quireToPosit1_fifo_stage1_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_rg_quire_15_BIT_287_16_THEN__ETC___d1625 =
	     (_0_CONCAT_IF_IF_rg_quire_15_BIT_287_16_THEN_0_M_ETC___d1620[9] &&
	      _155_MINUS_0_CONCAT_IF_IF_rg_quire_15_BIT_287_1_ETC___d1622[9]) ?
	       10'd511 :
	       _155_MINUS_0_CONCAT_IF_IF_rg_quire_15_BIT_287_1_ETC___d1622 ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_T_ETC___d1010 =
	     _0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d996 ?
	       IF_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_T_ETC__q30[5:0] :
	       (_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d997 ?
		  6'd0 :
		  IF_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_T_ETC__q31[5:0]) ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_T_ETC___d999 =
	     _0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d996 ?
	       8'd168 :
	       (_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d997 ?
		  _0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q29[7:0] :
		  8'd88) ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_T_ETC__q30 =
	     ((_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d1001 ^
	       8'h80) <=
	      8'd97) ?
	       8'd225 :
	       _0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d1001 ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_T_ETC__q31 =
	     ((_0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d1005 ^
	       8'h80) <=
	      8'd159) ?
	       _0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d1005 :
	       8'd31 ;
  assign IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653__ETC___d1687 =
	     _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1673 ?
	       5'd0 :
	       _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1672 -
	       5'd2 ;
  assign IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829__ETC___d1863 =
	     _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1849 ?
	       5'd0 :
	       _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1848 -
	       5'd2 ;
  assign IF_IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_6_ETC___d1747 =
	     (shift_new0__h109265 == 3'd0) ?
	       !ftop_ffO$D_OUT[1] :
	       !ftop_ffO_first__648_BITS_20_TO_2_703_BIT_IF_22_ETC___d1721 ;
  assign IF_IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_8_ETC___d1923 =
	     (shift_new0__h113765 == 3'd0) ?
	       !qtop_ffO$D_OUT[1] :
	       !qtop_ffO_first__824_BITS_20_TO_2_879_BIT_IF_22_ETC___d1897 ;
  assign IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d807 =
	     new_inp__h41914[22] ?
	       ((!INV_new_inp1914__q11[22] && !INV_new_inp1914__q11[21] &&
		 !INV_new_inp1914__q11[20] &&
		 !INV_new_inp1914__q11[19] &&
		 !INV_new_inp1914__q11[18] &&
		 !INV_new_inp1914__q11[17] &&
		 !INV_new_inp1914__q11[16] &&
		 !INV_new_inp1914__q11[15] &&
		 !INV_new_inp1914__q11[14] &&
		 !INV_new_inp1914__q11[13] &&
		 !INV_new_inp1914__q11[12] &&
		 !INV_new_inp1914__q11[11] &&
		 !INV_new_inp1914__q11[10] &&
		 !INV_new_inp1914__q11[9] &&
		 !INV_new_inp1914__q11[8] &&
		 !INV_new_inp1914__q11[7] &&
		 !INV_new_inp1914__q11[6] &&
		 !INV_new_inp1914__q11[5] &&
		 !INV_new_inp1914__q11[4] &&
		 !INV_new_inp1914__q11[3] &&
		 !INV_new_inp1914__q11[2] &&
		 !INV_new_inp1914__q11[1] &&
		 !INV_new_inp1914__q11[0]) ?
		  5'd23 :
		  5'd22) -
	       x__h42696 :
	       ((!new_inp__h41914[21] && !new_inp__h41914[20] &&
		 !new_inp__h41914[19] &&
		 !new_inp__h41914[18] &&
		 !new_inp__h41914[17] &&
		 !new_inp__h41914[16] &&
		 !new_inp__h41914[15] &&
		 !new_inp__h41914[14] &&
		 !new_inp__h41914[13] &&
		 !new_inp__h41914[12] &&
		 !new_inp__h41914[11] &&
		 !new_inp__h41914[10] &&
		 !new_inp__h41914[9] &&
		 !new_inp__h41914[8] &&
		 !new_inp__h41914[7] &&
		 !new_inp__h41914[6] &&
		 !new_inp__h41914[5] &&
		 !new_inp__h41914[4] &&
		 !new_inp__h41914[3] &&
		 !new_inp__h41914[2] &&
		 !new_inp__h41914[1] &&
		 !new_inp__h41914[0]) ?
		  5'd23 :
		  5'd22) -
	       x__h45954 ;
  assign IF_IF_NOT_IF_ftop_ffO_first__648_BIT_28_653_TH_ETC___d1775 =
	     (b__h109545[22] &&
	      !IF_NOT_IF_ftop_ffO_first__648_BIT_28_653_THEN__ETC___d1771[22]) ?
	       23'd8388607 :
	       IF_NOT_IF_ftop_ffO_first__648_BIT_28_653_THEN__ETC___d1771 ;
  assign IF_IF_NOT_IF_qtop_ffO_first__824_BIT_28_829_TH_ETC___d1951 =
	     (b__h114041[22] &&
	      !IF_NOT_IF_qtop_ffO_first__824_BIT_28_829_THEN__ETC___d1947[22]) ?
	       23'd8388607 :
	       IF_NOT_IF_qtop_ffO_first__824_BIT_28_829_THEN__ETC___d1947 ;
  assign IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR__ETC___d863 =
	     (IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603[22:0] ==
	      23'd0 &&
	      !IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603[23]) ?
	       27'd0 :
	       { SEXT_IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ__ETC___d714 +
		 { 6'd0, expo__h41921 },
		 frac__h41922 } ;
  assign IF_IF_ffI_first__06_BIT_95_40_THEN_0_MINUS_ffI_ETC___d541 =
	     new_inp__h34106[22] ?
	       ((!INV_new_inp4106__q2[22] && !INV_new_inp4106__q2[21] &&
		 !INV_new_inp4106__q2[20] &&
		 !INV_new_inp4106__q2[19] &&
		 !INV_new_inp4106__q2[18] &&
		 !INV_new_inp4106__q2[17] &&
		 !INV_new_inp4106__q2[16] &&
		 !INV_new_inp4106__q2[15] &&
		 !INV_new_inp4106__q2[14] &&
		 !INV_new_inp4106__q2[13] &&
		 !INV_new_inp4106__q2[12] &&
		 !INV_new_inp4106__q2[11] &&
		 !INV_new_inp4106__q2[10] &&
		 !INV_new_inp4106__q2[9] &&
		 !INV_new_inp4106__q2[8] &&
		 !INV_new_inp4106__q2[7] &&
		 !INV_new_inp4106__q2[6] &&
		 !INV_new_inp4106__q2[5] &&
		 !INV_new_inp4106__q2[4] &&
		 !INV_new_inp4106__q2[3] &&
		 !INV_new_inp4106__q2[2] &&
		 !INV_new_inp4106__q2[1] &&
		 !INV_new_inp4106__q2[0]) ?
		  5'd23 :
		  5'd22) -
	       x__h34817 :
	       ((!new_inp__h34106[21] && !new_inp__h34106[20] &&
		 !new_inp__h34106[19] &&
		 !new_inp__h34106[18] &&
		 !new_inp__h34106[17] &&
		 !new_inp__h34106[16] &&
		 !new_inp__h34106[15] &&
		 !new_inp__h34106[14] &&
		 !new_inp__h34106[13] &&
		 !new_inp__h34106[12] &&
		 !new_inp__h34106[11] &&
		 !new_inp__h34106[10] &&
		 !new_inp__h34106[9] &&
		 !new_inp__h34106[8] &&
		 !new_inp__h34106[7] &&
		 !new_inp__h34106[6] &&
		 !new_inp__h34106[5] &&
		 !new_inp__h34106[4] &&
		 !new_inp__h34106[3] &&
		 !new_inp__h34106[2] &&
		 !new_inp__h34106[1] &&
		 !new_inp__h34106[0]) ?
		  5'd23 :
		  5'd22) -
	       x__h38075 ;
  assign IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d110 =
	     (all_bits_0__h1207 & y__h15806 &&
	      fma_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd0 &&
	      fma_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd0) ?
	       288'd0 :
	       x__h15830 ;
  assign IF_NOT_IF_ftop_ffO_first__648_BIT_28_653_THEN__ETC___d1771 =
	     b__h109545 + b__h112637 ;
  assign IF_NOT_IF_qtop_ffO_first__824_BIT_28_829_THEN__ETC___d1947 =
	     b__h114041 + b__h117132 ;
  assign IF_NOT_rg_quire_15_BIT_287_16_17_AND_NOT_fma_m_ETC___d130 =
	     (!rg_quire[287] && !fma_multiplier_fifo_output_reg$D_OUT[289] &&
	      rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123[287]) ?
	       288'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       ((rg_quire[287] && fma_multiplier_fifo_output_reg$D_OUT[289] &&
		 !rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123[287]) ?
		  288'h800000000000000000000000000000000000000000000000000000000000000000000000 :
		  rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123) ;
  assign IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12 =
	     (SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8[9] ?
		-SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8 :
		SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8) -
	     10'd132 ;
  assign IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15 =
	     (IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8[8:0] ^
	      9'h100) <=
	     9'd256 ;
  assign IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8 =
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12 +
	     10'd38 ;
  assign IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC___d928 =
	     (extracter1_fifo_output_reg$D_OUT[29:28] == 2'd2) ?
	       2'b01 :
	       ((extracter2_fifo_output_reg$D_OUT[29:28] == 2'd2) ?
		  extracter2_fifo_output_reg$D_OUT[29:28] :
		  2'b11) ;
  assign IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC___d958 =
	     extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d955 ?
	       8'd129 :
	       (extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d956 ?
		  extracter1_fifo_output_reg$D_OUT[26:19] :
		  8'd127) ;
  assign IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC___d969 =
	     extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d955 ?
	       IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC__q26[5:0] :
	       (extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d956 ?
		  6'd0 :
		  IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC__q27[5:0]) ;
  assign IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC__q26 =
	     ((extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d960 ^
	       8'h80) <=
	      8'd97) ?
	       8'd225 :
	       extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d960 ;
  assign IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC__q27 =
	     ((extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d964 ^
	       8'h80) <=
	      8'd159) ?
	       extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d964 :
	       8'd31 ;
  assign IF_ffI_first__06_BITS_94_TO_72_38_EQ_0_39_AND__ETC___d597 =
	     (ffI$D_OUT[94:72] == 23'd0 && !ffI$D_OUT[95]) ?
	       27'd0 :
	       { SEXT_IF_IF_ffI_first__06_BIT_95_40_THEN_0_MINU_ETC___d448 +
		 { 6'd0, expo__h34113 },
		 frac__h34114 } ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d27 =
	     (fma_multiplier_fifo_stage0_reg$D_OUT[48] &&
	      !IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15 ||
	      (IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12 +
	       10'd2 ^
	       10'h200) <=
	      10'd512) ?
	       23'd0 :
	       x__h670[22:0] ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d36 =
	     (fma_multiplier_fifo_stage0_reg$D_OUT[48] &&
	      !IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15) ?
	       f_new___1__h710 :
	       f_new__h657 ;
  assign IF_ftop_fToP_fifo_stage0_reg_first__06_BIT_7_0_ETC___d213 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[7] ?
	       -ftop_fToP_fifo_stage0_reg$D_OUT[7:2] :
	       ftop_fToP_fifo_stage0_reg$D_OUT[7:2] ;
  assign IF_ftop_ffO_first__648_BIT_27_659_AND_NOT_ftop_ETC___d1665 =
	     (ftop_ffO$D_OUT[27] &&
	      !ftop_ffO_first__648_BITS_27_TO_23_660_PLUS_1___d1661[4]) ?
	       5'd31 :
	       ftop_ffO_first__648_BITS_27_TO_23_660_PLUS_1___d1661 ;
  assign IF_ftop_ffO_first__648_BIT_28_653_THEN_1_SL_22_ETC___d1694 =
	     b__h109783 + b__h110640 ;
  assign IF_new_inp1914_BIT_22_THEN_b2686_ELSE_b2688__q13 =
	     new_inp__h41914[22] ? b__h42686 : b__h42688 ;
  assign IF_new_inp4106_BIT_22_THEN_b4807_ELSE_b4809__q15 =
	     new_inp__h34106[22] ? b__h34807 : b__h34809 ;
  assign IF_opcode_norm_first__634_EQ_4_635_THEN_ftop_f_ETC___d1644 =
	     (opcode_norm$D_OUT == 3'd4) ?
	       ftop_ffO$EMPTY_N && normalizer_fifo_output_reg$FULL_N :
	       opcode_norm$D_OUT != 3'd6 ||
	       qtop_ffO$EMPTY_N && normalizer_fifo_output_reg$FULL_N ;
  assign IF_ptof_ptoF_fifo_stage0_reg_first__45_BIT_7_5_ETC___d259 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       -ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] ;
  assign IF_qtop_ffO_first__824_BIT_27_835_AND_NOT_qtop_ETC___d1841 =
	     (qtop_ffO$D_OUT[27] &&
	      !qtop_ffO_first__824_BITS_27_TO_23_836_PLUS_1___d1837[4]) ?
	       5'd31 :
	       qtop_ffO_first__824_BITS_27_TO_23_836_PLUS_1___d1837 ;
  assign IF_qtop_ffO_first__824_BIT_28_829_THEN_1_SL_22_ETC___d1870 =
	     b__h114279 + b__h115135 ;
  assign IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173 =
	     qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166 ?
	       carry_int_frac_shifted__h29747[286:267] :
	       20'd1048575 ;
  assign INV_new_inp1914__q11 = ~new_inp__h41914 ;
  assign INV_new_inp4106__q2 = ~new_inp__h34106 ;
  assign NOT_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__64_ETC___d1763 =
	     !_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1749 &&
	     { 13'd0,
	       (x__h112036[18:0] & ~(19'h7FFFE << x__h112373)) >> 0 } ==
	     32'd0 &&
	     IF_IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_6_ETC___d1747 ||
	     _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1672 ==
	     5'd0 &&
	     shift_new0__h109265 == 3'd0 ||
	     k_expo__h109268 == 23'd8388607 &&
	     IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653__ETC___d1687 ==
	     5'd0 &&
	     x__h112036[18:0] == 19'd0 &&
	     IF_IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_6_ETC___d1747 ;
  assign NOT_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__64_ETC___d1807 =
	     _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712 !=
	     5'd0 &&
	     (_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712 !=
	      5'd1 ||
	      truncated_frac_msb__h109270) &&
	     (_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1749 ||
	      { 13'd0,
		(x__h112036[18:0] & ~(19'h7FFFE << x__h112373)) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h109270) &&
	     NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1804 ;
  assign NOT_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__82_ETC___d1939 =
	     !_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1925 &&
	     { 13'd0,
	       (x__h116531[18:0] & ~(19'h7FFFE << x__h116868)) >> 0 } ==
	     32'd0 &&
	     IF_IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_8_ETC___d1923 ||
	     _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1848 ==
	     5'd0 &&
	     shift_new0__h113765 == 3'd0 ||
	     k_expo__h113768 == 23'd8388607 &&
	     IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829__ETC___d1863 ==
	     5'd0 &&
	     x__h116531[18:0] == 19'd0 &&
	     IF_IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_8_ETC___d1923 ;
  assign NOT_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__82_ETC___d1983 =
	     _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888 !=
	     5'd0 &&
	     (_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888 !=
	      5'd1 ||
	      truncated_frac_msb__h113770) &&
	     (_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1925 ||
	      { 13'd0,
		(x__h116531[18:0] & ~(19'h7FFFE << x__h116868)) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h113770) &&
	     NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1980 ;
  assign NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1715 =
	     x12036_BITS_18_TO_0__q18[_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712] ;
  assign NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1724 =
	     x12036_BITS_18_TO_0__q18[x__h112212] ;
  assign NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1779 =
	     NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1715 ||
	     ((_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712 ==
	       5'd0) ?
		IF_IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_6_ETC___d1747 :
		!NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1724) ;
  assign NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1785 =
	     NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1779 ||
	     CASE_shift_new009265_0_NOT_ftop_ffOD_OUT_BIT__ETC__q21 ;
  assign NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1804 =
	     (_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1672 !=
	      5'd0 ||
	      shift_new0__h109265 != 3'd0 ||
	      !NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1724) &&
	     (k_expo__h109268 != 23'd8388607 ||
	      IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653__ETC___d1687 !=
	      5'd0 ||
	      x__h112036[18:0] != 19'd0 ||
	      truncated_frac_msb__h109270) ;
  assign NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1808 =
	     NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1785 ||
	     IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653__ETC___d1687 ==
	     5'd0 &&
	     !(~k_expo__h109268[0]) ||
	     NOT_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__64_ETC___d1807 ;
  assign NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1891 =
	     x16531_BITS_18_TO_0__q22[_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888] ;
  assign NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1900 =
	     x16531_BITS_18_TO_0__q22[x__h116707] ;
  assign NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1955 =
	     NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1891 ||
	     ((_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888 ==
	       5'd0) ?
		IF_IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_8_ETC___d1923 :
		!NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1900) ;
  assign NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1961 =
	     NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1955 ||
	     CASE_shift_new013765_0_NOT_qtop_ffOD_OUT_BIT__ETC__q25 ;
  assign NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1980 =
	     (_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1848 !=
	      5'd0 ||
	      shift_new0__h113765 != 3'd0 ||
	      !NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1900) &&
	     (k_expo__h113768 != 23'd8388607 ||
	      IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829__ETC___d1863 !=
	      5'd0 ||
	      x__h116531[18:0] != 19'd0 ||
	      truncated_frac_msb__h113770) ;
  assign NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1984 =
	     NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1961 ||
	     IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829__ETC___d1863 ==
	     5'd0 &&
	     !(~k_expo__h113768[0]) ||
	     NOT_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__82_ETC___d1983 ;
  assign NOT_IF_ftop_ffO_first__648_BIT_28_653_THEN_1_S_ETC___d1699 =
	     (!b__h109783[22] && b__h110640[22] ||
	      b__h109783[22] && !b__h110640[22]) &&
	     !IF_ftop_ffO_first__648_BIT_28_653_THEN_1_SL_22_ETC___d1694[22] ||
	     b__h109783[22] && b__h110640[22] ;
  assign NOT_IF_qtop_ffO_first__824_BIT_28_829_THEN_1_S_ETC___d1875 =
	     (!b__h114279[22] && b__h115135[22] ||
	      b__h114279[22] && !b__h115135[22]) &&
	     !IF_qtop_ffO_first__824_BIT_28_829_THEN_1_SL_22_ETC___d1870[22] ||
	     b__h114279[22] && b__h115135[22] ;
  assign NOT_NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_ETC___d1737 =
	     !NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1715 &&
	     flag_prev_truncate__h109274 &&
	     CASE_shift_new009265_0_ftop_ffOD_OUT_BIT_0_1__ETC__q20 ;
  assign NOT_NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_ETC___d1913 =
	     !NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1891 &&
	     flag_prev_truncate__h113774 &&
	     CASE_shift_new013765_0_qtop_ffOD_OUT_BIT_0_1__ETC__q24 ;
  assign NOT_verbosity_ULE_1_66___d867 = verbosity > 4'd1 ;
  assign SEXT_IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ__ETC___d714 =
	     { SEXT_IF_new_inp1914_BIT_22_THEN_b2686_ELSE_b26883__q14[5:0],
	       2'd0 } ;
  assign SEXT_IF_IF_ffI_first__06_BIT_95_40_THEN_0_MINU_ETC___d448 =
	     { SEXT_IF_new_inp4106_BIT_22_THEN_b4807_ELSE_b48095__q16[5:0],
	       2'd0 } ;
  assign SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77 =
	     { {286{truncated_frac__h1204[1]}}, truncated_frac__h1204 } ;
  assign SEXT_IF_new_inp1914_BIT_22_THEN_b2686_ELSE_b26883__q14 =
	     { {2{IF_new_inp1914_BIT_22_THEN_b2686_ELSE_b2688__q13[5]}},
	       IF_new_inp1914_BIT_22_THEN_b2686_ELSE_b2688__q13 } ;
  assign SEXT_IF_new_inp4106_BIT_22_THEN_b4807_ELSE_b48095__q16 =
	     { {2{IF_new_inp4106_BIT_22_THEN_b4807_ELSE_b4809__q15[5]}},
	       IF_new_inp4106_BIT_22_THEN_b4807_ELSE_b4809__q15 } ;
  assign SEXT_extracter1_fifo_output_reg_first__09_BITS_ETC___d934 =
	     { extracter1_fifo_output_regD_OUT_BITS_26_TO_19__q17[7],
	       extracter1_fifo_output_regD_OUT_BITS_26_TO_19__q17 } ;
  assign SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8 =
	     { fma_multiplier_fifo_stage0_regD_OUT_BITS_48_T_ETC__q7[8],
	       fma_multiplier_fifo_stage0_regD_OUT_BITS_48_T_ETC__q7 } ;
  assign _0_CONCAT_IF_IF_rg_quire_15_BIT_287_16_THEN_0_M_ETC___d1620 =
	     { 1'd0, msbZeros__h60013 } + 10'd1 ;
  assign _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d944 =
	     { 20'd0, f1__h58261 } * { 20'd0, f2__h58262 } ;
  assign _0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d1001 =
	     _0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q29[7:0] -
	     8'd168 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d1005 =
	     _0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q29[7:0] -
	     8'd88 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d996 =
	     (_0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q29[7:0] ^
	      8'h80) <
	     8'd40 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__72_BITS_30_TO_2_ETC___d997 =
	     (_0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q29[7:0] ^
	      8'h80) <=
	     8'd216 ;
  assign _0_CONCAT_ffI_f_rvport1__read_BITS_30_TO_23_MI_ETC__q29 =
	     { 1'd0, ffI_f_rv$port1__read[30:23] } - 9'd127 ;
  assign _0_MINUS_ftop_ffOD_OUT_BITS_28_TO_23__q4 =
	     6'd0 - ftop_ffO$D_OUT[28:23] ;
  assign _0_MINUS_qtop_ffOD_OUT_BITS_28_TO_23__q5 =
	     6'd0 - qtop_ffO$D_OUT[28:23] ;
  assign _155_MINUS_0_CONCAT_IF_IF_rg_quire_15_BIT_287_1_ETC___d1622 =
	     10'd155 -
	     _0_CONCAT_IF_IF_rg_quire_15_BIT_287_16_THEN_0_M_ETC___d1620 ;
  assign _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712 =
	     5'd19 -
	     IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653__ETC___d1687 ;
  assign _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1749 =
	     _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712 <
	     5'd2 ;
  assign _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888 =
	     5'd19 -
	     IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829__ETC___d1863 ;
  assign _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1925 =
	     _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888 <
	     5'd2 ;
  assign _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1672 =
	     5'd22 -
	     (ftop_ffO$D_OUT[28] ?
		_0_MINUS_ftop_ffOD_OUT_BITS_28_TO_23__q4[4:0] :
		IF_ftop_ffO_first__648_BIT_27_659_AND_NOT_ftop_ETC___d1665) ;
  assign _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1673 =
	     _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1672 <
	     5'd2 ;
  assign _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1848 =
	     5'd22 -
	     (qtop_ffO$D_OUT[28] ?
		_0_MINUS_qtop_ffOD_OUT_BITS_28_TO_23__q5[4:0] :
		IF_qtop_ffO_first__824_BIT_27_835_AND_NOT_qtop_ETC___d1841) ;
  assign _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1849 =
	     _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1848 <
	     5'd2 ;
  assign _theResult____h109275 =
	     NOT_NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_ETC___d1737 &&
	     (IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653__ETC___d1687 !=
	      5'd0 ||
	      ~k_expo__h109268[0]) &&
	     (_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712 ==
	      5'd0 ||
	      _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712 ==
	      5'd1 &&
	      IF_IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_6_ETC___d1747 ||
	      NOT_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__64_ETC___d1763) ;
  assign _theResult____h113775 =
	     NOT_NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_ETC___d1913 &&
	     (IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829__ETC___d1863 !=
	      5'd0 ||
	      ~k_expo__h113768[0]) &&
	     (_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888 ==
	      5'd0 ||
	      _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888 ==
	      5'd1 &&
	      IF_IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_8_ETC___d1923 ||
	      NOT_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__82_ETC___d1939) ;
  assign _theResult___fst__h110672 =
	     ((ftop_ffO$D_OUT[22:21] & mask_e__h110670) == 2'd0) ?
	       expo_new__h110737 :
	       expo_new__h110766 ;
  assign _theResult___fst__h115167 =
	     ((qtop_ffO$D_OUT[22:21] & mask_e__h115165) == 2'd0) ?
	       expo_new__h115232 :
	       expo_new__h115261 ;
  assign _theResult___snd_snd__h110818 =
	     ((ftop_ffO$D_OUT[22:21] & mask_e__h110670) == 2'd0) ?
	       3'd0 :
	       shift_new__h110765 ;
  assign _theResult___snd_snd__h115313 =
	     ((qtop_ffO$D_OUT[22:21] & mask_e__h115165) == 2'd0) ?
	       3'd0 :
	       shift_new__h115260 ;
  assign a__h109312 =
	     IF_IF_NOT_IF_ftop_ffO_first__648_BIT_28_653_TH_ETC___d1775 +
	     { 22'd0,
	       IF_IF_NOT_IF_ftop_ffO_first__648_BIT_28_653_TH_ETC___d1775 ==
	       23'd0 &&
	       NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1808 } ;
  assign a__h113808 =
	     IF_IF_NOT_IF_qtop_ffO_first__824_BIT_28_829_TH_ETC___d1951 +
	     { 22'd0,
	       IF_IF_NOT_IF_qtop_ffO_first__824_BIT_28_829_TH_ETC___d1951 ==
	       23'd0 &&
	       NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1984 } ;
  assign add_round__h31222 = x__h31389 & truncated_frac_msb__h31216 ;
  assign all_bits_0__h1207 = ~(x__h1257[286:0] != 287'd0) ;
  assign b__h109545 = x__h109561 - y__h109562 ;
  assign b__h109783 = ftop_ffO$D_OUT[28] ? k__h109843 : k__h109888 ;
  assign b__h110640 =
	     { 21'd0, x__h110643 } <<
	     IF_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653__ETC___d1687 ;
  assign b__h112637 = { 22'd0, flag_prev_truncate__h109274 } ;
  assign b__h114041 = x__h114057 - y__h114058 ;
  assign b__h114279 = qtop_ffO$D_OUT[28] ? k__h114339 : k__h114383 ;
  assign b__h115135 =
	     { 21'd0, x__h115138 } <<
	     IF_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829__ETC___d1863 ;
  assign b__h117132 = { 22'd0, flag_prev_truncate__h113774 } ;
  assign b__h34807 = { 1'd0, x__h34817 } - 6'd1 ;
  assign b__h34809 = 6'd0 - x__h38068 ;
  assign b__h42686 = { 1'd0, x__h42696 } - 6'd1 ;
  assign b__h42688 = 6'd0 - x__h45947 ;
  assign carry_int_frac_shifted__h29747 =
	     qtop_quireToPosit1_fifo_stage0_reg$D_OUT[286:0] << x__h29835 ;
  assign expo__h34113 =
	     (IF_IF_ffI_first__06_BIT_95_40_THEN_0_MINUS_ffI_ETC___d541 <
	      5'd2) ?
	       new_inp__h34106[1:0] << x__h41645 :
	       new_inp4106_AND_INV_0x7FFFFE_SL_x1608_SRL_x1610__q10[1:0] ;
  assign expo__h41921 =
	     (IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d807 <
	      5'd2) ?
	       new_inp__h41914[1:0] << x__h49524 :
	       new_inp1914_AND_INV_0x7FFFFE_SL_x9487_SRL_x9489__q12[1:0] ;
  assign expo_new__h110737 =
	     ftop_ffO$D_OUT[22:21] >>
	     _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1672 ;
  assign expo_new__h110766 = x__h110769[1:0] & ftop_ffO$D_OUT[22:21] ;
  assign expo_new__h115232 =
	     qtop_ffO$D_OUT[22:21] >>
	     _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1848 ;
  assign expo_new__h115261 = x__h115264[1:0] & qtop_ffO$D_OUT[22:21] ;
  assign extracter1_fifo_output_regD_OUT_BITS_26_TO_19__q17 =
	     extracter1_fifo_output_reg$D_OUT[26:19] ;
  assign extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d955 =
	     (extracter1_fifo_output_reg$D_OUT[26:19] ^ 8'h80) < 8'd1 ;
  assign extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d956 =
	     (extracter1_fifo_output_reg$D_OUT[26:19] ^ 8'h80) <= 8'd255 ;
  assign extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d960 =
	     extracter1_fifo_output_reg$D_OUT[26:19] - 8'd129 ;
  assign extracter1_fifo_output_reg_first__09_BITS_26_T_ETC___d964 =
	     extracter1_fifo_output_reg$D_OUT[26:19] - 8'd127 ;
  assign extracter1_fifo_output_reg_first__09_BIT_27_24_ETC___d946 =
	     { x__h58254,
	       SEXT_extracter1_fifo_output_reg_first__09_BITS_ETC___d934 +
	       { extracter2_fifo_output_regD_OUT_BITS_26_TO_19__q28[7],
		 extracter2_fifo_output_regD_OUT_BITS_26_TO_19__q28 },
	       _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d944[39:0] } ;
  assign extracter2_fifo_output_regD_OUT_BITS_26_TO_19__q28 =
	     extracter2_fifo_output_reg$D_OUT[26:19] ;
  assign f1__h58261 =
	     { IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC___d928[1],
	       extracter1_fifo_output_reg$D_OUT[18:0] } ;
  assign f2__h58262 =
	     { IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC___d928[0],
	       extracter2_fifo_output_reg$D_OUT[18:0] } ;
  assign f_new___1__h710 =
	     f_new__h487 >>
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8[8:0] ;
  assign f_new__h487 =
	     { 224'd0, fma_multiplier_fifo_stage0_reg$D_OUT[39:0] } ;
  assign f_new__h59863 = { 245'd1, extracter1_fifo_output_reg$D_OUT[18:0] } ;
  assign f_new__h657 = f_new__h487 << x__h791 ;
  assign flag_prev_truncate__h109274 =
	     (_19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712 ==
	      5'd0) ?
	       truncated_frac_msb__h109270 :
	       NOT_22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_ETC___d1724 ;
  assign flag_prev_truncate__h113774 =
	     (_19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888 ==
	      5'd0) ?
	       truncated_frac_msb__h113770 :
	       NOT_22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_ETC___d1900 ;
  assign flag_truncated_frac__h1202 =
	     x__h5435 | fma_adder_fifo_stage0_reg$D_OUT[5] ;
  assign float_no__h31221 =
	     { ptof_ptoF_fifo_stage0_reg$D_OUT[41],
	       x__h31272[7:0],
	       frac_f__h31220 } ;
  assign fma_adder_fifo_stage0_reg_first__7_BITS_294_TO_ETC___d82 =
	     fma_adder_fifo_stage0_reg$D_OUT[294:7] +
	     SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77 ;
  assign fma_multiplier_fifo_stage0_regD_OUT_BITS_39_TO_0__q9 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[39:0] ;
  assign fma_multiplier_fifo_stage0_regD_OUT_BITS_48_T_ETC__q7 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[48:40] ;
  assign frac__h30454 = { 1'd1, ftop_fToP_fifo_stage0_reg$D_OUT[26:8] } ;
  assign frac__h31214 = { 1'd1, ptof_ptoF_fifo_stage0_reg$D_OUT[30:8] } ;
  assign frac__h34114 = new_inp__h34106[18:0] << x__h41657 ;
  assign frac__h41922 = new_inp__h41914[18:0] << x__h49536 ;
  assign frac_f__h31220 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       x__h31302[22:0] :
	       ((ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] == 6'd0) ?
		  ptof_ptoF_fifo_stage0_reg$D_OUT[30:8] :
		  23'd8388607) ;
  assign ftop_ffOD_OUT_BITS_20_TO_2__q19 = ftop_ffO$D_OUT[20:2] ;
  assign ftop_ffO_first__648_BITS_20_TO_2_703_BIT_IF_22_ETC___d1721 =
	     ftop_ffOD_OUT_BITS_20_TO_2__q19[i__h112165] ;
  assign ftop_ffO_first__648_BITS_27_TO_23_660_PLUS_1___d1661 =
	     ftop_ffO$D_OUT[27:23] + 5'd1 ;
  assign ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1730 =
	     ftop_ffO$D_OUT[0] & y__h112253 ;
  assign ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1734 =
	     ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1730 &
	     y__h112257 ;
  assign i1__h112263 = shift_new0__h109265 - 3'd2 ;
  assign i1__h116758 = shift_new0__h113765 - 3'd2 ;
  assign i__h112165 = shift_new0__h109265 - 3'd1 ;
  assign i__h116660 = shift_new0__h113765 - 3'd1 ;
  assign in_posit2___1_posit_inp__h41970 = 24'd0 - ffI$D_OUT[29:6] ;
  assign int_frac__h59846 = f_new__h59863 << x__h59907 ;
  assign k__h109843 = 23'd1 << x__h109886 ;
  assign k__h109888 = ~x__h109900 ;
  assign k__h114339 = 23'd1 << x__h114381 ;
  assign k__h114383 = ~x__h114395 ;
  assign k_expo__h109268 =
	     NOT_IF_ftop_ffO_first__648_BIT_28_653_THEN_1_S_ETC___d1699 ?
	       23'd8388607 :
	       IF_ftop_ffO_first__648_BIT_28_653_THEN_1_SL_22_ETC___d1694 ;
  assign k_expo__h113768 =
	     NOT_IF_qtop_ffO_first__824_BIT_28_829_THEN_1_S_ETC___d1875 ?
	       23'd8388607 :
	       IF_qtop_ffO_first__824_BIT_28_829_THEN_1_SL_22_ETC___d1870 ;
  assign mask1__h712 = ~x__h893 ;
  assign mask_e__h110670 = 2'd3 >> x__h110727 ;
  assign mask_e__h115165 = 2'd3 >> x__h115222 ;
  assign msbZeros__h60013 =
	     twos_complement_carry_int_frac__h60012[286] ?
	       9'd0 :
	       (twos_complement_carry_int_frac__h60012[285] ?
		  9'd1 :
		  (twos_complement_carry_int_frac__h60012[284] ?
		     9'd2 :
		     (twos_complement_carry_int_frac__h60012[283] ?
			9'd3 :
			(twos_complement_carry_int_frac__h60012[282] ?
			   9'd4 :
			   (twos_complement_carry_int_frac__h60012[281] ?
			      9'd5 :
			      (twos_complement_carry_int_frac__h60012[280] ?
				 9'd6 :
				 (twos_complement_carry_int_frac__h60012[279] ?
				    9'd7 :
				    (twos_complement_carry_int_frac__h60012[278] ?
				       9'd8 :
				       (twos_complement_carry_int_frac__h60012[277] ?
					  9'd9 :
					  (twos_complement_carry_int_frac__h60012[276] ?
					     9'd10 :
					     (twos_complement_carry_int_frac__h60012[275] ?
						9'd11 :
						(twos_complement_carry_int_frac__h60012[274] ?
						   9'd12 :
						   (twos_complement_carry_int_frac__h60012[273] ?
						      9'd13 :
						      (twos_complement_carry_int_frac__h60012[272] ?
							 9'd14 :
							 (twos_complement_carry_int_frac__h60012[271] ?
							    9'd15 :
							    (twos_complement_carry_int_frac__h60012[270] ?
							       9'd16 :
							       (twos_complement_carry_int_frac__h60012[269] ?
								  9'd17 :
								  (twos_complement_carry_int_frac__h60012[268] ?
								     9'd18 :
								     (twos_complement_carry_int_frac__h60012[267] ?
									9'd19 :
									(twos_complement_carry_int_frac__h60012[266] ?
									   9'd20 :
									   (twos_complement_carry_int_frac__h60012[265] ?
									      9'd21 :
									      (twos_complement_carry_int_frac__h60012[264] ?
										 9'd22 :
										 (twos_complement_carry_int_frac__h60012[263] ?
										    9'd23 :
										    (twos_complement_carry_int_frac__h60012[262] ?
										       9'd24 :
										       (twos_complement_carry_int_frac__h60012[261] ?
											  9'd25 :
											  (twos_complement_carry_int_frac__h60012[260] ?
											     9'd26 :
											     (twos_complement_carry_int_frac__h60012[259] ?
												9'd27 :
												(twos_complement_carry_int_frac__h60012[258] ?
												   9'd28 :
												   (twos_complement_carry_int_frac__h60012[257] ?
												      9'd29 :
												      (twos_complement_carry_int_frac__h60012[256] ?
													 9'd30 :
													 (twos_complement_carry_int_frac__h60012[255] ?
													    9'd31 :
													    (twos_complement_carry_int_frac__h60012[254] ?
													       9'd32 :
													       (twos_complement_carry_int_frac__h60012[253] ?
														  9'd33 :
														  (twos_complement_carry_int_frac__h60012[252] ?
														     9'd34 :
														     (twos_complement_carry_int_frac__h60012[251] ?
															9'd35 :
															(twos_complement_carry_int_frac__h60012[250] ?
															   9'd36 :
															   (twos_complement_carry_int_frac__h60012[249] ?
															      9'd37 :
															      (twos_complement_carry_int_frac__h60012[248] ?
																 9'd38 :
																 (twos_complement_carry_int_frac__h60012[247] ?
																    9'd39 :
																    (twos_complement_carry_int_frac__h60012[246] ?
																       9'd40 :
																       (twos_complement_carry_int_frac__h60012[245] ?
																	  9'd41 :
																	  (twos_complement_carry_int_frac__h60012[244] ?
																	     9'd42 :
																	     (twos_complement_carry_int_frac__h60012[243] ?
																		9'd43 :
																		(twos_complement_carry_int_frac__h60012[242] ?
																		   9'd44 :
																		   (twos_complement_carry_int_frac__h60012[241] ?
																		      9'd45 :
																		      (twos_complement_carry_int_frac__h60012[240] ?
																			 9'd46 :
																			 (twos_complement_carry_int_frac__h60012[239] ?
																			    9'd47 :
																			    (twos_complement_carry_int_frac__h60012[238] ?
																			       9'd48 :
																			       (twos_complement_carry_int_frac__h60012[237] ?
																				  9'd49 :
																				  (twos_complement_carry_int_frac__h60012[236] ?
																				     9'd50 :
																				     (twos_complement_carry_int_frac__h60012[235] ?
																					9'd51 :
																					(twos_complement_carry_int_frac__h60012[234] ?
																					   9'd52 :
																					   (twos_complement_carry_int_frac__h60012[233] ?
																					      9'd53 :
																					      (twos_complement_carry_int_frac__h60012[232] ?
																						 9'd54 :
																						 (twos_complement_carry_int_frac__h60012[231] ?
																						    9'd55 :
																						    (twos_complement_carry_int_frac__h60012[230] ?
																						       9'd56 :
																						       (twos_complement_carry_int_frac__h60012[229] ?
																							  9'd57 :
																							  (twos_complement_carry_int_frac__h60012[228] ?
																							     9'd58 :
																							     (twos_complement_carry_int_frac__h60012[227] ?
																								9'd59 :
																								(twos_complement_carry_int_frac__h60012[226] ?
																								   9'd60 :
																								   (twos_complement_carry_int_frac__h60012[225] ?
																								      9'd61 :
																								      (twos_complement_carry_int_frac__h60012[224] ?
																									 9'd62 :
																									 (twos_complement_carry_int_frac__h60012[223] ?
																									    9'd63 :
																									    (twos_complement_carry_int_frac__h60012[222] ?
																									       9'd64 :
																									       (twos_complement_carry_int_frac__h60012[221] ?
																										  9'd65 :
																										  (twos_complement_carry_int_frac__h60012[220] ?
																										     9'd66 :
																										     (twos_complement_carry_int_frac__h60012[219] ?
																											9'd67 :
																											(twos_complement_carry_int_frac__h60012[218] ?
																											   9'd68 :
																											   (twos_complement_carry_int_frac__h60012[217] ?
																											      9'd69 :
																											      (twos_complement_carry_int_frac__h60012[216] ?
																												 9'd70 :
																												 (twos_complement_carry_int_frac__h60012[215] ?
																												    9'd71 :
																												    (twos_complement_carry_int_frac__h60012[214] ?
																												       9'd72 :
																												       (twos_complement_carry_int_frac__h60012[213] ?
																													  9'd73 :
																													  (twos_complement_carry_int_frac__h60012[212] ?
																													     9'd74 :
																													     (twos_complement_carry_int_frac__h60012[211] ?
																														9'd75 :
																														(twos_complement_carry_int_frac__h60012[210] ?
																														   9'd76 :
																														   (twos_complement_carry_int_frac__h60012[209] ?
																														      9'd77 :
																														      (twos_complement_carry_int_frac__h60012[208] ?
																															 9'd78 :
																															 (twos_complement_carry_int_frac__h60012[207] ?
																															    9'd79 :
																															    (twos_complement_carry_int_frac__h60012[206] ?
																															       9'd80 :
																															       (twos_complement_carry_int_frac__h60012[205] ?
																																  9'd81 :
																																  (twos_complement_carry_int_frac__h60012[204] ?
																																     9'd82 :
																																     (twos_complement_carry_int_frac__h60012[203] ?
																																	9'd83 :
																																	(twos_complement_carry_int_frac__h60012[202] ?
																																	   9'd84 :
																																	   (twos_complement_carry_int_frac__h60012[201] ?
																																	      9'd85 :
																																	      (twos_complement_carry_int_frac__h60012[200] ?
																																		 9'd86 :
																																		 (twos_complement_carry_int_frac__h60012[199] ?
																																		    9'd87 :
																																		    (twos_complement_carry_int_frac__h60012[198] ?
																																		       9'd88 :
																																		       (twos_complement_carry_int_frac__h60012[197] ?
																																			  9'd89 :
																																			  (twos_complement_carry_int_frac__h60012[196] ?
																																			     9'd90 :
																																			     (twos_complement_carry_int_frac__h60012[195] ?
																																				9'd91 :
																																				(twos_complement_carry_int_frac__h60012[194] ?
																																				   9'd92 :
																																				   (twos_complement_carry_int_frac__h60012[193] ?
																																				      9'd93 :
																																				      (twos_complement_carry_int_frac__h60012[192] ?
																																					 9'd94 :
																																					 (twos_complement_carry_int_frac__h60012[191] ?
																																					    9'd95 :
																																					    (twos_complement_carry_int_frac__h60012[190] ?
																																					       9'd96 :
																																					       (twos_complement_carry_int_frac__h60012[189] ?
																																						  9'd97 :
																																						  (twos_complement_carry_int_frac__h60012[188] ?
																																						     9'd98 :
																																						     (twos_complement_carry_int_frac__h60012[187] ?
																																							9'd99 :
																																							(twos_complement_carry_int_frac__h60012[186] ?
																																							   9'd100 :
																																							   (twos_complement_carry_int_frac__h60012[185] ?
																																							      9'd101 :
																																							      (twos_complement_carry_int_frac__h60012[184] ?
																																								 9'd102 :
																																								 (twos_complement_carry_int_frac__h60012[183] ?
																																								    9'd103 :
																																								    (twos_complement_carry_int_frac__h60012[182] ?
																																								       9'd104 :
																																								       (twos_complement_carry_int_frac__h60012[181] ?
																																									  9'd105 :
																																									  (twos_complement_carry_int_frac__h60012[180] ?
																																									     9'd106 :
																																									     (twos_complement_carry_int_frac__h60012[179] ?
																																										9'd107 :
																																										(twos_complement_carry_int_frac__h60012[178] ?
																																										   9'd108 :
																																										   (twos_complement_carry_int_frac__h60012[177] ?
																																										      9'd109 :
																																										      (twos_complement_carry_int_frac__h60012[176] ?
																																											 9'd110 :
																																											 (twos_complement_carry_int_frac__h60012[175] ?
																																											    9'd111 :
																																											    (twos_complement_carry_int_frac__h60012[174] ?
																																											       9'd112 :
																																											       (twos_complement_carry_int_frac__h60012[173] ?
																																												  9'd113 :
																																												  (twos_complement_carry_int_frac__h60012[172] ?
																																												     9'd114 :
																																												     (twos_complement_carry_int_frac__h60012[171] ?
																																													9'd115 :
																																													(twos_complement_carry_int_frac__h60012[170] ?
																																													   9'd116 :
																																													   (twos_complement_carry_int_frac__h60012[169] ?
																																													      9'd117 :
																																													      (twos_complement_carry_int_frac__h60012[168] ?
																																														 9'd118 :
																																														 (twos_complement_carry_int_frac__h60012[167] ?
																																														    9'd119 :
																																														    (twos_complement_carry_int_frac__h60012[166] ?
																																														       9'd120 :
																																														       (twos_complement_carry_int_frac__h60012[165] ?
																																															  9'd121 :
																																															  (twos_complement_carry_int_frac__h60012[164] ?
																																															     9'd122 :
																																															     (twos_complement_carry_int_frac__h60012[163] ?
																																																9'd123 :
																																																(twos_complement_carry_int_frac__h60012[162] ?
																																																   9'd124 :
																																																   (twos_complement_carry_int_frac__h60012[161] ?
																																																      9'd125 :
																																																      (twos_complement_carry_int_frac__h60012[160] ?
																																																	 9'd126 :
																																																	 (twos_complement_carry_int_frac__h60012[159] ?
																																																	    9'd127 :
																																																	    (twos_complement_carry_int_frac__h60012[158] ?
																																																	       9'd128 :
																																																	       (twos_complement_carry_int_frac__h60012[157] ?
																																																		  9'd129 :
																																																		  (twos_complement_carry_int_frac__h60012[156] ?
																																																		     9'd130 :
																																																		     (twos_complement_carry_int_frac__h60012[155] ?
																																																			9'd131 :
																																																			(twos_complement_carry_int_frac__h60012[154] ?
																																																			   9'd132 :
																																																			   (twos_complement_carry_int_frac__h60012[153] ?
																																																			      9'd133 :
																																																			      (twos_complement_carry_int_frac__h60012[152] ?
																																																				 9'd134 :
																																																				 (twos_complement_carry_int_frac__h60012[151] ?
																																																				    9'd135 :
																																																				    (twos_complement_carry_int_frac__h60012[150] ?
																																																				       9'd136 :
																																																				       (twos_complement_carry_int_frac__h60012[149] ?
																																																					  9'd137 :
																																																					  (twos_complement_carry_int_frac__h60012[148] ?
																																																					     9'd138 :
																																																					     (twos_complement_carry_int_frac__h60012[147] ?
																																																						9'd139 :
																																																						(twos_complement_carry_int_frac__h60012[146] ?
																																																						   9'd140 :
																																																						   (twos_complement_carry_int_frac__h60012[145] ?
																																																						      9'd141 :
																																																						      (twos_complement_carry_int_frac__h60012[144] ?
																																																							 9'd142 :
																																																							 (twos_complement_carry_int_frac__h60012[143] ?
																																																							    9'd143 :
																																																							    (twos_complement_carry_int_frac__h60012[142] ?
																																																							       9'd144 :
																																																							       (twos_complement_carry_int_frac__h60012[141] ?
																																																								  9'd145 :
																																																								  (twos_complement_carry_int_frac__h60012[140] ?
																																																								     9'd146 :
																																																								     (twos_complement_carry_int_frac__h60012[139] ?
																																																									9'd147 :
																																																									(twos_complement_carry_int_frac__h60012[138] ?
																																																									   9'd148 :
																																																									   (twos_complement_carry_int_frac__h60012[137] ?
																																																									      9'd149 :
																																																									      (twos_complement_carry_int_frac__h60012[136] ?
																																																										 9'd150 :
																																																										 (twos_complement_carry_int_frac__h60012[135] ?
																																																										    9'd151 :
																																																										    (twos_complement_carry_int_frac__h60012[134] ?
																																																										       9'd152 :
																																																										       (twos_complement_carry_int_frac__h60012[133] ?
																																																											  9'd153 :
																																																											  (twos_complement_carry_int_frac__h60012[132] ?
																																																											     9'd154 :
																																																											     (twos_complement_carry_int_frac__h60012[131] ?
																																																												9'd155 :
																																																												(twos_complement_carry_int_frac__h60012[130] ?
																																																												   9'd156 :
																																																												   (twos_complement_carry_int_frac__h60012[129] ?
																																																												      9'd157 :
																																																												      (twos_complement_carry_int_frac__h60012[128] ?
																																																													 9'd158 :
																																																													 (twos_complement_carry_int_frac__h60012[127] ?
																																																													    9'd159 :
																																																													    (twos_complement_carry_int_frac__h60012[126] ?
																																																													       9'd160 :
																																																													       (twos_complement_carry_int_frac__h60012[125] ?
																																																														  9'd161 :
																																																														  (twos_complement_carry_int_frac__h60012[124] ?
																																																														     9'd162 :
																																																														     (twos_complement_carry_int_frac__h60012[123] ?
																																																															9'd163 :
																																																															(twos_complement_carry_int_frac__h60012[122] ?
																																																															   9'd164 :
																																																															   (twos_complement_carry_int_frac__h60012[121] ?
																																																															      9'd165 :
																																																															      (twos_complement_carry_int_frac__h60012[120] ?
																																																																 9'd166 :
																																																																 (twos_complement_carry_int_frac__h60012[119] ?
																																																																    9'd167 :
																																																																    (twos_complement_carry_int_frac__h60012[118] ?
																																																																       9'd168 :
																																																																       (twos_complement_carry_int_frac__h60012[117] ?
																																																																	  9'd169 :
																																																																	  (twos_complement_carry_int_frac__h60012[116] ?
																																																																	     9'd170 :
																																																																	     (twos_complement_carry_int_frac__h60012[115] ?
																																																																		9'd171 :
																																																																		(twos_complement_carry_int_frac__h60012[114] ?
																																																																		   9'd172 :
																																																																		   (twos_complement_carry_int_frac__h60012[113] ?
																																																																		      9'd173 :
																																																																		      (twos_complement_carry_int_frac__h60012[112] ?
																																																																			 9'd174 :
																																																																			 (twos_complement_carry_int_frac__h60012[111] ?
																																																																			    9'd175 :
																																																																			    (twos_complement_carry_int_frac__h60012[110] ?
																																																																			       9'd176 :
																																																																			       (twos_complement_carry_int_frac__h60012[109] ?
																																																																				  9'd177 :
																																																																				  (twos_complement_carry_int_frac__h60012[108] ?
																																																																				     9'd178 :
																																																																				     (twos_complement_carry_int_frac__h60012[107] ?
																																																																					9'd179 :
																																																																					(twos_complement_carry_int_frac__h60012[106] ?
																																																																					   9'd180 :
																																																																					   (twos_complement_carry_int_frac__h60012[105] ?
																																																																					      9'd181 :
																																																																					      (twos_complement_carry_int_frac__h60012[104] ?
																																																																						 9'd182 :
																																																																						 (twos_complement_carry_int_frac__h60012[103] ?
																																																																						    9'd183 :
																																																																						    (twos_complement_carry_int_frac__h60012[102] ?
																																																																						       9'd184 :
																																																																						       (twos_complement_carry_int_frac__h60012[101] ?
																																																																							  9'd185 :
																																																																							  (twos_complement_carry_int_frac__h60012[100] ?
																																																																							     9'd186 :
																																																																							     (twos_complement_carry_int_frac__h60012[99] ?
																																																																								9'd187 :
																																																																								(twos_complement_carry_int_frac__h60012[98] ?
																																																																								   9'd188 :
																																																																								   (twos_complement_carry_int_frac__h60012[97] ?
																																																																								      9'd189 :
																																																																								      (twos_complement_carry_int_frac__h60012[96] ?
																																																																									 9'd190 :
																																																																									 (twos_complement_carry_int_frac__h60012[95] ?
																																																																									    9'd191 :
																																																																									    (twos_complement_carry_int_frac__h60012[94] ?
																																																																									       9'd192 :
																																																																									       (twos_complement_carry_int_frac__h60012[93] ?
																																																																										  9'd193 :
																																																																										  (twos_complement_carry_int_frac__h60012[92] ?
																																																																										     9'd194 :
																																																																										     (twos_complement_carry_int_frac__h60012[91] ?
																																																																											9'd195 :
																																																																											(twos_complement_carry_int_frac__h60012[90] ?
																																																																											   9'd196 :
																																																																											   (twos_complement_carry_int_frac__h60012[89] ?
																																																																											      9'd197 :
																																																																											      (twos_complement_carry_int_frac__h60012[88] ?
																																																																												 9'd198 :
																																																																												 (twos_complement_carry_int_frac__h60012[87] ?
																																																																												    9'd199 :
																																																																												    (twos_complement_carry_int_frac__h60012[86] ?
																																																																												       9'd200 :
																																																																												       (twos_complement_carry_int_frac__h60012[85] ?
																																																																													  9'd201 :
																																																																													  (twos_complement_carry_int_frac__h60012[84] ?
																																																																													     9'd202 :
																																																																													     (twos_complement_carry_int_frac__h60012[83] ?
																																																																														9'd203 :
																																																																														(twos_complement_carry_int_frac__h60012[82] ?
																																																																														   9'd204 :
																																																																														   (twos_complement_carry_int_frac__h60012[81] ?
																																																																														      9'd205 :
																																																																														      (twos_complement_carry_int_frac__h60012[80] ?
																																																																															 9'd206 :
																																																																															 (twos_complement_carry_int_frac__h60012[79] ?
																																																																															    9'd207 :
																																																																															    (twos_complement_carry_int_frac__h60012[78] ?
																																																																															       9'd208 :
																																																																															       (twos_complement_carry_int_frac__h60012[77] ?
																																																																																  9'd209 :
																																																																																  (twos_complement_carry_int_frac__h60012[76] ?
																																																																																     9'd210 :
																																																																																     (twos_complement_carry_int_frac__h60012[75] ?
																																																																																	9'd211 :
																																																																																	(twos_complement_carry_int_frac__h60012[74] ?
																																																																																	   9'd212 :
																																																																																	   (twos_complement_carry_int_frac__h60012[73] ?
																																																																																	      9'd213 :
																																																																																	      (twos_complement_carry_int_frac__h60012[72] ?
																																																																																		 9'd214 :
																																																																																		 (twos_complement_carry_int_frac__h60012[71] ?
																																																																																		    9'd215 :
																																																																																		    (twos_complement_carry_int_frac__h60012[70] ?
																																																																																		       9'd216 :
																																																																																		       (twos_complement_carry_int_frac__h60012[69] ?
																																																																																			  9'd217 :
																																																																																			  (twos_complement_carry_int_frac__h60012[68] ?
																																																																																			     9'd218 :
																																																																																			     (twos_complement_carry_int_frac__h60012[67] ?
																																																																																				9'd219 :
																																																																																				(twos_complement_carry_int_frac__h60012[66] ?
																																																																																				   9'd220 :
																																																																																				   (twos_complement_carry_int_frac__h60012[65] ?
																																																																																				      9'd221 :
																																																																																				      (twos_complement_carry_int_frac__h60012[64] ?
																																																																																					 9'd222 :
																																																																																					 (twos_complement_carry_int_frac__h60012[63] ?
																																																																																					    9'd223 :
																																																																																					    (twos_complement_carry_int_frac__h60012[62] ?
																																																																																					       9'd224 :
																																																																																					       (twos_complement_carry_int_frac__h60012[61] ?
																																																																																						  9'd225 :
																																																																																						  (twos_complement_carry_int_frac__h60012[60] ?
																																																																																						     9'd226 :
																																																																																						     (twos_complement_carry_int_frac__h60012[59] ?
																																																																																							9'd227 :
																																																																																							(twos_complement_carry_int_frac__h60012[58] ?
																																																																																							   9'd228 :
																																																																																							   (twos_complement_carry_int_frac__h60012[57] ?
																																																																																							      9'd229 :
																																																																																							      (twos_complement_carry_int_frac__h60012[56] ?
																																																																																								 9'd230 :
																																																																																								 (twos_complement_carry_int_frac__h60012[55] ?
																																																																																								    9'd231 :
																																																																																								    (twos_complement_carry_int_frac__h60012[54] ?
																																																																																								       9'd232 :
																																																																																								       (twos_complement_carry_int_frac__h60012[53] ?
																																																																																									  9'd233 :
																																																																																									  (twos_complement_carry_int_frac__h60012[52] ?
																																																																																									     9'd234 :
																																																																																									     (twos_complement_carry_int_frac__h60012[51] ?
																																																																																										9'd235 :
																																																																																										(twos_complement_carry_int_frac__h60012[50] ?
																																																																																										   9'd236 :
																																																																																										   (twos_complement_carry_int_frac__h60012[49] ?
																																																																																										      9'd237 :
																																																																																										      (twos_complement_carry_int_frac__h60012[48] ?
																																																																																											 9'd238 :
																																																																																											 (twos_complement_carry_int_frac__h60012[47] ?
																																																																																											    9'd239 :
																																																																																											    (twos_complement_carry_int_frac__h60012[46] ?
																																																																																											       9'd240 :
																																																																																											       (twos_complement_carry_int_frac__h60012[45] ?
																																																																																												  9'd241 :
																																																																																												  (twos_complement_carry_int_frac__h60012[44] ?
																																																																																												     9'd242 :
																																																																																												     (twos_complement_carry_int_frac__h60012[43] ?
																																																																																													9'd243 :
																																																																																													(twos_complement_carry_int_frac__h60012[42] ?
																																																																																													   9'd244 :
																																																																																													   (twos_complement_carry_int_frac__h60012[41] ?
																																																																																													      9'd245 :
																																																																																													      (twos_complement_carry_int_frac__h60012[40] ?
																																																																																														 9'd246 :
																																																																																														 (twos_complement_carry_int_frac__h60012[39] ?
																																																																																														    9'd247 :
																																																																																														    (twos_complement_carry_int_frac__h60012[38] ?
																																																																																														       9'd248 :
																																																																																														       (twos_complement_carry_int_frac__h60012[37] ?
																																																																																															  9'd249 :
																																																																																															  (twos_complement_carry_int_frac__h60012[36] ?
																																																																																															     9'd250 :
																																																																																															     (twos_complement_carry_int_frac__h60012[35] ?
																																																																																																9'd251 :
																																																																																																(twos_complement_carry_int_frac__h60012[34] ?
																																																																																																   9'd252 :
																																																																																																   (twos_complement_carry_int_frac__h60012[33] ?
																																																																																																      9'd253 :
																																																																																																      (twos_complement_carry_int_frac__h60012[32] ?
																																																																																																	 9'd254 :
																																																																																																	 (twos_complement_carry_int_frac__h60012[31] ?
																																																																																																	    9'd255 :
																																																																																																	    (twos_complement_carry_int_frac__h60012[30] ?
																																																																																																	       9'd256 :
																																																																																																	       (twos_complement_carry_int_frac__h60012[29] ?
																																																																																																		  9'd257 :
																																																																																																		  (twos_complement_carry_int_frac__h60012[28] ?
																																																																																																		     9'd258 :
																																																																																																		     (twos_complement_carry_int_frac__h60012[27] ?
																																																																																																			9'd259 :
																																																																																																			(twos_complement_carry_int_frac__h60012[26] ?
																																																																																																			   9'd260 :
																																																																																																			   (twos_complement_carry_int_frac__h60012[25] ?
																																																																																																			      9'd261 :
																																																																																																			      (twos_complement_carry_int_frac__h60012[24] ?
																																																																																																				 9'd262 :
																																																																																																				 (twos_complement_carry_int_frac__h60012[23] ?
																																																																																																				    9'd263 :
																																																																																																				    (twos_complement_carry_int_frac__h60012[22] ?
																																																																																																				       9'd264 :
																																																																																																				       (twos_complement_carry_int_frac__h60012[21] ?
																																																																																																					  9'd265 :
																																																																																																					  (twos_complement_carry_int_frac__h60012[20] ?
																																																																																																					     9'd266 :
																																																																																																					     (twos_complement_carry_int_frac__h60012[19] ?
																																																																																																						9'd267 :
																																																																																																						(twos_complement_carry_int_frac__h60012[18] ?
																																																																																																						   9'd268 :
																																																																																																						   (twos_complement_carry_int_frac__h60012[17] ?
																																																																																																						      9'd269 :
																																																																																																						      (twos_complement_carry_int_frac__h60012[16] ?
																																																																																																							 9'd270 :
																																																																																																							 (twos_complement_carry_int_frac__h60012[15] ?
																																																																																																							    9'd271 :
																																																																																																							    (twos_complement_carry_int_frac__h60012[14] ?
																																																																																																							       9'd272 :
																																																																																																							       (twos_complement_carry_int_frac__h60012[13] ?
																																																																																																								  9'd273 :
																																																																																																								  (twos_complement_carry_int_frac__h60012[12] ?
																																																																																																								     9'd274 :
																																																																																																								     (twos_complement_carry_int_frac__h60012[11] ?
																																																																																																									9'd275 :
																																																																																																									(twos_complement_carry_int_frac__h60012[10] ?
																																																																																																									   9'd276 :
																																																																																																									   (twos_complement_carry_int_frac__h60012[9] ?
																																																																																																									      9'd277 :
																																																																																																									      (twos_complement_carry_int_frac__h60012[8] ?
																																																																																																										 9'd278 :
																																																																																																										 (twos_complement_carry_int_frac__h60012[7] ?
																																																																																																										    9'd279 :
																																																																																																										    (twos_complement_carry_int_frac__h60012[6] ?
																																																																																																										       9'd280 :
																																																																																																										       (twos_complement_carry_int_frac__h60012[5] ?
																																																																																																											  9'd281 :
																																																																																																											  (twos_complement_carry_int_frac__h60012[4] ?
																																																																																																											     9'd282 :
																																																																																																											     (twos_complement_carry_int_frac__h60012[3] ?
																																																																																																												9'd283 :
																																																																																																												(twos_complement_carry_int_frac__h60012[2] ?
																																																																																																												   9'd284 :
																																																																																																												   (twos_complement_carry_int_frac__h60012[1] ?
																																																																																																												      9'd285 :
																																																																																																												      (twos_complement_carry_int_frac__h60012[0] ?
																																																																																																													 9'd286 :
																																																																																																													 9'd287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign new_inp1914_AND_INV_0x7FFFFE_SL_x9487_SRL_x9489__q12 =
	     (new_inp__h41914 & ~(23'h7FFFFE << x__h49487)) >> x__h49489 ;
  assign new_inp4106_AND_INV_0x7FFFFE_SL_x1608_SRL_x1610__q10 =
	     (new_inp__h34106 & ~(23'h7FFFFE << x__h41608)) >> x__h41610 ;
  assign new_inp__h34106 =
	     ffI$D_OUT[95] ? 23'd0 - ffI$D_OUT[94:72] : ffI$D_OUT[94:72] ;
  assign new_inp__h41914 =
	     IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603[23] ?
	       23'd0 -
	       IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603[22:0] :
	       IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603[22:0] ;
  assign ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[38:31] ;
  assign qtop_ffOD_OUT_BITS_20_TO_2__q23 = qtop_ffO$D_OUT[20:2] ;
  assign qtop_ffO_first__824_BITS_20_TO_2_879_BIT_IF_22_ETC___d1897 =
	     qtop_ffOD_OUT_BITS_20_TO_2__q23[i__h116660] ;
  assign qtop_ffO_first__824_BITS_27_TO_23_836_PLUS_1___d1837 =
	     qtop_ffO$D_OUT[27:23] + 5'd1 ;
  assign qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1906 =
	     qtop_ffO$D_OUT[0] & y__h116748 ;
  assign qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1910 =
	     qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1906 &
	     y__h116752 ;
  assign qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6 =
	     qtop_quireToPosit1_fifo_stage0_reg$D_OUT[294:287] ;
  assign qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166 =
	     (qtop_quireToPosit1_fifo_stage0_reg$D_OUT[294:287] ^ 8'h80) <
	     8'd216 ;
  assign rg_quire_15_BIT_287_16_AND_rg_quire_15_BITS_28_ETC___d1631 =
	     { x__h64164,
	       ((IF_0_CONCAT_IF_IF_rg_quire_15_BIT_287_16_THEN__ETC___d1625 ^
		 10'h200) <
		10'd424) ?
		 8'd168 :
		 (((IF_0_CONCAT_IF_IF_rg_quire_15_BIT_287_16_THEN__ETC___d1625 ^
		    10'h200) <=
		   10'd600) ?
		    IF_0_CONCAT_IF_IF_rg_quire_15_BIT_287_16_THEN__ETC___d1625[7:0] :
		    8'd88),
	       twos_complement_carry_int_frac__h60012 } ;
  assign rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123 =
	     rg_quire + fma_multiplier_fifo_output_reg$D_OUT[289:2] ;
  assign shift_new0__h109265 =
	     _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1673 ?
	       _theResult___snd_snd__h110818 :
	       3'd0 ;
  assign shift_new0__h113765 =
	     _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1849 ?
	       _theResult___snd_snd__h115313 :
	       3'd0 ;
  assign shift_new__h110765 = { 1'd0, x__h112056 } ;
  assign shift_new__h115260 = { 1'd0, x__h116551 } ;
  assign stage0_regf_frac__h58910 =
	     { extracter1_fifo_output_reg$D_OUT[18:0], 4'd0 } ;
  assign stage1_regf_frac__h29529 =
	     IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173[19] ?
	       IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173[18:0] :
	       IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173[19:1] ;
  assign truncated_frac__h1204 =
	     flag_truncated_frac__h1202 ?
	       { fma_adder_fifo_stage0_reg$D_OUT[294],
		 flag_truncated_frac__h1202 } :
	       2'b0 ;
  assign truncated_frac_msb__h109270 =
	     (shift_new0__h109265 == 3'd0) ?
	       ftop_ffO$D_OUT[1] :
	       ftop_ffO_first__648_BITS_20_TO_2_703_BIT_IF_22_ETC___d1721 ;
  assign truncated_frac_msb__h113770 =
	     (shift_new0__h113765 == 3'd0) ?
	       qtop_ffO$D_OUT[1] :
	       qtop_ffO_first__824_BITS_20_TO_2_879_BIT_IF_22_ETC___d1897 ;
  assign truncated_frac_msb__h31216 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       frac__h31214[x__h31362[4:0]] :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] != 6'd0 ||
	       ptof_ptoF_fifo_stage0_reg$D_OUT[1] ;
  assign truncated_frac_zero__h30455 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[7] ?
	       { 12'd0,
		 (frac__h30454 &
		  ~(20'hFFFFE <<
		    IF_ftop_fToP_fifo_stage0_reg_first__06_BIT_7_0_ETC___d213[4:0])) >>
		 0 } ==
	       32'd0 :
	       ftop_fToP_fifo_stage0_reg$D_OUT[7:2] == 6'd0 ;
  assign truncated_frac_zero__h31215 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       x__h31410 & y__h31411 :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] == 6'd0 &&
	       ptof_ptoF_fifo_stage0_reg$D_OUT[0] ;
  assign twos_complement_carry_int_frac__h28908 =
	     { ptoq_positToquire_fifo_stage1_reg$D_OUT[266],
	       ptoq_positToquire_fifo_stage1_reg$D_OUT[266] ?
		 287'd0 -
		 { 23'd0, ptoq_positToquire_fifo_stage1_reg$D_OUT[265:2] } :
		 { 23'd0, ptoq_positToquire_fifo_stage1_reg$D_OUT[265:2] } } ;
  assign twos_complement_carry_int_frac__h437 =
	     { fma_multiplier_fifo_stage0_reg$D_OUT[49],
	       fma_multiplier_fifo_stage0_reg$D_OUT[49] ?
		 287'd0 - x__h801 :
		 x__h801 } ;
  assign twos_complement_carry_int_frac__h60012 =
	     rg_quire[287] ? 287'd0 - rg_quire[286:0] : rg_quire[286:0] ;
  assign x12036_BITS_18_TO_0__q18 = x__h112036[18:0] ;
  assign x16531_BITS_18_TO_0__q22 = x__h116531[18:0] ;
  assign x__h109561 = k_expo__h109268 + y__h109563 ;
  assign x__h109886 = 5'd22 - _0_MINUS_ftop_ffOD_OUT_BITS_28_TO_23__q4[4:0] ;
  assign x__h109900 =
	     23'd8388607 >>
	     IF_ftop_ffO_first__648_BIT_27_659_AND_NOT_ftop_ETC___d1665 ;
  assign x__h110643 =
	     _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1673 ?
	       _theResult___fst__h110672 :
	       ftop_ffO$D_OUT[22:21] ;
  assign x__h110727 =
	     5'd2 -
	     _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1672 ;
  assign x__h110769 =
	     3'd1 <<
	     _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1672 ;
  assign x__h112036 =
	     { _22_MINUS_IF_ftop_ffO_first__648_BIT_28_653_THE_ETC___d1672 !=
	       5'd0,
	       ftop_ffO$D_OUT[20:2] } >>
	     shift_new0__h109265 ;
  assign x__h112056 = 2'd0 - ftop_ffO$D_OUT[22:21] ;
  assign x__h112212 =
	     _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712 -
	     5'd1 ;
  assign x__h112373 =
	     _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712 -
	     5'd2 ;
  assign x__h114057 = k_expo__h113768 + y__h114059 ;
  assign x__h114381 = 5'd22 - _0_MINUS_qtop_ffOD_OUT_BITS_28_TO_23__q5[4:0] ;
  assign x__h114395 =
	     23'd8388607 >>
	     IF_qtop_ffO_first__824_BIT_27_835_AND_NOT_qtop_ETC___d1841 ;
  assign x__h115138 =
	     _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1849 ?
	       _theResult___fst__h115167 :
	       qtop_ffO$D_OUT[22:21] ;
  assign x__h115222 =
	     5'd2 -
	     _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1848 ;
  assign x__h115264 =
	     3'd1 <<
	     _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1848 ;
  assign x__h116531 =
	     { _22_MINUS_IF_qtop_ffO_first__824_BIT_28_829_THE_ETC___d1848 !=
	       5'd0,
	       qtop_ffO$D_OUT[20:2] } >>
	     shift_new0__h113765 ;
  assign x__h116551 = 2'd0 - qtop_ffO$D_OUT[22:21] ;
  assign x__h116707 =
	     _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888 -
	     5'd1 ;
  assign x__h116868 =
	     _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888 -
	     5'd2 ;
  assign x__h1250 = x__h1252 | fma_adder_fifo_stage0_reg$D_OUT[0] ;
  assign x__h1252 = all_bits_0__h1207 & fma_adder_fifo_stage0_reg$D_OUT[294] ;
  assign x__h1257 =
	     (!fma_adder_fifo_stage0_reg$D_OUT[294] &&
	      !SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77[287] &&
	      fma_adder_fifo_stage0_reg_first__7_BITS_294_TO_ETC___d82[287]) ?
	       288'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       ((fma_adder_fifo_stage0_reg$D_OUT[294] &&
		 SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77[287] &&
		 !fma_adder_fifo_stage0_reg_first__7_BITS_294_TO_ETC___d82[287]) ?
		  288'h800000000000000000000000000000000000000000000000000000000000000000000000 :
		  fma_adder_fifo_stage0_reg_first__7_BITS_294_TO_ETC___d82) ;
  assign x__h15830 =
	     { fma_adder_fifo_stage0_reg$D_OUT[294], x__h1257[286:0] } ;
  assign x__h28363 =
	     fma_multiplier_fifo_output_reg$D_OUT[1] &
	     fma_multiplier_fifo_output_reg$D_OUT[0] ;
  assign x__h28368 = fma_multiplier_fifo_output_reg$D_OUT[1] & y__h28381 ;
  assign x__h29835 =
	     (10'd155 -
	      { {2{qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6[7]}},
		qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6 }) -
	     10'd1 ;
  assign x__h29851 =
	     ((qtop_quireToPosit1_fifo_stage0_reg$D_OUT[286:0] == 287'd0 &&
	       qtop_quireToPosit1_fifo_stage0_reg$D_OUT[297:296] == 2'd0) ?
		2'd2 :
		qtop_quireToPosit1_fifo_stage0_reg$D_OUT[297:296]) !=
	     2'd2 &&
	     (!qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166 ||
	      carry_int_frac_shifted__h29747[266]) ;
  assign x__h29894 =
	     ((qtop_quireToPosit1_fifo_stage0_reg$D_OUT[286:0] == 287'd0 &&
	       qtop_quireToPosit1_fifo_stage0_reg$D_OUT[297:296] == 2'd0) ?
		2'd2 :
		qtop_quireToPosit1_fifo_stage0_reg$D_OUT[297:296]) ==
	     2'd2 ||
	     qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166 &&
	     carry_int_frac_shifted__h29747[265:0] == 266'd0 ;
  assign x__h30521 = frac__h30454 >> x__h30581 ;
  assign x__h30581 =
	     IF_ftop_fToP_fifo_stage0_reg_first__06_BIT_7_0_ETC___d213 +
	     6'd1 ;
  assign x__h30594 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[7] ?
	       frac__h30454[x__h30581[4:0]] :
	       ftop_fToP_fifo_stage0_reg$D_OUT[7:2] != 6'd0 ||
	       ftop_fToP_fifo_stage0_reg$D_OUT[1] ;
  assign x__h30671 = x__h30683 & truncated_frac_zero__h30455 ;
  assign x__h30683 = x__h30684 & ftop_fToP_fifo_stage0_reg$D_OUT[0] ;
  assign x__h30684 = ~ftop_fToP_fifo_stage0_reg$D_OUT[1] ;
  assign x__h31272 =
	     { ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3[7],
	       ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3 } +
	     9'd127 ;
  assign x__h31302 = frac__h31214 >> x__h31362 ;
  assign x__h31362 =
	     IF_ptof_ptoF_fifo_stage0_reg_first__45_BIT_7_5_ETC___d259 +
	     6'd1 ;
  assign x__h31389 = x__h31390 | frac_f__h31220[0] ;
  assign x__h31390 = ~truncated_frac_zero__h31215 ;
  assign x__h31410 = ~ptof_ptoF_fifo_stage0_reg$D_OUT[1] ;
  assign x__h34817 =
	     INV_new_inp4106__q2[22] ?
	       5'd0 :
	       (INV_new_inp4106__q2[21] ?
		  5'd1 :
		  (INV_new_inp4106__q2[20] ?
		     5'd2 :
		     (INV_new_inp4106__q2[19] ?
			5'd3 :
			(INV_new_inp4106__q2[18] ?
			   5'd4 :
			   (INV_new_inp4106__q2[17] ?
			      5'd5 :
			      (INV_new_inp4106__q2[16] ?
				 5'd6 :
				 (INV_new_inp4106__q2[15] ?
				    5'd7 :
				    (INV_new_inp4106__q2[14] ?
				       5'd8 :
				       (INV_new_inp4106__q2[13] ?
					  5'd9 :
					  (INV_new_inp4106__q2[12] ?
					     5'd10 :
					     (INV_new_inp4106__q2[11] ?
						5'd11 :
						(INV_new_inp4106__q2[10] ?
						   5'd12 :
						   (INV_new_inp4106__q2[9] ?
						      5'd13 :
						      (INV_new_inp4106__q2[8] ?
							 5'd14 :
							 (INV_new_inp4106__q2[7] ?
							    5'd15 :
							    (INV_new_inp4106__q2[6] ?
							       5'd16 :
							       (INV_new_inp4106__q2[5] ?
								  5'd17 :
								  (INV_new_inp4106__q2[4] ?
								     5'd18 :
								     (INV_new_inp4106__q2[3] ?
									5'd19 :
									(INV_new_inp4106__q2[2] ?
									   5'd20 :
									   (INV_new_inp4106__q2[1] ?
									      5'd21 :
									      (INV_new_inp4106__q2[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h38068 = { 1'd0, x__h38075 } ;
  assign x__h38075 =
	     new_inp__h34106[22] ?
	       5'd0 :
	       (new_inp__h34106[21] ?
		  5'd1 :
		  (new_inp__h34106[20] ?
		     5'd2 :
		     (new_inp__h34106[19] ?
			5'd3 :
			(new_inp__h34106[18] ?
			   5'd4 :
			   (new_inp__h34106[17] ?
			      5'd5 :
			      (new_inp__h34106[16] ?
				 5'd6 :
				 (new_inp__h34106[15] ?
				    5'd7 :
				    (new_inp__h34106[14] ?
				       5'd8 :
				       (new_inp__h34106[13] ?
					  5'd9 :
					  (new_inp__h34106[12] ?
					     5'd10 :
					     (new_inp__h34106[11] ?
						5'd11 :
						(new_inp__h34106[10] ?
						   5'd12 :
						   (new_inp__h34106[9] ?
						      5'd13 :
						      (new_inp__h34106[8] ?
							 5'd14 :
							 (new_inp__h34106[7] ?
							    5'd15 :
							    (new_inp__h34106[6] ?
							       5'd16 :
							       (new_inp__h34106[5] ?
								  5'd17 :
								  (new_inp__h34106[4] ?
								     5'd18 :
								     (new_inp__h34106[3] ?
									5'd19 :
									(new_inp__h34106[2] ?
									   5'd20 :
									   (new_inp__h34106[1] ?
									      5'd21 :
									      (new_inp__h34106[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h41608 =
	     IF_IF_ffI_first__06_BIT_95_40_THEN_0_MINUS_ffI_ETC___d541 -
	     5'd1 ;
  assign x__h41610 =
	     IF_IF_ffI_first__06_BIT_95_40_THEN_0_MINUS_ffI_ETC___d541 -
	     5'd2 ;
  assign x__h41645 =
	     5'd2 -
	     IF_IF_ffI_first__06_BIT_95_40_THEN_0_MINUS_ffI_ETC___d541 ;
  assign x__h42696 =
	     INV_new_inp1914__q11[22] ?
	       5'd0 :
	       (INV_new_inp1914__q11[21] ?
		  5'd1 :
		  (INV_new_inp1914__q11[20] ?
		     5'd2 :
		     (INV_new_inp1914__q11[19] ?
			5'd3 :
			(INV_new_inp1914__q11[18] ?
			   5'd4 :
			   (INV_new_inp1914__q11[17] ?
			      5'd5 :
			      (INV_new_inp1914__q11[16] ?
				 5'd6 :
				 (INV_new_inp1914__q11[15] ?
				    5'd7 :
				    (INV_new_inp1914__q11[14] ?
				       5'd8 :
				       (INV_new_inp1914__q11[13] ?
					  5'd9 :
					  (INV_new_inp1914__q11[12] ?
					     5'd10 :
					     (INV_new_inp1914__q11[11] ?
						5'd11 :
						(INV_new_inp1914__q11[10] ?
						   5'd12 :
						   (INV_new_inp1914__q11[9] ?
						      5'd13 :
						      (INV_new_inp1914__q11[8] ?
							 5'd14 :
							 (INV_new_inp1914__q11[7] ?
							    5'd15 :
							    (INV_new_inp1914__q11[6] ?
							       5'd16 :
							       (INV_new_inp1914__q11[5] ?
								  5'd17 :
								  (INV_new_inp1914__q11[4] ?
								     5'd18 :
								     (INV_new_inp1914__q11[3] ?
									5'd19 :
									(INV_new_inp1914__q11[2] ?
									   5'd20 :
									   (INV_new_inp1914__q11[1] ?
									      5'd21 :
									      (INV_new_inp1914__q11[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h45947 = { 1'd0, x__h45954 } ;
  assign x__h45954 =
	     new_inp__h41914[22] ?
	       5'd0 :
	       (new_inp__h41914[21] ?
		  5'd1 :
		  (new_inp__h41914[20] ?
		     5'd2 :
		     (new_inp__h41914[19] ?
			5'd3 :
			(new_inp__h41914[18] ?
			   5'd4 :
			   (new_inp__h41914[17] ?
			      5'd5 :
			      (new_inp__h41914[16] ?
				 5'd6 :
				 (new_inp__h41914[15] ?
				    5'd7 :
				    (new_inp__h41914[14] ?
				       5'd8 :
				       (new_inp__h41914[13] ?
					  5'd9 :
					  (new_inp__h41914[12] ?
					     5'd10 :
					     (new_inp__h41914[11] ?
						5'd11 :
						(new_inp__h41914[10] ?
						   5'd12 :
						   (new_inp__h41914[9] ?
						      5'd13 :
						      (new_inp__h41914[8] ?
							 5'd14 :
							 (new_inp__h41914[7] ?
							    5'd15 :
							    (new_inp__h41914[6] ?
							       5'd16 :
							       (new_inp__h41914[5] ?
								  5'd17 :
								  (new_inp__h41914[4] ?
								     5'd18 :
								     (new_inp__h41914[3] ?
									5'd19 :
									(new_inp__h41914[2] ?
									   5'd20 :
									   (new_inp__h41914[1] ?
									      5'd21 :
									      (new_inp__h41914[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h49487 =
	     IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d807 -
	     5'd1 ;
  assign x__h49489 =
	     IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d807 -
	     5'd2 ;
  assign x__h49524 =
	     5'd2 -
	     IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d807 ;
  assign x__h5435 =
	     fma_adder_fifo_stage0_reg$D_OUT[7] &
	     fma_adder_fifo_stage0_reg$D_OUT[6] ;
  assign x__h58169 =
	     extracter1_fifo_output_reg$D_OUT[29:28] == 2'd1 &&
	     extracter2_fifo_output_reg$D_OUT[29:28] == 2'd2 ||
	     extracter2_fifo_output_reg$D_OUT[29:28] == 2'd1 &&
	     extracter1_fifo_output_reg$D_OUT[29:28] == 2'd2 ;
  assign x__h58254 =
	     x__h58276 &
	     IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC___d928[0] ;
  assign x__h58276 =
	     x__h58278 &
	     IF_extracter1_fifo_output_reg_first__09_BITS_2_ETC___d928[1] ;
  assign x__h58278 =
	     extracter1_fifo_output_reg$D_OUT[27] ^
	     extracter2_fifo_output_reg$D_OUT[27] ;
  assign x__h59499 =
	     ffI_f_rv$port1__read[30:23] == 8'd255 &&
	     ffI_f_rv$port1__read[22:0] != 23'd0 ;
  assign x__h59670 = ffI_f_rv$port1__read[2:0] == 3'd0 ;
  assign x__h59907 =
	     SEXT_extracter1_fifo_output_reg_first__09_BITS_ETC___d934 +
	     9'd113 ;
  assign x__h64164 = rg_quire[287] && rg_quire[286:0] == 287'd0 ;
  assign x__h670 = fma_multiplier_fifo_stage0_reg$D_OUT[39:0] >> x__h703 ;
  assign x__h703 =
	     10'd38 -
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12 ;
  assign x__h791 =
	     SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8 +
	     10'd94 ;
  assign x__h801 =
	     { IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d27,
	       IF_fma_multiplier_fifo_stage0_reg_first_BIT_48_ETC___d36 } ;
  assign x__h832 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[48] &&
	     !IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15 &&
	     fma_multiplier_fifo_stage0_regD_OUT_BITS_39_TO_0__q9[x__h869[5:0]] ;
  assign x__h869 =
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8[8:0] -
	     9'd1 ;
  assign x__h876 =
	     !fma_multiplier_fifo_stage0_reg$D_OUT[48] ||
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15 ||
	     (IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8[8:0] ^
	      9'h100) <=
	     9'd257 ||
	     (f_new__h487 & mask1__h712) == 264'd0 ;
  assign x__h893 =
	     264'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >>
	     x__h869 ;
  assign x_frac__h30468 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[7] ?
	       x__h30521[18:0] :
	       ((ftop_fToP_fifo_stage0_reg$D_OUT[7:2] == 6'd0) ?
		  ftop_fToP_fifo_stage0_reg$D_OUT[26:8] :
		  19'd524287) ;
  assign y__h109562 = { 22'd0, _theResult____h109275 } ;
  assign y__h109563 =
	     { 4'd0, x__h112036[18:0] } >>
	     _19_MINUS_IF_22_MINUS_IF_ftop_ffO_first__648_BI_ETC___d1712 ;
  assign y__h112253 = ~ftop_ffO$D_OUT[1] ;
  assign y__h112257 =
	     { 13'd0,
	       (ftop_ffO$D_OUT[20:2] & ~(19'h7FFFE << i1__h112263)) >> 0 } ==
	     32'd0 ;
  assign y__h114058 = { 22'd0, _theResult____h113775 } ;
  assign y__h114059 =
	     { 4'd0, x__h116531[18:0] } >>
	     _19_MINUS_IF_22_MINUS_IF_qtop_ffO_first__824_BI_ETC___d1888 ;
  assign y__h116748 = ~qtop_ffO$D_OUT[1] ;
  assign y__h116752 =
	     { 13'd0,
	       (qtop_ffO$D_OUT[20:2] & ~(19'h7FFFE << i1__h116758)) >> 0 } ==
	     32'd0 ;
  assign y__h1251 =
	     fma_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd1 ||
	     fma_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd1 ;
  assign y__h15806 = ~fma_adder_fifo_stage0_reg$D_OUT[294] ;
  assign y__h28381 = ~fma_multiplier_fifo_output_reg$D_OUT[0] ;
  assign y__h31411 =
	     { 8'd0,
	       (frac__h31214 &
		~(24'hFFFFFE <<
		  IF_ptof_ptoF_fifo_stage0_reg_first__45_BIT_7_5_ETC___d259[4:0])) >>
	       0 } ==
	     32'd0 ;
  always@(ffO$D_OUT)
  begin
    case (ffO$D_OUT[70:69])
      2'd0, 2'd1:
	  CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1 =
	      ffO$D_OUT[70:69];
      default: CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1 = 2'd2;
    endcase
  end
  always@(IF_IF_ffI_first__06_BIT_95_40_THEN_0_MINUS_ffI_ETC___d541)
  begin
    case (IF_IF_ffI_first__06_BIT_95_40_THEN_0_MINUS_ffI_ETC___d541)
      5'd3: x__h41657 = 19'd18;
      5'd4: x__h41657 = 19'd17;
      5'd5: x__h41657 = 19'd16;
      5'd6: x__h41657 = 19'd15;
      5'd7: x__h41657 = 19'd14;
      5'd8: x__h41657 = 19'd13;
      5'd9: x__h41657 = 19'd12;
      5'd10: x__h41657 = 19'd11;
      5'd11: x__h41657 = 19'd10;
      5'd12: x__h41657 = 19'd9;
      5'd13: x__h41657 = 19'd8;
      5'd14: x__h41657 = 19'd7;
      5'd15: x__h41657 = 19'd6;
      5'd16: x__h41657 = 19'd5;
      5'd17: x__h41657 = 19'd4;
      5'd18: x__h41657 = 19'd3;
      5'd19: x__h41657 = 19'd2;
      5'd20: x__h41657 = 19'd1;
      5'd21: x__h41657 = 19'd0;
      default: x__h41657 =
		   (IF_IF_ffI_first__06_BIT_95_40_THEN_0_MINUS_ffI_ETC___d541 <=
		    5'd2) ?
		     19'd19 :
		     19'd0;
    endcase
  end
  always@(ptof_ptoF_fifo_stage0_reg$D_OUT or
	  float_no__h31221 or add_round__h31222)
  begin
    case (ptof_ptoF_fifo_stage0_reg$D_OUT[40:39])
      2'd1: float_no__h31224 = 32'hFF800000;
      2'd2: float_no__h31224 = 32'd0;
      default: float_no__h31224 =
		   float_no__h31221 + { 31'd0, add_round__h31222 };
    endcase
  end
  always@(ffI$D_OUT or in_posit2___1_posit_inp__h41970)
  begin
    case (ffI$D_OUT[2:0])
      3'd2, 3'd3:
	  IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603 =
	      in_posit2___1_posit_inp__h41970;
      default: IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d603 =
		   ffI$D_OUT[29:6];
    endcase
  end
  always@(IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d807)
  begin
    case (IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d807)
      5'd3: x__h49536 = 19'd18;
      5'd4: x__h49536 = 19'd17;
      5'd5: x__h49536 = 19'd16;
      5'd6: x__h49536 = 19'd15;
      5'd7: x__h49536 = 19'd14;
      5'd8: x__h49536 = 19'd13;
      5'd9: x__h49536 = 19'd12;
      5'd10: x__h49536 = 19'd11;
      5'd11: x__h49536 = 19'd10;
      5'd12: x__h49536 = 19'd9;
      5'd13: x__h49536 = 19'd8;
      5'd14: x__h49536 = 19'd7;
      5'd15: x__h49536 = 19'd6;
      5'd16: x__h49536 = 19'd5;
      5'd17: x__h49536 = 19'd4;
      5'd18: x__h49536 = 19'd3;
      5'd19: x__h49536 = 19'd2;
      5'd20: x__h49536 = 19'd1;
      5'd21: x__h49536 = 19'd0;
      default: x__h49536 =
		   (IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d807 <=
		    5'd2) ?
		     19'd19 :
		     19'd0;
    endcase
  end
  always@(shift_new0__h109265 or
	  ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1734 or
	  ftop_ffO$D_OUT or
	  ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1730)
  begin
    case (shift_new0__h109265)
      3'd0:
	  CASE_shift_new009265_0_ftop_ffOD_OUT_BIT_0_1__ETC__q20 =
	      ftop_ffO$D_OUT[0];
      3'd1:
	  CASE_shift_new009265_0_ftop_ffOD_OUT_BIT_0_1__ETC__q20 =
	      ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1730;
      default: CASE_shift_new009265_0_ftop_ffOD_OUT_BIT_0_1__ETC__q20 =
		   ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1734;
    endcase
  end
  always@(shift_new0__h109265 or
	  ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1734 or
	  ftop_ffO$D_OUT or
	  ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1730)
  begin
    case (shift_new0__h109265)
      3'd0:
	  CASE_shift_new009265_0_NOT_ftop_ffOD_OUT_BIT__ETC__q21 =
	      !ftop_ffO$D_OUT[0];
      3'd1:
	  CASE_shift_new009265_0_NOT_ftop_ffOD_OUT_BIT__ETC__q21 =
	      !ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1730;
      default: CASE_shift_new009265_0_NOT_ftop_ffOD_OUT_BIT__ETC__q21 =
		   !ftop_ffO_first__648_BIT_0_727_AND_INV_ftop_ffO_ETC___d1734;
    endcase
  end
  always@(ftop_ffO$D_OUT or a__h109312)
  begin
    case (ftop_ffO$D_OUT[31:30])
      2'd0:
	  output_regf_out_posit__h109296 =
	      { ftop_ffO$D_OUT[32],
		ftop_ffO$D_OUT[32] ? 23'd0 - a__h109312 : a__h109312 };
      2'd1: output_regf_out_posit__h109296 = 24'd8388608;
      default: output_regf_out_posit__h109296 = 24'd0;
    endcase
  end
  always@(shift_new0__h113765 or
	  qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1910 or
	  qtop_ffO$D_OUT or
	  qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1906)
  begin
    case (shift_new0__h113765)
      3'd0:
	  CASE_shift_new013765_0_qtop_ffOD_OUT_BIT_0_1__ETC__q24 =
	      qtop_ffO$D_OUT[0];
      3'd1:
	  CASE_shift_new013765_0_qtop_ffOD_OUT_BIT_0_1__ETC__q24 =
	      qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1906;
      default: CASE_shift_new013765_0_qtop_ffOD_OUT_BIT_0_1__ETC__q24 =
		   qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1910;
    endcase
  end
  always@(shift_new0__h113765 or
	  qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1910 or
	  qtop_ffO$D_OUT or
	  qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1906)
  begin
    case (shift_new0__h113765)
      3'd0:
	  CASE_shift_new013765_0_NOT_qtop_ffOD_OUT_BIT__ETC__q25 =
	      !qtop_ffO$D_OUT[0];
      3'd1:
	  CASE_shift_new013765_0_NOT_qtop_ffOD_OUT_BIT__ETC__q25 =
	      !qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1906;
      default: CASE_shift_new013765_0_NOT_qtop_ffOD_OUT_BIT__ETC__q25 =
		   !qtop_ffO_first__824_BIT_0_903_AND_INV_qtop_ffO_ETC___d1910;
    endcase
  end
  always@(qtop_ffO$D_OUT or a__h113808)
  begin
    case (qtop_ffO$D_OUT[31:30])
      2'd0:
	  output_regf_out_posit__h113792 =
	      { qtop_ffO$D_OUT[32],
		qtop_ffO$D_OUT[32] ? 23'd0 - a__h113808 : a__h113808 };
      2'd1: output_regf_out_posit__h113792 = 24'd8388608;
      default: output_regf_out_posit__h113792 = 24'd0;
    endcase
  end
  always@(ffI$D_OUT or
	  extracter1_fifo_output_reg$FULL_N or
	  extracter2_fifo_output_reg$FULL_N or ffI_f_rv)
  begin
    case (ffI$D_OUT[2:0])
      3'd0, 3'd1, 3'd2, 3'd3:
	  IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329 =
	      extracter1_fifo_output_reg$FULL_N &&
	      extracter2_fifo_output_reg$FULL_N;
      3'd4:
	  IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329 =
	      !ffI_f_rv[32];
      default: IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329 =
		   ffI$D_OUT[2:0] != 3'd5 && ffI$D_OUT[2:0] != 3'd7 ||
		   extracter1_fifo_output_reg$FULL_N;
    endcase
  end
  always@(opcode_out$D_OUT or
	  ffO$FULL_N or
	  normalizer_fifo_output_reg$EMPTY_N or
	  fma_ffO$EMPTY_N or ptof_ffO$EMPTY_N or ptoq_ffO$EMPTY_N)
  begin
    case (opcode_out$D_OUT)
      3'd0, 3'd2:
	  IF_opcode_out_first__028_EQ_0_029_OR_opcode_ou_ETC___d2051 =
	      fma_ffO$EMPTY_N && ffO$FULL_N;
      3'd5:
	  IF_opcode_out_first__028_EQ_0_029_OR_opcode_ou_ETC___d2051 =
	      ffO$FULL_N && ptof_ffO$EMPTY_N;
      3'd7:
	  IF_opcode_out_first__028_EQ_0_029_OR_opcode_ou_ETC___d2051 =
	      ffO$FULL_N && ptoq_ffO$EMPTY_N;
      default: IF_opcode_out_first__028_EQ_0_029_OR_opcode_ou_ETC___d2051 =
		   opcode_out$D_OUT != 3'd4 && opcode_out$D_OUT != 3'd6 ||
		   ffO$FULL_N && normalizer_fifo_output_reg$EMPTY_N;
    endcase
  end
  always@(server_core_request_put)
  begin
    case (server_core_request_put[137:136])
      2'd0, 2'd1:
	  CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q32 =
	      server_core_request_put[137:136];
      default: CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q32 = 2'd2;
    endcase
  end
  always@(server_core_request_put)
  begin
    case (server_core_request_put[71:70])
      2'd0, 2'd1:
	  CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q33 =
	      server_core_request_put[71:70];
      default: CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q33 = 2'd2;
    endcase
  end
  always@(float_no__h31224)
  begin
    case (float_no__h31224)
      32'd0: CASE_float_no1224_0_2_4286578688_1_0__q34 = 2'd2;
      32'hFF800000: CASE_float_no1224_0_2_4286578688_1_0__q34 = 2'd1;
      default: CASE_float_no1224_0_2_4286578688_1_0__q34 = 2'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ffI_f_rv <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	fma_check_quire <= `BSV_ASSIGNMENT_DELAY 1'd0;
	opcode_in_rv <= `BSV_ASSIGNMENT_DELAY 4'd2;
	rg_quire <= `BSV_ASSIGNMENT_DELAY 288'd0;
	rg_quire_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (ffI_f_rv$EN) ffI_f_rv <= `BSV_ASSIGNMENT_DELAY ffI_f_rv$D_IN;
	if (fma_check_quire$EN)
	  fma_check_quire <= `BSV_ASSIGNMENT_DELAY fma_check_quire$D_IN;
	if (opcode_in_rv$EN)
	  opcode_in_rv <= `BSV_ASSIGNMENT_DELAY opcode_in_rv$D_IN;
	if (rg_quire$EN) rg_quire <= `BSV_ASSIGNMENT_DELAY rg_quire$D_IN;
	if (rg_quire_busy$EN)
	  rg_quire_busy <= `BSV_ASSIGNMENT_DELAY rg_quire_busy$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ffI_f_rv = 33'h0AAAAAAAA;
    fma_check_quire = 1'h0;
    opcode_in_rv = 4'hA;
    rg_quire =
	288'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_quire_busy = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867)
	begin
	  v__h57841 = $stime;
	  #0;
	end
    v__h57835 = v__h57841 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867)
	$write("%0d: %m: rl_extract_in: ", v__h57835);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867 &&
	  ffI$D_OUT[2:0] == 3'd0)
	$write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867 &&
	  ffI$D_OUT[2:0] == 3'd1)
	$write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867 &&
	  ffI$D_OUT[2:0] == 3'd2)
	$write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867 &&
	  ffI$D_OUT[2:0] == 3'd3)
	$write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867 &&
	  ffI$D_OUT[2:0] == 3'd4)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867 &&
	  ffI$D_OUT[2:0] == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867 &&
	  ffI$D_OUT[2:0] == 3'd6)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867 &&
	  ffI$D_OUT[2:0] != 3'd0 &&
	  ffI$D_OUT[2:0] != 3'd1 &&
	  ffI$D_OUT[2:0] != 3'd2 &&
	  ffI$D_OUT[2:0] != 3'd3 &&
	  ffI$D_OUT[2:0] != 3'd4 &&
	  ffI$D_OUT[2:0] != 3'd5 &&
	  ffI$D_OUT[2:0] != 3'd6)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867)
	$write("'h%h", ffI$D_OUT[95:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867)
	$write("'h%h", ffI$D_OUT[29:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_66___d867)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_66___d867)
	begin
	  v__h113692 = $stime;
	  #0;
	end
    v__h113686 = v__h113692 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_66___d867)
	$write("%0d: %m: rl_norm: ", v__h113686);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_66___d867)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_66___d867)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_66___d867)
	begin
	  v__h118210 = $stime;
	  #0;
	end
    v__h118204 = v__h118210 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_66___d867)
	$write("%0d: %m: rl_norm: ", v__h118204);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_66___d867)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_66___d867)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	begin
	  v__h109224 = $stime;
	  #0;
	end
    v__h109218 = v__h109224 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	$write("%0d: %m: rl_norm: Error Illegal Opcode", v__h109218);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd0) $write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd1) $write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd2) $write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd3) $write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6 &&
	  opcode_norm$D_OUT != 3'd0 &&
	  opcode_norm$D_OUT != 3'd1 &&
	  opcode_norm$D_OUT != 3'd2 &&
	  opcode_norm$D_OUT != 3'd3 &&
	  opcode_norm$D_OUT != 3'd5)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd7 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd6)
	begin
	  v__h119345 = $stime;
	  #0;
	end
    v__h119339 = v__h119345 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd7 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd6)
	$write("%0d: %m: rl_out: Error Illegal Opcode", v__h119339);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd1) $write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd3) $write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd7 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd6)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_66___d867)
	begin
	  v__h119487 = $stime;
	  #0;
	end
    v__h119481 = v__h119487 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_66___d867)
	$write("%0d: %m: rl_out: ", v__h119481);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_66___d867 &&
	  opcode_out$D_OUT == 3'd0)
	$write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_66___d867 &&
	  opcode_out$D_OUT == 3'd1)
	$write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_66___d867 &&
	  opcode_out$D_OUT == 3'd2)
	$write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_66___d867 &&
	  opcode_out$D_OUT == 3'd3)
	$write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_66___d867 &&
	  opcode_out$D_OUT == 3'd4)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_66___d867 &&
	  opcode_out$D_OUT == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_66___d867 &&
	  opcode_out$D_OUT == 3'd6)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_66___d867 &&
	  opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd1 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd3 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd6)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_66___d867) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_66___d867)
	$display("  QUIRE: %h", rg_quire);
  end
  // synopsys translate_on
endmodule  // mkPositCore

