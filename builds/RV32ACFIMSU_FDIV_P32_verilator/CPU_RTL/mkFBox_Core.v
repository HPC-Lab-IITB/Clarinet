//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// valid                          O     1
// word_fst                       O    64
// word_snd                       O     5
// verbosity                      I     4
// CLK                            I     1 clock
// RST_N                          I     1 reset
// req_opcode                     I     7
// req_f7                         I     7
// req_rm                         I     3
// req_rs2                        I     5
// req_v1                         I    64
// req_v2                         I    64
// req_v3                         I    64
// req_pv1                        I    32
// req_pv2                        I    32
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFBox_Core(verbosity,
		   CLK,
		   RST_N,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_opcode,
		   req_f7,
		   req_rm,
		   req_rs2,
		   req_v1,
		   req_v2,
		   req_v3,
		   req_pv1,
		   req_pv2,
		   EN_req,

		   valid,

		   word_fst,

		   word_snd);
  input  [3 : 0] verbosity;
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [6 : 0] req_opcode;
  input  [6 : 0] req_f7;
  input  [2 : 0] req_rm;
  input  [4 : 0] req_rs2;
  input  [63 : 0] req_v1;
  input  [63 : 0] req_v2;
  input  [63 : 0] req_v3;
  input  [31 : 0] req_pv1;
  input  [31 : 0] req_pv2;
  input  EN_req;

  // value method valid
  output valid;

  // value method word_fst
  output [63 : 0] word_fst;

  // value method word_snd
  output [4 : 0] word_snd;

  // signals for module outputs
  wire [63 : 0] word_fst;
  wire [4 : 0] word_snd;
  wire RDY_server_reset_request_put, RDY_server_reset_response_get, valid;

  // inlined wires
  reg [68 : 0] dw_result$wget;
  wire dw_valid$wget, dw_valid$whas;

  // register requestR
  reg [278 : 0] requestR;
  wire [278 : 0] requestR$D_IN;
  wire requestR$EN;

  // register resultR
  reg [69 : 0] resultR;
  reg [69 : 0] resultR$D_IN;
  wire resultR$EN;

  // register stateR
  reg [2 : 0] stateR;
  reg [2 : 0] stateR$D_IN;
  wire stateR$EN;

  // ports of submodule fpu
  reg [204 : 0] fpu$server_core_request_put;
  wire [70 : 0] fpu$server_core_response_get;
  wire fpu$EN_server_core_request_put,
       fpu$EN_server_core_response_get,
       fpu$EN_server_reset_request_put,
       fpu$EN_server_reset_response_get,
       fpu$RDY_server_core_request_put,
       fpu$RDY_server_core_response_get,
       fpu$RDY_server_reset_request_put,
       fpu$RDY_server_reset_response_get;

  // ports of submodule frmFpuF
  wire frmFpuF$CLR, frmFpuF$DEQ, frmFpuF$D_IN, frmFpuF$ENQ;

  // ports of submodule positCore
  reg [137 : 0] positCore$server_core_request_put;
  wire [70 : 0] positCore$server_core_response_get;
  wire positCore$EN_server_core_request_put,
       positCore$EN_server_core_response_get,
       positCore$RDY_server_core_request_put,
       positCore$RDY_server_core_response_get;

  // ports of submodule resetReqsF
  wire resetReqsF$CLR,
       resetReqsF$DEQ,
       resetReqsF$EMPTY_N,
       resetReqsF$ENQ,
       resetReqsF$FULL_N;

  // ports of submodule resetRspsF
  wire resetRspsF$CLR,
       resetRspsF$DEQ,
       resetRspsF$EMPTY_N,
       resetRspsF$ENQ,
       resetRspsF$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_doFADD_S,
       CAN_FIRE_RL_doFCLASS_S,
       CAN_FIRE_RL_doFCVT_P_R,
       CAN_FIRE_RL_doFCVT_P_S,
       CAN_FIRE_RL_doFCVT_R_P,
       CAN_FIRE_RL_doFCVT_S_P,
       CAN_FIRE_RL_doFCVT_S_W,
       CAN_FIRE_RL_doFCVT_S_WU,
       CAN_FIRE_RL_doFCVT_WU_S,
       CAN_FIRE_RL_doFCVT_W_S,
       CAN_FIRE_RL_doFDA_P,
       CAN_FIRE_RL_doFDIV_S,
       CAN_FIRE_RL_doFDS_P,
       CAN_FIRE_RL_doFEQ_S,
       CAN_FIRE_RL_doFLE_S,
       CAN_FIRE_RL_doFLT_S,
       CAN_FIRE_RL_doFMADD_S,
       CAN_FIRE_RL_doFMAX_S,
       CAN_FIRE_RL_doFMA_P,
       CAN_FIRE_RL_doFMIN_S,
       CAN_FIRE_RL_doFMSUB_S,
       CAN_FIRE_RL_doFMS_P,
       CAN_FIRE_RL_doFMUL_S,
       CAN_FIRE_RL_doFMV_W_X,
       CAN_FIRE_RL_doFMV_X_W,
       CAN_FIRE_RL_doFNMADD_S,
       CAN_FIRE_RL_doFNMSUB_S,
       CAN_FIRE_RL_doFSGNJN_S,
       CAN_FIRE_RL_doFSGNJX_S,
       CAN_FIRE_RL_doFSGNJ_S,
       CAN_FIRE_RL_doFSUB_S,
       CAN_FIRE_RL_doPMV_W_X,
       CAN_FIRE_RL_doPMV_X_W,
       CAN_FIRE_RL_rl_drive_fpu_result,
       CAN_FIRE_RL_rl_get_fpu_result,
       CAN_FIRE_RL_rl_get_posit_result,
       CAN_FIRE_RL_rl_reset_begin,
       CAN_FIRE_RL_rl_reset_end,
       CAN_FIRE_req,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       WILL_FIRE_RL_doFADD_S,
       WILL_FIRE_RL_doFCLASS_S,
       WILL_FIRE_RL_doFCVT_P_R,
       WILL_FIRE_RL_doFCVT_P_S,
       WILL_FIRE_RL_doFCVT_R_P,
       WILL_FIRE_RL_doFCVT_S_P,
       WILL_FIRE_RL_doFCVT_S_W,
       WILL_FIRE_RL_doFCVT_S_WU,
       WILL_FIRE_RL_doFCVT_WU_S,
       WILL_FIRE_RL_doFCVT_W_S,
       WILL_FIRE_RL_doFDA_P,
       WILL_FIRE_RL_doFDIV_S,
       WILL_FIRE_RL_doFDS_P,
       WILL_FIRE_RL_doFEQ_S,
       WILL_FIRE_RL_doFLE_S,
       WILL_FIRE_RL_doFLT_S,
       WILL_FIRE_RL_doFMADD_S,
       WILL_FIRE_RL_doFMAX_S,
       WILL_FIRE_RL_doFMA_P,
       WILL_FIRE_RL_doFMIN_S,
       WILL_FIRE_RL_doFMSUB_S,
       WILL_FIRE_RL_doFMS_P,
       WILL_FIRE_RL_doFMUL_S,
       WILL_FIRE_RL_doFMV_W_X,
       WILL_FIRE_RL_doFMV_X_W,
       WILL_FIRE_RL_doFNMADD_S,
       WILL_FIRE_RL_doFNMSUB_S,
       WILL_FIRE_RL_doFSGNJN_S,
       WILL_FIRE_RL_doFSGNJX_S,
       WILL_FIRE_RL_doFSGNJ_S,
       WILL_FIRE_RL_doFSUB_S,
       WILL_FIRE_RL_doPMV_W_X,
       WILL_FIRE_RL_doPMV_X_W,
       WILL_FIRE_RL_rl_drive_fpu_result,
       WILL_FIRE_RL_rl_get_fpu_result,
       WILL_FIRE_RL_rl_get_posit_result,
       WILL_FIRE_RL_rl_reset_begin,
       WILL_FIRE_RL_rl_reset_end,
       WILL_FIRE_req,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get;

  // inputs to muxes for submodule ports
  wire [278 : 0] MUX_requestR$write_1__VAL_2;
  wire [204 : 0] MUX_fpu$server_core_request_put_1__VAL_1,
		 MUX_fpu$server_core_request_put_1__VAL_2,
		 MUX_fpu$server_core_request_put_1__VAL_3,
		 MUX_fpu$server_core_request_put_1__VAL_4,
		 MUX_fpu$server_core_request_put_1__VAL_5,
		 MUX_fpu$server_core_request_put_1__VAL_6,
		 MUX_fpu$server_core_request_put_1__VAL_7,
		 MUX_fpu$server_core_request_put_1__VAL_8;
  wire [137 : 0] MUX_positCore$server_core_request_put_1__VAL_1,
		 MUX_positCore$server_core_request_put_1__VAL_2,
		 MUX_positCore$server_core_request_put_1__VAL_3,
		 MUX_positCore$server_core_request_put_1__VAL_4,
		 MUX_positCore$server_core_request_put_1__VAL_5,
		 MUX_positCore$server_core_request_put_1__VAL_6,
		 MUX_positCore$server_core_request_put_1__VAL_7,
		 MUX_positCore$server_core_request_put_1__VAL_8;
  wire [69 : 0] MUX_resultR$write_1__VAL_10,
		MUX_resultR$write_1__VAL_11,
		MUX_resultR$write_1__VAL_12,
		MUX_resultR$write_1__VAL_13,
		MUX_resultR$write_1__VAL_14,
		MUX_resultR$write_1__VAL_15,
		MUX_resultR$write_1__VAL_16,
		MUX_resultR$write_1__VAL_17,
		MUX_resultR$write_1__VAL_18,
		MUX_resultR$write_1__VAL_19,
		MUX_resultR$write_1__VAL_20,
		MUX_resultR$write_1__VAL_3,
		MUX_resultR$write_1__VAL_4,
		MUX_resultR$write_1__VAL_5,
		MUX_resultR$write_1__VAL_6,
		MUX_resultR$write_1__VAL_7,
		MUX_resultR$write_1__VAL_8,
		MUX_resultR$write_1__VAL_9;
  wire [68 : 0] MUX_dw_result$wset_1__VAL_1, MUX_dw_result$wset_1__VAL_2;
  wire MUX_dw_result$wset_1__SEL_1, MUX_dw_result$wset_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1136;
  reg [31 : 0] v__h1567;
  reg [31 : 0] v__h1756;
  reg [31 : 0] v__h1957;
  reg [31 : 0] v__h2211;
  reg [31 : 0] v__h2396;
  reg [31 : 0] v__h2581;
  reg [31 : 0] v__h2773;
  reg [31 : 0] v__h3087;
  reg [31 : 0] v__h3271;
  reg [31 : 0] v__h3354;
  reg [31 : 0] v__h3532;
  reg [31 : 0] v__h3812;
  reg [31 : 0] v__h3959;
  reg [31 : 0] v__h4106;
  reg [31 : 0] v__h4253;
  reg [31 : 0] v__h4393;
  reg [31 : 0] v__h4517;
  reg [31 : 0] v__h4599;
  reg [31 : 0] v__h4765;
  reg [31 : 0] v__h4933;
  reg [31 : 0] v__h5109;
  reg [31 : 0] v__h11605;
  reg [31 : 0] v__h17783;
  reg [31 : 0] v__h19409;
  reg [31 : 0] v__h20191;
  reg [31 : 0] v__h22850;
  reg [31 : 0] v__h25406;
  reg [31 : 0] v__h25561;
  reg [31 : 0] v__h25731;
  reg [31 : 0] v__h27243;
  reg [31 : 0] v__h28343;
  reg [31 : 0] v__h29463;
  reg [31 : 0] v__h30249;
  reg [31 : 0] v__h30693;
  reg [31 : 0] v__h1130;
  reg [31 : 0] v__h1561;
  reg [31 : 0] v__h1750;
  reg [31 : 0] v__h1951;
  reg [31 : 0] v__h2205;
  reg [31 : 0] v__h2390;
  reg [31 : 0] v__h2575;
  reg [31 : 0] v__h2767;
  reg [31 : 0] v__h3081;
  reg [31 : 0] v__h3265;
  reg [31 : 0] v__h3348;
  reg [31 : 0] v__h3526;
  reg [31 : 0] v__h3806;
  reg [31 : 0] v__h3953;
  reg [31 : 0] v__h4100;
  reg [31 : 0] v__h4247;
  reg [31 : 0] v__h4387;
  reg [31 : 0] v__h4511;
  reg [31 : 0] v__h4593;
  reg [31 : 0] v__h4759;
  reg [31 : 0] v__h4927;
  reg [31 : 0] v__h5103;
  reg [31 : 0] v__h11599;
  reg [31 : 0] v__h17777;
  reg [31 : 0] v__h19403;
  reg [31 : 0] v__h20185;
  reg [31 : 0] v__h22844;
  reg [31 : 0] v__h25400;
  reg [31 : 0] v__h25555;
  reg [31 : 0] v__h25725;
  reg [31 : 0] v__h27237;
  reg [31 : 0] v__h28337;
  reg [31 : 0] v__h29457;
  reg [31 : 0] v__h30243;
  reg [31 : 0] v__h30687;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] x__h29965;
  reg [22 : 0] CASE_guard0126_0b0_sfd___30116_BITS_31_TO_9_0b_ETC__q13,
	       CASE_guard0126_0b0_sfd___30116_BITS_31_TO_9_0b_ETC__q14,
	       CASE_guard0656_0b0_sfd___30116_BITS_30_TO_8_0b_ETC__q15,
	       CASE_guard0656_0b0_sfd___30116_BITS_30_TO_8_0b_ETC__q16,
	       CASE_guard6338_0b0_sfd___36328_BITS_31_TO_9_0b_ETC__q26,
	       CASE_guard6338_0b0_sfd___36328_BITS_31_TO_9_0b_ETC__q27,
	       CASE_guard6864_0b0_sfd___36328_BITS_30_TO_8_0b_ETC__q24,
	       CASE_guard6864_0b0_sfd___36328_BITS_30_TO_8_0b_ETC__q25,
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d510,
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d528,
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d829,
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d844;
  reg [7 : 0] CASE_guard0126_0b0_0_0b1_0_0b10_out_exp0545_0b_ETC__q10,
	      CASE_guard0126_0b0_0_0b1_theResult___exp0542_0_ETC__q9,
	      CASE_guard0656_0b0_x0671_BITS_7_TO_0_0b1_theRe_ETC__q11,
	      CASE_guard0656_0b0_x0671_BITS_7_TO_0_0b1_x0671_ETC__q12,
	      CASE_guard6338_0b0_0_0b1_0_0b10_out_exp6754_0b_ETC__q19,
	      CASE_guard6338_0b0_0_0b1_theResult___exp6751_0_ETC__q20,
	      CASE_guard6864_0b0_x6879_BITS_7_TO_0_0b1_theRe_ETC__q22,
	      CASE_guard6864_0b0_x6879_BITS_7_TO_0_0b1_x6879_ETC__q23,
	      CASE_requestR_BITS_258_TO_256_0x3_IF_guard6338_ETC__q21,
	      IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d458,
	      IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d487,
	      IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d806;
  reg [2 : 0] IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42;
  reg CASE_guard0126_0b0_requestR_BIT_223_0b1_reques_ETC__q5,
      CASE_guard0656_0b0_requestR_BIT_223_0b1_reques_ETC__q7,
      CASE_requestR_BITS_258_TO_256_0x2_requestR_BIT_ETC__q6,
      CASE_requestR_BITS_258_TO_256_0x2_requestR_BIT_ETC__q8;
  wire [63 : 0] IF_requestR_3_BITS_158_TO_151_085_EQ_255_086_A_ETC___d1139,
		IF_requestR_3_BITS_158_TO_151_085_EQ_255_086_A_ETC___d1156,
		IF_requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_r_ETC___d1229,
		res___1__h29562,
		res___1__h29797,
		res___1__h29807,
		res___1__h29826,
		res__h20952,
		res__h26678,
		res__h28190,
		res__h29290,
		res__h29842,
		res__h30046,
		res__h30488,
		x__h11687,
		x__h17864,
		x__h19492,
		x__h20276,
		x__h22935,
		x__h25640,
		x__h25812,
		x__h27324,
		x__h28424,
		x__h29542,
		x__h30456,
		x__h4332,
		x__h4466,
		x__h4679,
		x__h4845,
		x__h5013,
		x__h5191;
  wire [56 : 0] IF_requestR_3_BIT_223_21_THEN_NEG_0b0_CONCAT_N_ETC___d933,
		b__h18110,
		x__h18786,
		x__h19916;
  wire [32 : 0] _theResult_____2__h18045, out1___1__h18537;
  wire [31 : 0] IF_NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINU_ETC___d1051,
		IF_NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINU_ETC___d988,
		IF_NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINU_ETC___d990,
		IF_requestR_3_BITS_158_TO_151_085_EQ_0_101_AND_ETC___d1134,
		IF_requestR_3_BITS_158_TO_151_085_EQ_0_101_AND_ETC___d1150,
		IF_requestR_3_BITS_158_TO_151_085_EQ_255_086_A_ETC___d1135,
		IF_requestR_3_BITS_158_TO_151_085_EQ_255_086_A_ETC___d1152,
		IF_requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_r_ETC___d1053,
		IF_requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_ETC___d992,
		IF_requestR_3_BIT_223_21_THEN_2147483648_ELSE__ETC___d921,
		requestR_BITS_223_TO_192__q2,
		requestR_BITS_63_TO_32__q1,
		sfd___3__h10116,
		sfd___3__h16328,
		sfd__h5212,
		x__h17867,
		x__h19495,
		x__h4686,
		x__h4852,
		x__h5020,
		x__h5197;
  wire [24 : 0] sfd__h10143,
		sfd__h10686,
		sfd__h16355,
		sfd__h16894,
		value__h18112;
  wire [22 : 0] IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d504,
		IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d506,
		IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d522,
		IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d524,
		_theResult___fst_sfd__h10640,
		_theResult___fst_sfd__h11193,
		_theResult___fst_sfd__h11196,
		_theResult___fst_sfd__h16848,
		_theResult___fst_sfd__h17400,
		_theResult___fst_sfd__h17403,
		_theResult___sfd__h10543,
		_theResult___sfd__h11096,
		_theResult___sfd__h16752,
		_theResult___sfd__h17304,
		_theResult___snd_fst_sfd__h11199,
		_theResult___snd_fst_sfd__h17406,
		out_sfd__h10546,
		out_sfd__h11099,
		out_sfd__h16755,
		out_sfd__h17307;
  wire [19 : 0] NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d1024,
		NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d926,
		NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d958,
		NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d959;
  wire [8 : 0] _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d366,
	       _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d725,
	       x__h10671,
	       x__h16879;
  wire [7 : 0] IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d455,
	       IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d481,
	       IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d483,
	       IF_requestR_3_BITS_223_TO_192_17_EQ_0_33_OR_NO_ETC___d493,
	       _theResult___exp__h10542,
	       _theResult___exp__h11095,
	       _theResult___exp__h16751,
	       _theResult___exp__h17303,
	       _theResult___fst_exp__h10639,
	       _theResult___fst_exp__h11192,
	       _theResult___fst_exp__h11195,
	       _theResult___fst_exp__h16847,
	       _theResult___fst_exp__h17399,
	       _theResult___fst_exp__h17402,
	       _theResult___snd_fst_exp__h11198,
	       _theResult___snd_fst_exp__h11201,
	       _theResult___snd_fst_exp__h11204,
	       _theResult___snd_fst_exp__h17405,
	       _theResult___snd_fst_exp__h17408,
	       _theResult___snd_fst_exp__h17411,
	       din_inc___2_exp__h11238,
	       din_inc___2_exp__h17441,
	       out_exp__h10545,
	       out_exp__h11098,
	       out_exp__h16754,
	       out_exp__h17306,
	       requestR_BITS_222_TO_215_MINUS_127__q28;
  wire [5 : 0] IF_IF_requestR_3_BIT_223_21_THEN_NEG_requestR__ETC___d363,
	       IF_requestR_3_BIT_223_21_THEN_0_ELSE_IF_reques_ETC___d722;
  wire [4 : 0] x__h11364,
	       x__h17545,
	       x__h19200,
	       x__h19994,
	       x__h22308,
	       x__h28209;
  wire [1 : 0] IF_sfd___30116_BIT_7_THEN_2_ELSE_0__q4,
	       IF_sfd___30116_BIT_8_THEN_2_ELSE_0__q3,
	       IF_sfd___36328_BIT_7_THEN_2_ELSE_0__q18,
	       IF_sfd___36328_BIT_8_THEN_2_ELSE_0__q17,
	       IF_x8786_BIT_24_THEN_2_ELSE_0__q29,
	       IF_x9916_BIT_24_THEN_2_ELSE_0__q30,
	       guard__h10126,
	       guard__h10656,
	       guard__h16338,
	       guard__h16864,
	       guard__h18043,
	       guard__h18597,
	       guard__h19695;
  wire IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223__ETC___d433,
       IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223__ETC___d583,
       IF_32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21__ETC___d898,
       IF_NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINU_ETC___d1014,
       IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_OR_NO_ETC___d1045,
       IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_OR_NO_ETC___d950,
       IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_OR_NO_ETC___d982,
       IF_requestR_3_BIT_223_21_THEN_NEG_requestR_3_B_ETC___d574,
       IF_requestR_3_BIT_223_21_THEN_NEG_requestR_3_B_ETC___d577,
       IF_requestR_3_BIT_223_21_THEN_NEG_requestR_3_B_ETC___d586,
       IF_requestR_3_BIT_223_21_THEN_NOT_requestR_3_B_ETC___d1128,
       NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d1026,
       NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d961,
       NOT_IF_requestR_3_BIT_223_21_THEN_NEG_requestR_ETC___d371,
       NOT_requestR_3_BITS_222_TO_215_12_EQ_0_22_28_O_ETC___d1003,
       NOT_requestR_3_BITS_222_TO_215_12_EQ_0_22_28_O_ETC___d1068,
       NOT_requestR_3_BITS_222_TO_215_12_EQ_255_13_00_ETC___d1132,
       NOT_requestR_3_BITS_222_TO_215_12_EQ_255_13_00_ETC___d1215,
       NOT_requestR_3_BITS_222_TO_215_12_ULT_requestR_ETC___d1190,
       NOT_requestR_3_BIT_223_21_96_AND_NOT_requestR__ETC___d815,
       NOT_verbosity_ULE_1_4___d25,
       _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d367,
       _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d369,
       _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d372,
       _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d726,
       _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d727,
       _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d728,
       requestR_3_BITS_158_TO_151_085_EQ_0_101_AND_re_ETC___d1108,
       requestR_3_BITS_214_TO_192_14_ULE_requestR_3_B_ETC___d1120,
       requestR_3_BITS_214_TO_192_14_ULT_requestR_3_B_ETC___d1125,
       requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_requ_ETC___d1104,
       requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_requ_ETC___d1194,
       requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_0__ETC___d1063,
       requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_0__ETC___d1074,
       requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1094,
       requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1142,
       requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1179,
       requestR_3_BITS_222_TO_215_12_EQ_requestR_3_BI_ETC___d1119,
       requestR_3_BITS_222_TO_215_12_ULE_requestR_3_B_ETC___d1117,
       requestR_3_BITS_222_TO_215_12_ULE_requestR_3_B_ETC___d1189,
       requestR_3_BITS_222_TO_215_12_ULT_requestR_3_B_ETC___d1124,
       requestR_3_BIT_223_21_OR_requestR_3_BIT_222_97_ETC___d889,
       requestR_3_BIT_223_21_OR_requestR_3_BIT_222_97_ETC___d892,
       requestR_3_BIT_223_21_OR_requestR_3_BIT_222_97_ETC___d901;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = resetReqsF$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = resetReqsF$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = resetRspsF$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = resetRspsF$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas && dw_valid$wget ;

  // value method word_fst
  assign word_fst = dw_result$wget[68:5] ;

  // value method word_snd
  assign word_snd = dw_result$wget[4:0] ;

  // submodule fpu
  mkFPU fpu(.CLK(CLK),
	    .RST_N(RST_N),
	    .server_core_request_put(fpu$server_core_request_put),
	    .EN_server_core_request_put(fpu$EN_server_core_request_put),
	    .EN_server_core_response_get(fpu$EN_server_core_response_get),
	    .EN_server_reset_request_put(fpu$EN_server_reset_request_put),
	    .EN_server_reset_response_get(fpu$EN_server_reset_response_get),
	    .RDY_server_core_request_put(fpu$RDY_server_core_request_put),
	    .server_core_response_get(fpu$server_core_response_get),
	    .RDY_server_core_response_get(fpu$RDY_server_core_response_get),
	    .RDY_server_reset_request_put(fpu$RDY_server_reset_request_put),
	    .RDY_server_reset_response_get(fpu$RDY_server_reset_response_get));

  // submodule frmFpuF
  FIFO2 #(.width(32'd1), .guarded(32'd1)) frmFpuF(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(frmFpuF$D_IN),
						  .ENQ(frmFpuF$ENQ),
						  .DEQ(frmFpuF$DEQ),
						  .CLR(frmFpuF$CLR),
						  .D_OUT(),
						  .FULL_N(),
						  .EMPTY_N());

  // submodule positCore
  mkPositCore positCore(.verbosity(verbosity),
			.CLK(CLK),
			.RST_N(RST_N),
			.server_core_request_put(positCore$server_core_request_put),
			.EN_server_core_request_put(positCore$EN_server_core_request_put),
			.EN_server_core_response_get(positCore$EN_server_core_response_get),
			.RDY_server_core_request_put(positCore$RDY_server_core_request_put),
			.server_core_response_get(positCore$server_core_response_get),
			.RDY_server_core_response_get(positCore$RDY_server_core_response_get));

  // submodule resetReqsF
  FIFO20 #(.guarded(32'd1)) resetReqsF(.RST(RST_N),
				       .CLK(CLK),
				       .ENQ(resetReqsF$ENQ),
				       .DEQ(resetReqsF$DEQ),
				       .CLR(resetReqsF$CLR),
				       .FULL_N(resetReqsF$FULL_N),
				       .EMPTY_N(resetReqsF$EMPTY_N));

  // submodule resetRspsF
  FIFO20 #(.guarded(32'd1)) resetRspsF(.RST(RST_N),
				       .CLK(CLK),
				       .ENQ(resetRspsF$ENQ),
				       .DEQ(resetRspsF$DEQ),
				       .CLR(resetRspsF$CLR),
				       .FULL_N(resetRspsF$FULL_N),
				       .EMPTY_N(resetRspsF$EMPTY_N));

  // rule RL_rl_reset_end
  assign CAN_FIRE_RL_rl_reset_end =
	     fpu$RDY_server_reset_response_get && resetRspsF$FULL_N &&
	     stateR == 3'd0 ;
  assign WILL_FIRE_RL_rl_reset_end = CAN_FIRE_RL_rl_reset_end ;

  // rule RL_doFADD_S
  assign CAN_FIRE_RL_doFADD_S =
	     fpu$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h0 ;
  assign WILL_FIRE_RL_doFADD_S = CAN_FIRE_RL_doFADD_S ;

  // rule RL_doFSUB_S
  assign CAN_FIRE_RL_doFSUB_S =
	     fpu$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h04 ;
  assign WILL_FIRE_RL_doFSUB_S = CAN_FIRE_RL_doFSUB_S ;

  // rule RL_doFMUL_S
  assign CAN_FIRE_RL_doFMUL_S =
	     fpu$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h08 ;
  assign WILL_FIRE_RL_doFMUL_S = CAN_FIRE_RL_doFMUL_S ;

  // rule RL_doFMADD_S
  assign CAN_FIRE_RL_doFMADD_S =
	     fpu$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1000011 &&
	     requestR[265:264] == 2'd0 ;
  assign WILL_FIRE_RL_doFMADD_S = CAN_FIRE_RL_doFMADD_S ;

  // rule RL_doFMSUB_S
  assign CAN_FIRE_RL_doFMSUB_S =
	     fpu$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1000111 &&
	     requestR[265:264] == 2'd0 ;
  assign WILL_FIRE_RL_doFMSUB_S = CAN_FIRE_RL_doFMSUB_S ;

  // rule RL_doFNMADD_S
  assign CAN_FIRE_RL_doFNMADD_S =
	     fpu$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1001111 &&
	     requestR[265:264] == 2'd0 ;
  assign WILL_FIRE_RL_doFNMADD_S = CAN_FIRE_RL_doFNMADD_S ;

  // rule RL_doFNMSUB_S
  assign CAN_FIRE_RL_doFNMSUB_S =
	     fpu$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1001011 &&
	     requestR[265:264] == 2'd0 ;
  assign WILL_FIRE_RL_doFNMSUB_S = CAN_FIRE_RL_doFNMSUB_S ;

  // rule RL_doFDIV_S
  assign CAN_FIRE_RL_doFDIV_S =
	     fpu$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h0C ;
  assign WILL_FIRE_RL_doFDIV_S = CAN_FIRE_RL_doFDIV_S ;

  // rule RL_doFCVT_P_S
  assign CAN_FIRE_RL_doFCVT_P_S =
	     positCore$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h26 &&
	     requestR[263:259] == 5'h0 ;
  assign WILL_FIRE_RL_doFCVT_P_S = CAN_FIRE_RL_doFCVT_P_S ;

  // rule RL_doFCVT_S_P
  assign CAN_FIRE_RL_doFCVT_S_P =
	     positCore$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h24 &&
	     requestR[263:259] == 5'h10 ;
  assign WILL_FIRE_RL_doFCVT_S_P = CAN_FIRE_RL_doFCVT_S_P ;

  // rule RL_doFCVT_R_P
  assign CAN_FIRE_RL_doFCVT_R_P =
	     positCore$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h2A &&
	     requestR[263:259] == 5'h10 ;
  assign WILL_FIRE_RL_doFCVT_R_P = CAN_FIRE_RL_doFCVT_R_P ;

  // rule RL_doFCVT_P_R
  assign CAN_FIRE_RL_doFCVT_P_R =
	     positCore$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h2A &&
	     requestR[263:259] == 5'h11 ;
  assign WILL_FIRE_RL_doFCVT_P_R = CAN_FIRE_RL_doFCVT_P_R ;

  // rule RL_doFMA_P
  assign CAN_FIRE_RL_doFMA_P =
	     positCore$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h32 ;
  assign WILL_FIRE_RL_doFMA_P = CAN_FIRE_RL_doFMA_P ;

  // rule RL_doFMS_P
  assign CAN_FIRE_RL_doFMS_P =
	     positCore$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h36 ;
  assign WILL_FIRE_RL_doFMS_P = CAN_FIRE_RL_doFMS_P ;

  // rule RL_doFDA_P
  assign CAN_FIRE_RL_doFDA_P =
	     positCore$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h3A ;
  assign WILL_FIRE_RL_doFDA_P = CAN_FIRE_RL_doFDA_P ;

  // rule RL_doFDS_P
  assign CAN_FIRE_RL_doFDS_P =
	     positCore$RDY_server_core_request_put && requestR[278] &&
	     stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h3E ;
  assign WILL_FIRE_RL_doFDS_P = CAN_FIRE_RL_doFDS_P ;

  // rule RL_doPMV_W_X
  assign CAN_FIRE_RL_doPMV_W_X =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h7A ;
  assign WILL_FIRE_RL_doPMV_W_X = CAN_FIRE_RL_doPMV_W_X ;

  // rule RL_doPMV_X_W
  assign CAN_FIRE_RL_doPMV_X_W =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h70 &&
	     requestR[263:259] == 5'h10 ;
  assign WILL_FIRE_RL_doPMV_X_W = CAN_FIRE_RL_doPMV_X_W ;

  // rule RL_doFSGNJ_S
  assign CAN_FIRE_RL_doFSGNJ_S =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h10 &&
	     requestR[258:256] == 3'h0 ;
  assign WILL_FIRE_RL_doFSGNJ_S = CAN_FIRE_RL_doFSGNJ_S ;

  // rule RL_doFSGNJN_S
  assign CAN_FIRE_RL_doFSGNJN_S =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h10 &&
	     requestR[258:256] == 3'h1 ;
  assign WILL_FIRE_RL_doFSGNJN_S = CAN_FIRE_RL_doFSGNJN_S ;

  // rule RL_doFSGNJX_S
  assign CAN_FIRE_RL_doFSGNJX_S =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h10 &&
	     requestR[258:256] == 3'h2 ;
  assign WILL_FIRE_RL_doFSGNJX_S = CAN_FIRE_RL_doFSGNJX_S ;

  // rule RL_doFCVT_S_W
  assign CAN_FIRE_RL_doFCVT_S_W =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h68 &&
	     requestR[263:259] == 5'h0 ;
  assign WILL_FIRE_RL_doFCVT_S_W = CAN_FIRE_RL_doFCVT_S_W ;

  // rule RL_doFCVT_S_WU
  assign CAN_FIRE_RL_doFCVT_S_WU =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h68 &&
	     requestR[263:259] == 5'd1 ;
  assign WILL_FIRE_RL_doFCVT_S_WU = CAN_FIRE_RL_doFCVT_S_WU ;

  // rule RL_doFCVT_W_S
  assign CAN_FIRE_RL_doFCVT_W_S =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h60 &&
	     requestR[263:259] == 5'h0 ;
  assign WILL_FIRE_RL_doFCVT_W_S = CAN_FIRE_RL_doFCVT_W_S ;

  // rule RL_doFCVT_WU_S
  assign CAN_FIRE_RL_doFCVT_WU_S =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h60 &&
	     requestR[263:259] == 5'd1 ;
  assign WILL_FIRE_RL_doFCVT_WU_S = CAN_FIRE_RL_doFCVT_WU_S ;

  // rule RL_doFMIN_S
  assign CAN_FIRE_RL_doFMIN_S =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h14 &&
	     requestR[258:256] == 3'h0 ;
  assign WILL_FIRE_RL_doFMIN_S = CAN_FIRE_RL_doFMIN_S ;

  // rule RL_doFMAX_S
  assign CAN_FIRE_RL_doFMAX_S =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h14 &&
	     requestR[258:256] == 3'h1 ;
  assign WILL_FIRE_RL_doFMAX_S = CAN_FIRE_RL_doFMAX_S ;

  // rule RL_doFMV_W_X
  assign CAN_FIRE_RL_doFMV_W_X =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h78 &&
	     requestR[258:256] == 3'h0 ;
  assign WILL_FIRE_RL_doFMV_W_X = CAN_FIRE_RL_doFMV_W_X ;

  // rule RL_doFMV_X_W
  assign CAN_FIRE_RL_doFMV_X_W =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h70 &&
	     requestR[258:256] == 3'h0 ;
  assign WILL_FIRE_RL_doFMV_X_W =
	     CAN_FIRE_RL_doFMV_X_W && !WILL_FIRE_RL_doPMV_X_W ;

  // rule RL_doFEQ_S
  assign CAN_FIRE_RL_doFEQ_S =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h50 &&
	     requestR[258:256] == 3'h2 ;
  assign WILL_FIRE_RL_doFEQ_S = CAN_FIRE_RL_doFEQ_S ;

  // rule RL_doFLT_S
  assign CAN_FIRE_RL_doFLT_S =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h50 &&
	     requestR[258:256] == 3'h1 ;
  assign WILL_FIRE_RL_doFLT_S = CAN_FIRE_RL_doFLT_S ;

  // rule RL_doFLE_S
  assign CAN_FIRE_RL_doFLE_S =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h50 &&
	     requestR[258:256] == 3'h0 ;
  assign WILL_FIRE_RL_doFLE_S = CAN_FIRE_RL_doFLE_S ;

  // rule RL_doFCLASS_S
  assign CAN_FIRE_RL_doFCLASS_S =
	     requestR[278] && stateR == 3'd1 &&
	     requestR[277:271] == 7'b1010011 &&
	     requestR[270:264] == 7'h70 &&
	     requestR[258:256] == 3'h1 ;
  assign WILL_FIRE_RL_doFCLASS_S =
	     CAN_FIRE_RL_doFCLASS_S && !WILL_FIRE_RL_doPMV_X_W ;

  // rule RL_rl_get_fpu_result
  assign CAN_FIRE_RL_rl_get_fpu_result = MUX_dw_result$wset_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_get_fpu_result = MUX_dw_result$wset_1__SEL_2 ;

  // rule RL_rl_get_posit_result
  assign CAN_FIRE_RL_rl_get_posit_result = MUX_dw_result$wset_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_get_posit_result = MUX_dw_result$wset_1__SEL_1 ;

  // rule RL_rl_drive_fpu_result
  assign CAN_FIRE_RL_rl_drive_fpu_result = stateR == 3'd4 ;
  assign WILL_FIRE_RL_rl_drive_fpu_result = stateR == 3'd4 ;

  // rule RL_rl_reset_begin
  assign CAN_FIRE_RL_rl_reset_begin =
	     fpu$RDY_server_reset_request_put && resetReqsF$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_begin = CAN_FIRE_RL_rl_reset_begin ;

  // inputs to muxes for submodule ports
  assign MUX_dw_result$wset_1__SEL_1 =
	     positCore$RDY_server_core_response_get && stateR == 3'd3 ;
  assign MUX_dw_result$wset_1__SEL_2 =
	     fpu$RDY_server_core_response_get && stateR == 3'd2 ;
  assign MUX_dw_result$wset_1__VAL_1 =
	     { x__h30456, positCore$server_core_response_get[4:0] } ;
  assign MUX_dw_result$wset_1__VAL_2 =
	     { x__h29965, fpu$server_core_response_get[4:0] } ;
  assign MUX_fpu$server_core_request_put_1__VAL_1 =
	     { 2'd1,
	       requestR[255:192],
	       2'd1,
	       requestR[191:128],
	       66'h2AAAAAAAAAAAAAAAA,
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd0 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_2 =
	     { 2'd1,
	       requestR[255:192],
	       2'd1,
	       requestR[191:128],
	       66'h2AAAAAAAAAAAAAAAA,
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd1 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_3 =
	     { 2'd1,
	       requestR[255:192],
	       2'd1,
	       requestR[191:128],
	       66'h2AAAAAAAAAAAAAAAA,
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd2 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_4 =
	     { 2'd1,
	       requestR[255:192],
	       2'd1,
	       requestR[191:128],
	       2'd1,
	       requestR[127:64],
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd5 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_5 =
	     { 2'd1,
	       requestR[255:192],
	       2'd1,
	       requestR[191:128],
	       2'd1,
	       requestR[127:64],
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd6 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_6 =
	     { 2'd1,
	       requestR[255:192],
	       2'd1,
	       requestR[191:128],
	       2'd1,
	       requestR[127:64],
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd7 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_7 =
	     { 2'd1,
	       requestR[255:192],
	       2'd1,
	       requestR[191:128],
	       2'd1,
	       requestR[127:64],
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd8 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_8 =
	     { 2'd1,
	       requestR[255:192],
	       2'd1,
	       requestR[191:128],
	       66'h2AAAAAAAAAAAAAAAA,
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd3 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_1 =
	     { 2'd1, requestR[255:192], 72'hAAAAAAAAAAAAAAAA94 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_2 =
	     { 2'd2,
	       requestR[95:32],
	       66'h2AAAAAAAAAAAAAAAA,
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42,
	       3'd5 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_3 =
	     { 2'd2, requestR[95:32], 72'hAAAAAAAAAAAAAAAA97 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_4 =
	     { 2'd2, requestR[95:32], 72'hAAAAAAAAAAAAAAAA96 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_5 =
	     { 2'd2, requestR[95:32], 2'd2, requestR[63:0], 6'h10 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_6 =
	     { 2'd2, requestR[95:32], 2'd2, requestR[63:0], 6'h12 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_7 =
	     { 2'd2, requestR[95:32], 2'd2, requestR[63:0], 6'h11 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_8 =
	     { 2'd2, requestR[95:32], 2'd2, requestR[63:0], 6'h13 } ;
  assign MUX_requestR$write_1__VAL_2 =
	     { 1'd1,
	       req_opcode,
	       req_f7,
	       req_rs2,
	       req_rm,
	       req_v1,
	       req_v2,
	       req_v3,
	       req_pv1,
	       req_pv2 } ;
  assign MUX_resultR$write_1__VAL_3 =
	     { 1'd1, x__h30456, positCore$server_core_response_get[4:0] } ;
  assign MUX_resultR$write_1__VAL_4 =
	     { 1'd1, x__h29965, fpu$server_core_response_get[4:0] } ;
  assign MUX_resultR$write_1__VAL_5 = { 1'd1, x__h29542, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_6 = { 1'd1, x__h28424, x__h28209 } ;
  assign MUX_resultR$write_1__VAL_7 = { 1'd1, x__h27324, x__h28209 } ;
  assign MUX_resultR$write_1__VAL_8 = { 1'd1, x__h25812, x__h22308 } ;
  assign MUX_resultR$write_1__VAL_9 = { 1'd1, x__h25640, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_10 = { 1'd1, x__h4332, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_11 = { 1'd1, x__h22935, x__h22308 } ;
  assign MUX_resultR$write_1__VAL_12 = { 1'd1, x__h20276, x__h22308 } ;
  assign MUX_resultR$write_1__VAL_13 = { 1'd1, x__h19492, x__h19994 } ;
  assign MUX_resultR$write_1__VAL_14 = { 1'd1, x__h17864, x__h19200 } ;
  assign MUX_resultR$write_1__VAL_15 = { 1'd1, x__h11687, x__h17545 } ;
  assign MUX_resultR$write_1__VAL_16 = { 1'd1, x__h5191, x__h11364 } ;
  assign MUX_resultR$write_1__VAL_17 = { 1'd1, x__h5013, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_18 = { 1'd1, x__h4845, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_19 = { 1'd1, x__h4679, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_20 = { 1'd1, x__h4466, 5'd0 } ;

  // inlined wires
  assign dw_valid$wget = !WILL_FIRE_RL_rl_drive_fpu_result || resultR[69] ;
  assign dw_valid$whas =
	     WILL_FIRE_RL_rl_drive_fpu_result ||
	     WILL_FIRE_RL_rl_get_posit_result ||
	     WILL_FIRE_RL_rl_get_fpu_result ;
  always@(WILL_FIRE_RL_rl_get_posit_result or
	  MUX_dw_result$wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_get_fpu_result or
	  MUX_dw_result$wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_drive_fpu_result or resultR)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_get_posit_result:
	  dw_result$wget = MUX_dw_result$wset_1__VAL_1;
      WILL_FIRE_RL_rl_get_fpu_result:
	  dw_result$wget = MUX_dw_result$wset_1__VAL_2;
      WILL_FIRE_RL_rl_drive_fpu_result: dw_result$wget = resultR[68:0];
      default: dw_result$wget =
		   69'h0AAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // register requestR
  assign requestR$D_IN =
	     WILL_FIRE_RL_rl_reset_begin ?
	       279'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_requestR$write_1__VAL_2 ;
  assign requestR$EN = WILL_FIRE_RL_rl_reset_begin || EN_req ;

  // register resultR
  always@(WILL_FIRE_RL_rl_reset_begin or
	  EN_req or
	  WILL_FIRE_RL_rl_get_posit_result or
	  MUX_resultR$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_get_fpu_result or
	  MUX_resultR$write_1__VAL_4 or
	  WILL_FIRE_RL_doFCLASS_S or
	  MUX_resultR$write_1__VAL_5 or
	  WILL_FIRE_RL_doFLE_S or
	  MUX_resultR$write_1__VAL_6 or
	  WILL_FIRE_RL_doFLT_S or
	  MUX_resultR$write_1__VAL_7 or
	  WILL_FIRE_RL_doFEQ_S or
	  MUX_resultR$write_1__VAL_8 or
	  WILL_FIRE_RL_doFMV_X_W or
	  MUX_resultR$write_1__VAL_9 or
	  WILL_FIRE_RL_doFMV_W_X or
	  MUX_resultR$write_1__VAL_10 or
	  WILL_FIRE_RL_doFMAX_S or
	  MUX_resultR$write_1__VAL_11 or
	  WILL_FIRE_RL_doFMIN_S or
	  MUX_resultR$write_1__VAL_12 or
	  WILL_FIRE_RL_doFCVT_WU_S or
	  MUX_resultR$write_1__VAL_13 or
	  WILL_FIRE_RL_doFCVT_W_S or
	  MUX_resultR$write_1__VAL_14 or
	  WILL_FIRE_RL_doFCVT_S_WU or
	  MUX_resultR$write_1__VAL_15 or
	  WILL_FIRE_RL_doFCVT_S_W or
	  MUX_resultR$write_1__VAL_16 or
	  WILL_FIRE_RL_doFSGNJX_S or
	  MUX_resultR$write_1__VAL_17 or
	  WILL_FIRE_RL_doFSGNJN_S or
	  MUX_resultR$write_1__VAL_18 or
	  WILL_FIRE_RL_doFSGNJ_S or
	  MUX_resultR$write_1__VAL_19 or
	  WILL_FIRE_RL_doPMV_X_W or
	  MUX_resultR$write_1__VAL_20 or WILL_FIRE_RL_doPMV_W_X)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_begin || EN_req:
	resultR$D_IN = 70'h0AAAAAAAAAAAAAAAAA;
    WILL_FIRE_RL_rl_get_posit_result:
	resultR$D_IN = MUX_resultR$write_1__VAL_3;
    WILL_FIRE_RL_rl_get_fpu_result: resultR$D_IN = MUX_resultR$write_1__VAL_4;
    WILL_FIRE_RL_doFCLASS_S: resultR$D_IN = MUX_resultR$write_1__VAL_5;
    WILL_FIRE_RL_doFLE_S: resultR$D_IN = MUX_resultR$write_1__VAL_6;
    WILL_FIRE_RL_doFLT_S: resultR$D_IN = MUX_resultR$write_1__VAL_7;
    WILL_FIRE_RL_doFEQ_S: resultR$D_IN = MUX_resultR$write_1__VAL_8;
    WILL_FIRE_RL_doFMV_X_W: resultR$D_IN = MUX_resultR$write_1__VAL_9;
    WILL_FIRE_RL_doFMV_W_X: resultR$D_IN = MUX_resultR$write_1__VAL_10;
    WILL_FIRE_RL_doFMAX_S: resultR$D_IN = MUX_resultR$write_1__VAL_11;
    WILL_FIRE_RL_doFMIN_S: resultR$D_IN = MUX_resultR$write_1__VAL_12;
    WILL_FIRE_RL_doFCVT_WU_S: resultR$D_IN = MUX_resultR$write_1__VAL_13;
    WILL_FIRE_RL_doFCVT_W_S: resultR$D_IN = MUX_resultR$write_1__VAL_14;
    WILL_FIRE_RL_doFCVT_S_WU: resultR$D_IN = MUX_resultR$write_1__VAL_15;
    WILL_FIRE_RL_doFCVT_S_W: resultR$D_IN = MUX_resultR$write_1__VAL_16;
    WILL_FIRE_RL_doFSGNJX_S: resultR$D_IN = MUX_resultR$write_1__VAL_17;
    WILL_FIRE_RL_doFSGNJN_S: resultR$D_IN = MUX_resultR$write_1__VAL_18;
    WILL_FIRE_RL_doFSGNJ_S: resultR$D_IN = MUX_resultR$write_1__VAL_19;
    WILL_FIRE_RL_doPMV_X_W: resultR$D_IN = MUX_resultR$write_1__VAL_20;
    WILL_FIRE_RL_doPMV_W_X: resultR$D_IN = MUX_resultR$write_1__VAL_10;
    default: resultR$D_IN = 70'h2AAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign resultR$EN =
	     WILL_FIRE_RL_rl_reset_begin || EN_req ||
	     WILL_FIRE_RL_doFMV_W_X ||
	     WILL_FIRE_RL_doPMV_W_X ||
	     WILL_FIRE_RL_doPMV_X_W ||
	     WILL_FIRE_RL_doFSGNJ_S ||
	     WILL_FIRE_RL_doFSGNJN_S ||
	     WILL_FIRE_RL_doFSGNJX_S ||
	     WILL_FIRE_RL_doFCVT_S_W ||
	     WILL_FIRE_RL_doFCVT_S_WU ||
	     WILL_FIRE_RL_doFCVT_W_S ||
	     WILL_FIRE_RL_doFCVT_WU_S ||
	     WILL_FIRE_RL_doFMIN_S ||
	     WILL_FIRE_RL_doFMAX_S ||
	     WILL_FIRE_RL_doFMV_X_W ||
	     WILL_FIRE_RL_doFEQ_S ||
	     WILL_FIRE_RL_doFLT_S ||
	     WILL_FIRE_RL_doFLE_S ||
	     WILL_FIRE_RL_doFCLASS_S ||
	     WILL_FIRE_RL_rl_get_fpu_result ||
	     WILL_FIRE_RL_rl_get_posit_result ;

  // register stateR
  always@(WILL_FIRE_RL_rl_reset_begin or
	  EN_req or
	  WILL_FIRE_RL_rl_get_posit_result or
	  WILL_FIRE_RL_rl_get_fpu_result or
	  WILL_FIRE_RL_doFCLASS_S or
	  WILL_FIRE_RL_doFLE_S or
	  WILL_FIRE_RL_doFLT_S or
	  WILL_FIRE_RL_doFEQ_S or
	  WILL_FIRE_RL_doFMV_X_W or
	  WILL_FIRE_RL_doFMV_W_X or
	  WILL_FIRE_RL_doFMAX_S or
	  WILL_FIRE_RL_doFMIN_S or
	  WILL_FIRE_RL_doFCVT_WU_S or
	  WILL_FIRE_RL_doFCVT_W_S or
	  WILL_FIRE_RL_doFCVT_S_WU or
	  WILL_FIRE_RL_doFCVT_S_W or
	  WILL_FIRE_RL_doFSGNJX_S or
	  WILL_FIRE_RL_doFSGNJN_S or
	  WILL_FIRE_RL_doFSGNJ_S or
	  WILL_FIRE_RL_doPMV_X_W or
	  WILL_FIRE_RL_doPMV_W_X or
	  WILL_FIRE_RL_doFDS_P or
	  WILL_FIRE_RL_doFDA_P or
	  WILL_FIRE_RL_doFMS_P or
	  WILL_FIRE_RL_doFMA_P or
	  WILL_FIRE_RL_doFCVT_P_R or
	  WILL_FIRE_RL_doFCVT_R_P or
	  WILL_FIRE_RL_doFCVT_S_P or
	  WILL_FIRE_RL_doFCVT_P_S or
	  WILL_FIRE_RL_doFDIV_S or
	  WILL_FIRE_RL_doFNMSUB_S or
	  WILL_FIRE_RL_doFNMADD_S or
	  WILL_FIRE_RL_doFMSUB_S or
	  WILL_FIRE_RL_doFMADD_S or
	  WILL_FIRE_RL_doFMUL_S or
	  WILL_FIRE_RL_doFSUB_S or
	  WILL_FIRE_RL_doFADD_S or WILL_FIRE_RL_rl_reset_end)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_begin: stateR$D_IN = 3'd0;
    EN_req: stateR$D_IN = 3'd1;
    WILL_FIRE_RL_rl_get_posit_result || WILL_FIRE_RL_rl_get_fpu_result ||
    WILL_FIRE_RL_doFCLASS_S ||
    WILL_FIRE_RL_doFLE_S ||
    WILL_FIRE_RL_doFLT_S ||
    WILL_FIRE_RL_doFEQ_S ||
    WILL_FIRE_RL_doFMV_X_W ||
    WILL_FIRE_RL_doFMV_W_X ||
    WILL_FIRE_RL_doFMAX_S ||
    WILL_FIRE_RL_doFMIN_S ||
    WILL_FIRE_RL_doFCVT_WU_S ||
    WILL_FIRE_RL_doFCVT_W_S ||
    WILL_FIRE_RL_doFCVT_S_WU ||
    WILL_FIRE_RL_doFCVT_S_W ||
    WILL_FIRE_RL_doFSGNJX_S ||
    WILL_FIRE_RL_doFSGNJN_S ||
    WILL_FIRE_RL_doFSGNJ_S ||
    WILL_FIRE_RL_doPMV_X_W ||
    WILL_FIRE_RL_doPMV_W_X:
	stateR$D_IN = 3'd4;
    WILL_FIRE_RL_doFDS_P || WILL_FIRE_RL_doFDA_P || WILL_FIRE_RL_doFMS_P ||
    WILL_FIRE_RL_doFMA_P ||
    WILL_FIRE_RL_doFCVT_P_R ||
    WILL_FIRE_RL_doFCVT_R_P ||
    WILL_FIRE_RL_doFCVT_S_P ||
    WILL_FIRE_RL_doFCVT_P_S:
	stateR$D_IN = 3'd3;
    WILL_FIRE_RL_doFDIV_S || WILL_FIRE_RL_doFNMSUB_S ||
    WILL_FIRE_RL_doFNMADD_S ||
    WILL_FIRE_RL_doFMSUB_S ||
    WILL_FIRE_RL_doFMADD_S ||
    WILL_FIRE_RL_doFMUL_S ||
    WILL_FIRE_RL_doFSUB_S ||
    WILL_FIRE_RL_doFADD_S:
	stateR$D_IN = 3'd2;
    WILL_FIRE_RL_rl_reset_end: stateR$D_IN = 3'd1;
    default: stateR$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign stateR$EN =
	     WILL_FIRE_RL_rl_reset_begin || WILL_FIRE_RL_rl_reset_end ||
	     EN_req ||
	     WILL_FIRE_RL_doFDIV_S ||
	     WILL_FIRE_RL_doFNMSUB_S ||
	     WILL_FIRE_RL_doFNMADD_S ||
	     WILL_FIRE_RL_doFMSUB_S ||
	     WILL_FIRE_RL_doFMADD_S ||
	     WILL_FIRE_RL_doFMUL_S ||
	     WILL_FIRE_RL_doFSUB_S ||
	     WILL_FIRE_RL_doFADD_S ||
	     WILL_FIRE_RL_doFDS_P ||
	     WILL_FIRE_RL_doFDA_P ||
	     WILL_FIRE_RL_doFMS_P ||
	     WILL_FIRE_RL_doFMA_P ||
	     WILL_FIRE_RL_doFCVT_P_R ||
	     WILL_FIRE_RL_doFCVT_R_P ||
	     WILL_FIRE_RL_doFCVT_S_P ||
	     WILL_FIRE_RL_doFCVT_P_S ||
	     WILL_FIRE_RL_rl_get_posit_result ||
	     WILL_FIRE_RL_rl_get_fpu_result ||
	     WILL_FIRE_RL_doFCLASS_S ||
	     WILL_FIRE_RL_doFLE_S ||
	     WILL_FIRE_RL_doFLT_S ||
	     WILL_FIRE_RL_doFEQ_S ||
	     WILL_FIRE_RL_doFMV_X_W ||
	     WILL_FIRE_RL_doFMV_W_X ||
	     WILL_FIRE_RL_doFMAX_S ||
	     WILL_FIRE_RL_doFMIN_S ||
	     WILL_FIRE_RL_doFCVT_WU_S ||
	     WILL_FIRE_RL_doFCVT_W_S ||
	     WILL_FIRE_RL_doFCVT_S_WU ||
	     WILL_FIRE_RL_doFCVT_S_W ||
	     WILL_FIRE_RL_doFSGNJX_S ||
	     WILL_FIRE_RL_doFSGNJN_S ||
	     WILL_FIRE_RL_doFSGNJ_S ||
	     WILL_FIRE_RL_doPMV_X_W ||
	     WILL_FIRE_RL_doPMV_W_X ;

  // submodule fpu
  always@(WILL_FIRE_RL_doFADD_S or
	  MUX_fpu$server_core_request_put_1__VAL_1 or
	  WILL_FIRE_RL_doFSUB_S or
	  MUX_fpu$server_core_request_put_1__VAL_2 or
	  WILL_FIRE_RL_doFMUL_S or
	  MUX_fpu$server_core_request_put_1__VAL_3 or
	  WILL_FIRE_RL_doFMADD_S or
	  MUX_fpu$server_core_request_put_1__VAL_4 or
	  WILL_FIRE_RL_doFMSUB_S or
	  MUX_fpu$server_core_request_put_1__VAL_5 or
	  WILL_FIRE_RL_doFNMADD_S or
	  MUX_fpu$server_core_request_put_1__VAL_6 or
	  WILL_FIRE_RL_doFNMSUB_S or
	  MUX_fpu$server_core_request_put_1__VAL_7 or
	  WILL_FIRE_RL_doFDIV_S or MUX_fpu$server_core_request_put_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_doFADD_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_1;
      WILL_FIRE_RL_doFSUB_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_2;
      WILL_FIRE_RL_doFMUL_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_3;
      WILL_FIRE_RL_doFMADD_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_4;
      WILL_FIRE_RL_doFMSUB_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_5;
      WILL_FIRE_RL_doFNMADD_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_6;
      WILL_FIRE_RL_doFNMSUB_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_7;
      WILL_FIRE_RL_doFDIV_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_8;
      default: fpu$server_core_request_put =
		   205'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign fpu$EN_server_core_request_put =
	     WILL_FIRE_RL_doFADD_S || WILL_FIRE_RL_doFSUB_S ||
	     WILL_FIRE_RL_doFMUL_S ||
	     WILL_FIRE_RL_doFMADD_S ||
	     WILL_FIRE_RL_doFMSUB_S ||
	     WILL_FIRE_RL_doFNMADD_S ||
	     WILL_FIRE_RL_doFNMSUB_S ||
	     WILL_FIRE_RL_doFDIV_S ;
  assign fpu$EN_server_core_response_get = MUX_dw_result$wset_1__SEL_2 ;
  assign fpu$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_begin ;
  assign fpu$EN_server_reset_response_get = CAN_FIRE_RL_rl_reset_end ;

  // submodule frmFpuF
  assign frmFpuF$D_IN = 1'b0 ;
  assign frmFpuF$ENQ = 1'b0 ;
  assign frmFpuF$DEQ = 1'b0 ;
  assign frmFpuF$CLR = CAN_FIRE_RL_rl_reset_begin ;

  // submodule positCore
  always@(WILL_FIRE_RL_doFCVT_P_S or
	  MUX_positCore$server_core_request_put_1__VAL_1 or
	  WILL_FIRE_RL_doFCVT_S_P or
	  MUX_positCore$server_core_request_put_1__VAL_2 or
	  WILL_FIRE_RL_doFCVT_R_P or
	  MUX_positCore$server_core_request_put_1__VAL_3 or
	  WILL_FIRE_RL_doFCVT_P_R or
	  MUX_positCore$server_core_request_put_1__VAL_4 or
	  WILL_FIRE_RL_doFMA_P or
	  MUX_positCore$server_core_request_put_1__VAL_5 or
	  WILL_FIRE_RL_doFMS_P or
	  MUX_positCore$server_core_request_put_1__VAL_6 or
	  WILL_FIRE_RL_doFDA_P or
	  MUX_positCore$server_core_request_put_1__VAL_7 or
	  WILL_FIRE_RL_doFDS_P or
	  MUX_positCore$server_core_request_put_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_doFCVT_P_S:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_1;
      WILL_FIRE_RL_doFCVT_S_P:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_2;
      WILL_FIRE_RL_doFCVT_R_P:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_3;
      WILL_FIRE_RL_doFCVT_P_R:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_4;
      WILL_FIRE_RL_doFMA_P:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_5;
      WILL_FIRE_RL_doFMS_P:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_6;
      WILL_FIRE_RL_doFDA_P:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_7;
      WILL_FIRE_RL_doFDS_P:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_8;
      default: positCore$server_core_request_put =
		   138'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign positCore$EN_server_core_request_put =
	     WILL_FIRE_RL_doFCVT_P_S || WILL_FIRE_RL_doFCVT_S_P ||
	     WILL_FIRE_RL_doFCVT_R_P ||
	     WILL_FIRE_RL_doFCVT_P_R ||
	     WILL_FIRE_RL_doFMA_P ||
	     WILL_FIRE_RL_doFMS_P ||
	     WILL_FIRE_RL_doFDA_P ||
	     WILL_FIRE_RL_doFDS_P ;
  assign positCore$EN_server_core_response_get = MUX_dw_result$wset_1__SEL_1 ;

  // submodule resetReqsF
  assign resetReqsF$ENQ = EN_server_reset_request_put ;
  assign resetReqsF$DEQ = CAN_FIRE_RL_rl_reset_begin ;
  assign resetReqsF$CLR = 1'b0 ;

  // submodule resetRspsF
  assign resetRspsF$ENQ = CAN_FIRE_RL_rl_reset_end ;
  assign resetRspsF$DEQ = EN_server_reset_response_get ;
  assign resetRspsF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223__ETC___d433 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d372 ?
	       ((requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
		 requestR[258:256] != 3'h3 &&
		 requestR[258:256] != 3'h4) ?
		  CASE_guard0126_0b0_requestR_BIT_223_0b1_reques_ETC__q5 :
		  CASE_requestR_BITS_258_TO_256_0x2_requestR_BIT_ETC__q6) :
	       ((x__h10671[7:0] == 8'd255) ?
		  requestR[223] :
		  ((requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
		    requestR[258:256] != 3'h3 &&
		    requestR[258:256] != 3'h4) ?
		     CASE_guard0656_0b0_requestR_BIT_223_0b1_reques_ETC__q7 :
		     CASE_requestR_BITS_258_TO_256_0x2_requestR_BIT_ETC__q8)) ;
  assign IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223__ETC___d583 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d372 ?
	       guard__h10126 != 2'b0 :
	       x__h10671[7:0] != 8'd255 && guard__h10656 != 2'b0 ;
  assign IF_32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21__ETC___d898 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d728 ?
	       guard__h16338 != 2'b0 :
	       x__h16879[7:0] != 8'd255 && guard__h16864 != 2'b0 ;
  assign IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d455 =
	     (guard__h10126 == 2'b0) ?
	       8'd0 :
	       (requestR[223] ? _theResult___exp__h10542 : 8'd0) ;
  assign IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d481 =
	     (guard__h10656 == 2'b0 || requestR[223]) ?
	       x__h10671[7:0] :
	       _theResult___exp__h11095 ;
  assign IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d483 =
	     (guard__h10656 == 2'b0) ?
	       x__h10671[7:0] :
	       (requestR[223] ? _theResult___exp__h11095 : x__h10671[7:0]) ;
  assign IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d504 =
	     (guard__h10126 == 2'b0 || requestR[223]) ?
	       sfd___3__h10116[31:9] :
	       _theResult___sfd__h10543 ;
  assign IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d506 =
	     (guard__h10126 == 2'b0) ?
	       sfd___3__h10116[31:9] :
	       (requestR[223] ?
		  _theResult___sfd__h10543 :
		  sfd___3__h10116[31:9]) ;
  assign IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d522 =
	     (guard__h10656 == 2'b0 || requestR[223]) ?
	       sfd___3__h10116[30:8] :
	       _theResult___sfd__h11096 ;
  assign IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d524 =
	     (guard__h10656 == 2'b0) ?
	       sfd___3__h10116[30:8] :
	       (requestR[223] ?
		  _theResult___sfd__h11096 :
		  sfd___3__h10116[30:8]) ;
  assign IF_IF_requestR_3_BIT_223_21_THEN_NEG_requestR__ETC___d363 =
	     sfd__h5212[31] ?
	       6'd0 :
	       (sfd__h5212[30] ?
		  6'd1 :
		  (sfd__h5212[29] ?
		     6'd2 :
		     (sfd__h5212[28] ?
			6'd3 :
			(sfd__h5212[27] ?
			   6'd4 :
			   (sfd__h5212[26] ?
			      6'd5 :
			      (sfd__h5212[25] ?
				 6'd6 :
				 (sfd__h5212[24] ?
				    6'd7 :
				    (sfd__h5212[23] ?
				       6'd8 :
				       (sfd__h5212[22] ?
					  6'd9 :
					  (sfd__h5212[21] ?
					     6'd10 :
					     (sfd__h5212[20] ?
						6'd11 :
						(sfd__h5212[19] ?
						   6'd12 :
						   (sfd__h5212[18] ?
						      6'd13 :
						      (sfd__h5212[17] ?
							 6'd14 :
							 (sfd__h5212[16] ?
							    6'd15 :
							    (sfd__h5212[15] ?
							       6'd16 :
							       (sfd__h5212[14] ?
								  6'd17 :
								  (sfd__h5212[13] ?
								     6'd18 :
								     (sfd__h5212[12] ?
									6'd19 :
									(sfd__h5212[11] ?
									   6'd20 :
									   (sfd__h5212[10] ?
									      6'd21 :
									      (sfd__h5212[9] ?
										 6'd22 :
										 (sfd__h5212[8] ?
										    6'd23 :
										    (sfd__h5212[7] ?
										       6'd24 :
										       (sfd__h5212[6] ?
											  6'd25 :
											  (sfd__h5212[5] ?
											     6'd26 :
											     (sfd__h5212[4] ?
												6'd27 :
												(sfd__h5212[3] ?
												   6'd28 :
												   (sfd__h5212[2] ?
												      6'd29 :
												      (sfd__h5212[1] ?
													 6'd30 :
													 (sfd__h5212[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign IF_NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINU_ETC___d1014 =
	     (NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d926 ==
	      20'd1048545) ?
	       _theResult_____2__h18045[32:31] == 2'b11 &&
	       guard__h18043 != 2'd0 :
	       !NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d959[19] &&
	       (!NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d961 ||
		guard__h18597 != 2'd0) ;
  assign IF_NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINU_ETC___d1051 =
	     NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d1026 ?
	       (IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_OR_NO_ETC___d1045 ?
		  ((x__h19916[56:25] == 32'hFFFFFFFF) ?
		     x__h19916[56:25] :
		     x__h19916[56:25] + 32'd1) :
		  x__h19916[56:25]) :
	       32'd0 ;
  assign IF_NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINU_ETC___d988 =
	     NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d961 ?
	       (IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_OR_NO_ETC___d982 ?
		  ((x__h18786[56:25] == 32'h7FFFFFFF) ?
		     x__h18786[56:25] :
		     x__h18786[56:25] + 32'd1) :
		  x__h18786[56:25]) :
	       32'd0 ;
  assign IF_NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINU_ETC___d990 =
	     (NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d926 ==
	      20'd1048545) ?
	       ((_theResult_____2__h18045[32:31] == 2'b11) ?
		  _theResult_____2__h18045[31:0] :
		  IF_requestR_3_BIT_223_21_THEN_2147483648_ELSE__ETC___d921) :
	       (NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d959[19] ?
		  IF_requestR_3_BIT_223_21_THEN_2147483648_ELSE__ETC___d921 :
		  IF_NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINU_ETC___d988) ;
  assign IF_requestR_3_BITS_158_TO_151_085_EQ_0_101_AND_ETC___d1134 =
	     requestR_3_BITS_158_TO_151_085_EQ_0_101_AND_re_ETC___d1108 ?
	       requestR[159:128] :
	       (NOT_requestR_3_BITS_222_TO_215_12_EQ_255_13_00_ETC___d1132 ?
		  requestR[223:192] :
		  requestR[159:128]) ;
  assign IF_requestR_3_BITS_158_TO_151_085_EQ_0_101_AND_ETC___d1150 =
	     requestR_3_BITS_158_TO_151_085_EQ_0_101_AND_re_ETC___d1108 ?
	       requestR[223:192] :
	       (NOT_requestR_3_BITS_222_TO_215_12_EQ_255_13_00_ETC___d1132 ?
		  requestR[159:128] :
		  requestR[223:192]) ;
  assign IF_requestR_3_BITS_158_TO_151_085_EQ_255_086_A_ETC___d1135 =
	     (requestR[158:151] == 8'd255 && requestR[150] ||
	      requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_requ_ETC___d1104) ?
	       requestR[223:192] :
	       IF_requestR_3_BITS_158_TO_151_085_EQ_0_101_AND_ETC___d1134 ;
  assign IF_requestR_3_BITS_158_TO_151_085_EQ_255_086_A_ETC___d1139 =
	     (requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0 &&
	      !requestR[150]) ?
	       x__h4332 :
	       ((requestR[222:215] == 8'd255 && requestR[214] &&
		 requestR[158:151] == 8'd255 &&
		 requestR[150]) ?
		  64'hFFFFFFFF7FC00000 :
		  { 32'hFFFFFFFF,
		    (requestR[222:215] == 8'd255 && requestR[214]) ?
		      requestR[159:128] :
		      IF_requestR_3_BITS_158_TO_151_085_EQ_255_086_A_ETC___d1135 }) ;
  assign IF_requestR_3_BITS_158_TO_151_085_EQ_255_086_A_ETC___d1152 =
	     (requestR[158:151] == 8'd255 && requestR[150]) ?
	       requestR[223:192] :
	       (requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_requ_ETC___d1104 ?
		  requestR[159:128] :
		  IF_requestR_3_BITS_158_TO_151_085_EQ_0_101_AND_ETC___d1150) ;
  assign IF_requestR_3_BITS_158_TO_151_085_EQ_255_086_A_ETC___d1156 =
	     (requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0 &&
	      !requestR[150]) ?
	       x__h4332 :
	       ((requestR[222:215] == 8'd255 && requestR[214] &&
		 requestR[158:151] == 8'd255 &&
		 requestR[150]) ?
		  64'hFFFFFFFF7FC00000 :
		  { 32'hFFFFFFFF,
		    (requestR[222:215] == 8'd255 && requestR[214]) ?
		      requestR[159:128] :
		      IF_requestR_3_BITS_158_TO_151_085_EQ_255_086_A_ETC___d1152 }) ;
  assign IF_requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_r_ETC___d1053 =
	     (requestR[222:215] == 8'd0 && requestR[214:192] == 23'd0) ?
	       32'd0 :
	       (NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d1024[19] ?
		  32'hFFFFFFFF :
		  IF_NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINU_ETC___d1051) ;
  assign IF_requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_r_ETC___d1229 =
	     (requestR[222:215] == 8'd0 && requestR[214:192] == 23'd0) ?
	       res___1__h29807 :
	       ((requestR[222:215] == 8'd0) ? res___1__h29826 : res__h29842) ;
  assign IF_requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_ETC___d992 =
	     (requestR[222:215] == 8'd255 && requestR[214:192] == 23'd0) ?
	       IF_requestR_3_BIT_223_21_THEN_2147483648_ELSE__ETC___d921 :
	       ((requestR[222:215] == 8'd0 && requestR[214:192] == 23'd0) ?
		  32'd0 :
		  IF_NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINU_ETC___d990) ;
  assign IF_requestR_3_BITS_223_TO_192_17_EQ_0_33_OR_NO_ETC___d493 =
	     (requestR[223:192] == 32'd0 ||
	      !sfd__h5212[31] && !sfd__h5212[30] && !sfd__h5212[29] &&
	      !sfd__h5212[28] &&
	      !sfd__h5212[27] &&
	      !sfd__h5212[26] &&
	      !sfd__h5212[25] &&
	      !sfd__h5212[24] &&
	      !sfd__h5212[23] &&
	      !sfd__h5212[22] &&
	      !sfd__h5212[21] &&
	      !sfd__h5212[20] &&
	      !sfd__h5212[19] &&
	      !sfd__h5212[18] &&
	      !sfd__h5212[17] &&
	      !sfd__h5212[16] &&
	      !sfd__h5212[15] &&
	      !sfd__h5212[14] &&
	      !sfd__h5212[13] &&
	      !sfd__h5212[12] &&
	      !sfd__h5212[11] &&
	      !sfd__h5212[10] &&
	      !sfd__h5212[9] &&
	      !sfd__h5212[8] &&
	      !sfd__h5212[7] &&
	      !sfd__h5212[6] &&
	      !sfd__h5212[5] &&
	      !sfd__h5212[4] &&
	      !sfd__h5212[3] &&
	      !sfd__h5212[2] &&
	      !sfd__h5212[1] &&
	      !sfd__h5212[0]) ?
	       8'd0 :
	       _theResult___snd_fst_exp__h11204 ;
  assign IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_OR_NO_ETC___d1045 =
	     (requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
	      requestR[258:256] != 3'h3 &&
	      requestR[258:256] != 3'h4) ?
	       ((guard__h19695 == 2'b10) ?
		  x__h19916[25] :
		  guard__h19695 == 2'b11) :
	       requestR[258:256] == 3'h3 && guard__h19695 != 2'd0 ;
  assign IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_OR_NO_ETC___d950 =
	     (requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
	      requestR[258:256] != 3'h3 &&
	      requestR[258:256] != 3'h4) ?
	       ((guard__h18043 == 2'b10) ?
		  IF_requestR_3_BIT_223_21_THEN_NEG_0b0_CONCAT_N_ETC___d933[24] :
		  guard__h18043 == 2'b11) :
	       ((requestR[258:256] == 3'h3) ?
		  guard__h18043 != 2'd0 :
		  requestR[258:256] == 3'h1 &&
		  IF_requestR_3_BIT_223_21_THEN_NEG_0b0_CONCAT_N_ETC___d933[56] &&
		  guard__h18043 != 2'd0) ;
  assign IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_OR_NO_ETC___d982 =
	     (requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
	      requestR[258:256] != 3'h3 &&
	      requestR[258:256] != 3'h4) ?
	       ((guard__h18597 == 2'b10) ?
		  x__h18786[25] :
		  guard__h18597 == 2'b11) :
	       ((requestR[258:256] == 3'h3) ?
		  guard__h18597 != 2'd0 :
		  requestR[258:256] == 3'h1 && x__h18786[56] &&
		  guard__h18597 != 2'd0) ;
  assign IF_requestR_3_BIT_223_21_THEN_0_ELSE_IF_reques_ETC___d722 =
	     requestR[223] ?
	       6'd0 :
	       (requestR[222] ?
		  6'd1 :
		  (requestR[221] ?
		     6'd2 :
		     (requestR[220] ?
			6'd3 :
			(requestR[219] ?
			   6'd4 :
			   (requestR[218] ?
			      6'd5 :
			      (requestR[217] ?
				 6'd6 :
				 (requestR[216] ?
				    6'd7 :
				    (requestR[215] ?
				       6'd8 :
				       (requestR[214] ?
					  6'd9 :
					  (requestR[213] ?
					     6'd10 :
					     (requestR[212] ?
						6'd11 :
						(requestR[211] ?
						   6'd12 :
						   (requestR[210] ?
						      6'd13 :
						      (requestR[209] ?
							 6'd14 :
							 (requestR[208] ?
							    6'd15 :
							    (requestR[207] ?
							       6'd16 :
							       (requestR[206] ?
								  6'd17 :
								  (requestR[205] ?
								     6'd18 :
								     (requestR[204] ?
									6'd19 :
									(requestR[203] ?
									   6'd20 :
									   (requestR[202] ?
									      6'd21 :
									      (requestR[201] ?
										 6'd22 :
										 (requestR[200] ?
										    6'd23 :
										    (requestR[199] ?
										       6'd24 :
										       (requestR[198] ?
											  6'd25 :
											  (requestR[197] ?
											     6'd26 :
											     (requestR[196] ?
												6'd27 :
												(requestR[195] ?
												   6'd28 :
												   (requestR[194] ?
												      6'd29 :
												      (requestR[193] ?
													 6'd30 :
													 (requestR[192] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign IF_requestR_3_BIT_223_21_THEN_2147483648_ELSE__ETC___d921 =
	     requestR[223] ? 32'h80000000 : 32'h7FFFFFFF ;
  assign IF_requestR_3_BIT_223_21_THEN_NEG_0b0_CONCAT_N_ETC___d933 =
	     requestR[223] ? -b__h18110 : b__h18110 ;
  assign IF_requestR_3_BIT_223_21_THEN_NEG_requestR_3_B_ETC___d574 =
	     (sfd__h5212[31] || sfd__h5212[30] || sfd__h5212[29] ||
	      sfd__h5212[28] ||
	      sfd__h5212[27] ||
	      sfd__h5212[26] ||
	      sfd__h5212[25] ||
	      sfd__h5212[24] ||
	      sfd__h5212[23] ||
	      sfd__h5212[22] ||
	      sfd__h5212[21] ||
	      sfd__h5212[20] ||
	      sfd__h5212[19] ||
	      sfd__h5212[18] ||
	      sfd__h5212[17] ||
	      sfd__h5212[16] ||
	      sfd__h5212[15] ||
	      sfd__h5212[14] ||
	      sfd__h5212[13] ||
	      sfd__h5212[12] ||
	      sfd__h5212[11] ||
	      sfd__h5212[10] ||
	      sfd__h5212[9] ||
	      sfd__h5212[8] ||
	      sfd__h5212[7] ||
	      sfd__h5212[6] ||
	      sfd__h5212[5] ||
	      sfd__h5212[4] ||
	      sfd__h5212[3] ||
	      sfd__h5212[2] ||
	      sfd__h5212[1] ||
	      sfd__h5212[0]) &&
	     (!_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d367 ||
	      !_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d369 &&
	      !_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d372 &&
	      _theResult___fst_exp__h11195 == 8'd255 &&
	      _theResult___fst_sfd__h11196 == 23'd0) ;
  assign IF_requestR_3_BIT_223_21_THEN_NEG_requestR_3_B_ETC___d577 =
	     (sfd__h5212[31] || sfd__h5212[30] || sfd__h5212[29] ||
	      sfd__h5212[28] ||
	      sfd__h5212[27] ||
	      sfd__h5212[26] ||
	      sfd__h5212[25] ||
	      sfd__h5212[24] ||
	      sfd__h5212[23] ||
	      sfd__h5212[22] ||
	      sfd__h5212[21] ||
	      sfd__h5212[20] ||
	      sfd__h5212[19] ||
	      sfd__h5212[18] ||
	      sfd__h5212[17] ||
	      sfd__h5212[16] ||
	      sfd__h5212[15] ||
	      sfd__h5212[14] ||
	      sfd__h5212[13] ||
	      sfd__h5212[12] ||
	      sfd__h5212[11] ||
	      sfd__h5212[10] ||
	      sfd__h5212[9] ||
	      sfd__h5212[8] ||
	      sfd__h5212[7] ||
	      sfd__h5212[6] ||
	      sfd__h5212[5] ||
	      sfd__h5212[4] ||
	      sfd__h5212[3] ||
	      sfd__h5212[2] ||
	      sfd__h5212[1] ||
	      sfd__h5212[0]) &&
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d367 &&
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d369 ;
  assign IF_requestR_3_BIT_223_21_THEN_NEG_requestR_3_B_ETC___d586 =
	     (sfd__h5212[31] || sfd__h5212[30] || sfd__h5212[29] ||
	      sfd__h5212[28] ||
	      sfd__h5212[27] ||
	      sfd__h5212[26] ||
	      sfd__h5212[25] ||
	      sfd__h5212[24] ||
	      sfd__h5212[23] ||
	      sfd__h5212[22] ||
	      sfd__h5212[21] ||
	      sfd__h5212[20] ||
	      sfd__h5212[19] ||
	      sfd__h5212[18] ||
	      sfd__h5212[17] ||
	      sfd__h5212[16] ||
	      sfd__h5212[15] ||
	      sfd__h5212[14] ||
	      sfd__h5212[13] ||
	      sfd__h5212[12] ||
	      sfd__h5212[11] ||
	      sfd__h5212[10] ||
	      sfd__h5212[9] ||
	      sfd__h5212[8] ||
	      sfd__h5212[7] ||
	      sfd__h5212[6] ||
	      sfd__h5212[5] ||
	      sfd__h5212[4] ||
	      sfd__h5212[3] ||
	      sfd__h5212[2] ||
	      sfd__h5212[1] ||
	      sfd__h5212[0]) &&
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d367 &&
	     !_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d369 &&
	     IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223__ETC___d583 ;
  assign IF_requestR_3_BIT_223_21_THEN_NOT_requestR_3_B_ETC___d1128 =
	     requestR[223] ?
	       !requestR_3_BITS_222_TO_215_12_ULE_requestR_3_B_ETC___d1117 ||
	       requestR_3_BITS_222_TO_215_12_EQ_requestR_3_BI_ETC___d1119 &&
	       !requestR_3_BITS_214_TO_192_14_ULE_requestR_3_B_ETC___d1120 :
	       requestR_3_BITS_222_TO_215_12_ULT_requestR_3_B_ETC___d1124 ||
	       requestR_3_BITS_222_TO_215_12_EQ_requestR_3_BI_ETC___d1119 &&
	       requestR_3_BITS_214_TO_192_14_ULT_requestR_3_B_ETC___d1125 ;
  assign IF_sfd___30116_BIT_7_THEN_2_ELSE_0__q4 =
	     sfd___3__h10116[7] ? 2'd2 : 2'd0 ;
  assign IF_sfd___30116_BIT_8_THEN_2_ELSE_0__q3 =
	     sfd___3__h10116[8] ? 2'd2 : 2'd0 ;
  assign IF_sfd___36328_BIT_7_THEN_2_ELSE_0__q18 =
	     sfd___3__h16328[7] ? 2'd2 : 2'd0 ;
  assign IF_sfd___36328_BIT_8_THEN_2_ELSE_0__q17 =
	     sfd___3__h16328[8] ? 2'd2 : 2'd0 ;
  assign IF_x8786_BIT_24_THEN_2_ELSE_0__q29 = x__h18786[24] ? 2'd2 : 2'd0 ;
  assign IF_x9916_BIT_24_THEN_2_ELSE_0__q30 = x__h19916[24] ? 2'd2 : 2'd0 ;
  assign NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d1024 =
	     NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d958 -
	     20'd1 ;
  assign NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d1026 =
	     (NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d1024 ^
	      20'h80000) <=
	     20'd524320 ;
  assign NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d926 =
	     -{ {12{requestR_BITS_222_TO_215_MINUS_127__q28[7]}},
		requestR_BITS_222_TO_215_MINUS_127__q28 } ;
  assign NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d958 =
	     NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d926 +
	     20'd32 ;
  assign NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d959 =
	     NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d958 -
	     20'd2 ;
  assign NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d961 =
	     (NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d959 ^
	      20'h80000) <=
	     20'd524320 ;
  assign NOT_IF_requestR_3_BIT_223_21_THEN_NEG_requestR_ETC___d371 =
	     !sfd__h5212[31] && !sfd__h5212[30] && !sfd__h5212[29] &&
	     !sfd__h5212[28] &&
	     !sfd__h5212[27] &&
	     !sfd__h5212[26] &&
	     !sfd__h5212[25] &&
	     !sfd__h5212[24] &&
	     !sfd__h5212[23] &&
	     !sfd__h5212[22] &&
	     !sfd__h5212[21] &&
	     !sfd__h5212[20] &&
	     !sfd__h5212[19] &&
	     !sfd__h5212[18] &&
	     !sfd__h5212[17] &&
	     !sfd__h5212[16] &&
	     !sfd__h5212[15] &&
	     !sfd__h5212[14] &&
	     !sfd__h5212[13] &&
	     !sfd__h5212[12] &&
	     !sfd__h5212[11] &&
	     !sfd__h5212[10] &&
	     !sfd__h5212[9] &&
	     !sfd__h5212[8] &&
	     !sfd__h5212[7] &&
	     !sfd__h5212[6] &&
	     !sfd__h5212[5] &&
	     !sfd__h5212[4] &&
	     !sfd__h5212[3] &&
	     !sfd__h5212[2] &&
	     !sfd__h5212[1] &&
	     !sfd__h5212[0] ||
	     !_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d367 ||
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d369 ;
  assign NOT_requestR_3_BITS_222_TO_215_12_EQ_0_22_28_O_ETC___d1003 =
	     (requestR[222:215] != 8'd0 || requestR[214:192] != 23'd0) &&
	     ((NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d926 ==
	       20'd1048545) ?
		_theResult_____2__h18045[32:31] != 2'b11 :
		NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d959[19] ||
		NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d961 &&
		IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_OR_NO_ETC___d982 &&
		x__h18786[56:25] == 32'h7FFFFFFF) ;
  assign NOT_requestR_3_BITS_222_TO_215_12_EQ_0_22_28_O_ETC___d1068 =
	     (requestR[222:215] != 8'd0 || requestR[214:192] != 23'd0) &&
	     !NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d1024[19] &&
	     (!NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d1026 ||
	      guard__h19695 != 2'd0) ;
  assign NOT_requestR_3_BITS_222_TO_215_12_EQ_255_13_00_ETC___d1132 =
	     (requestR[222:215] != 8'd255 || requestR[214:192] == 23'd0) &&
	     (requestR[158:151] != 8'd255 || requestR[150:128] == 23'd0) &&
	     (requestR[222:215] != 8'd0 || requestR[214:192] != 23'd0 ||
	      requestR[158:151] != 8'd0 ||
	      requestR[150:128] != 23'd0) &&
	     (requestR[223] && !requestR[159] ||
	      (requestR[223] || !requestR[159]) &&
	      IF_requestR_3_BIT_223_21_THEN_NOT_requestR_3_B_ETC___d1128) ;
  assign NOT_requestR_3_BITS_222_TO_215_12_EQ_255_13_00_ETC___d1215 =
	     (requestR[222:215] != 8'd255 || requestR[214:192] == 23'd0) &&
	     (requestR[158:151] != 8'd255 || requestR[150:128] == 23'd0) &&
	     (requestR[223] && !requestR[159] ||
	      (requestR[223] || !requestR[159]) &&
	      IF_requestR_3_BIT_223_21_THEN_NOT_requestR_3_B_ETC___d1128 ||
	      requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_requ_ETC___d1194) ;
  assign NOT_requestR_3_BITS_222_TO_215_12_ULT_requestR_ETC___d1190 =
	     !requestR_3_BITS_222_TO_215_12_ULT_requestR_3_B_ETC___d1124 &&
	     (!requestR_3_BITS_222_TO_215_12_EQ_requestR_3_BI_ETC___d1119 ||
	      !requestR_3_BITS_214_TO_192_14_ULT_requestR_3_B_ETC___d1125) &&
	     requestR_3_BITS_222_TO_215_12_ULE_requestR_3_B_ETC___d1117 &&
	     (!requestR_3_BITS_222_TO_215_12_EQ_requestR_3_BI_ETC___d1119 ||
	      requestR_3_BITS_214_TO_192_14_ULE_requestR_3_B_ETC___d1120) ;
  assign NOT_requestR_3_BIT_223_21_96_AND_NOT_requestR__ETC___d815 =
	     !requestR[223] && !requestR[222] && !requestR[221] &&
	     !requestR[220] &&
	     !requestR[219] &&
	     !requestR[218] &&
	     !requestR[217] &&
	     !requestR[216] &&
	     !requestR[215] &&
	     !requestR[214] &&
	     !requestR[213] &&
	     !requestR[212] &&
	     !requestR[211] &&
	     !requestR[210] &&
	     !requestR[209] &&
	     !requestR[208] &&
	     !requestR[207] &&
	     !requestR[206] &&
	     !requestR[205] &&
	     !requestR[204] &&
	     !requestR[203] &&
	     !requestR[202] &&
	     !requestR[201] &&
	     !requestR[200] &&
	     !requestR[199] &&
	     !requestR[198] &&
	     !requestR[197] &&
	     !requestR[196] &&
	     !requestR[195] &&
	     !requestR[194] &&
	     !requestR[193] &&
	     !requestR[192] ||
	     !_32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d726 ||
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d727 ;
  assign NOT_verbosity_ULE_1_4___d25 = verbosity > 4'd1 ;
  assign _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d366 =
	     (9'd32 -
	      { 3'd0,
		IF_IF_requestR_3_BIT_223_21_THEN_NEG_requestR__ETC___d363 }) -
	     9'd1 ;
  assign _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d367 =
	     (_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d366 ^
	      9'h100) <=
	     9'd383 ;
  assign _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d369 =
	     (_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d366 ^
	      9'h100) <
	     9'd107 ;
  assign _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d372 =
	     (_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d366 ^
	      9'h100) <
	     9'd130 ;
  assign _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d725 =
	     (9'd32 -
	      { 3'd0,
		IF_requestR_3_BIT_223_21_THEN_0_ELSE_IF_reques_ETC___d722 }) -
	     9'd1 ;
  assign _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d726 =
	     (_32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d725 ^
	      9'h100) <=
	     9'd383 ;
  assign _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d727 =
	     (_32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d725 ^
	      9'h100) <
	     9'd107 ;
  assign _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d728 =
	     (_32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d725 ^
	      9'h100) <
	     9'd130 ;
  assign _theResult_____2__h18045 =
	     IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_OR_NO_ETC___d950 ?
	       out1___1__h18537 :
	       IF_requestR_3_BIT_223_21_THEN_NEG_0b0_CONCAT_N_ETC___d933[56:24] ;
  assign _theResult___exp__h10542 =
	     (sfd__h10143[24] || sfd__h10143[24:23] == 2'b01) ? 8'd1 : 8'd0 ;
  assign _theResult___exp__h11095 =
	     sfd__h10686[24] ?
	       ((x__h10671[7:0] == 8'd254) ?
		  8'd255 :
		  din_inc___2_exp__h11238) :
	       ((x__h10671[7:0] == 8'd0 && sfd__h10686[24:23] == 2'b01) ?
		  8'd1 :
		  x__h10671[7:0]) ;
  assign _theResult___exp__h16751 =
	     (sfd__h16355[24] || sfd__h16355[24:23] == 2'b01) ? 8'd1 : 8'd0 ;
  assign _theResult___exp__h17303 =
	     sfd__h16894[24] ?
	       ((x__h16879[7:0] == 8'd254) ?
		  8'd255 :
		  din_inc___2_exp__h17441) :
	       ((x__h16879[7:0] == 8'd0 && sfd__h16894[24:23] == 2'b01) ?
		  8'd1 :
		  x__h16879[7:0]) ;
  assign _theResult___fst_exp__h10639 =
	     (requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
	      requestR[258:256] != 3'h3 &&
	      requestR[258:256] != 3'h4) ?
	       CASE_guard0126_0b0_0_0b1_0_0b10_out_exp0545_0b_ETC__q10 :
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d458 ;
  assign _theResult___fst_exp__h11192 =
	     (requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
	      requestR[258:256] != 3'h3 &&
	      requestR[258:256] != 3'h4) ?
	       CASE_guard0656_0b0_x0671_BITS_7_TO_0_0b1_x0671_ETC__q12 :
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d487 ;
  assign _theResult___fst_exp__h11195 =
	     (x__h10671[7:0] == 8'd255) ?
	       x__h10671[7:0] :
	       _theResult___fst_exp__h11192 ;
  assign _theResult___fst_exp__h16847 =
	     (requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
	      requestR[258:256] != 3'h3 &&
	      requestR[258:256] != 3'h4) ?
	       CASE_guard6338_0b0_0_0b1_0_0b10_out_exp6754_0b_ETC__q19 :
	       CASE_requestR_BITS_258_TO_256_0x3_IF_guard6338_ETC__q21 ;
  assign _theResult___fst_exp__h17399 =
	     (requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
	      requestR[258:256] != 3'h3 &&
	      requestR[258:256] != 3'h4) ?
	       CASE_guard6864_0b0_x6879_BITS_7_TO_0_0b1_x6879_ETC__q23 :
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d806 ;
  assign _theResult___fst_exp__h17402 =
	     (x__h16879[7:0] == 8'd255) ?
	       x__h16879[7:0] :
	       _theResult___fst_exp__h17399 ;
  assign _theResult___fst_sfd__h10640 =
	     (requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
	      requestR[258:256] != 3'h3 &&
	      requestR[258:256] != 3'h4) ?
	       CASE_guard0126_0b0_sfd___30116_BITS_31_TO_9_0b_ETC__q14 :
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d510 ;
  assign _theResult___fst_sfd__h11193 =
	     (requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
	      requestR[258:256] != 3'h3 &&
	      requestR[258:256] != 3'h4) ?
	       CASE_guard0656_0b0_sfd___30116_BITS_30_TO_8_0b_ETC__q16 :
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d528 ;
  assign _theResult___fst_sfd__h11196 =
	     (x__h10671[7:0] == 8'd255) ?
	       sfd___3__h10116[30:8] :
	       _theResult___fst_sfd__h11193 ;
  assign _theResult___fst_sfd__h16848 =
	     (requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
	      requestR[258:256] != 3'h3 &&
	      requestR[258:256] != 3'h4) ?
	       CASE_guard6338_0b0_sfd___36328_BITS_31_TO_9_0b_ETC__q27 :
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d829 ;
  assign _theResult___fst_sfd__h17400 =
	     (requestR[258:256] != 3'h1 && requestR[258:256] != 3'h2 &&
	      requestR[258:256] != 3'h3 &&
	      requestR[258:256] != 3'h4) ?
	       CASE_guard6864_0b0_sfd___36328_BITS_30_TO_8_0b_ETC__q25 :
	       IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d844 ;
  assign _theResult___fst_sfd__h17403 =
	     (x__h16879[7:0] == 8'd255) ?
	       sfd___3__h16328[30:8] :
	       _theResult___fst_sfd__h17400 ;
  assign _theResult___sfd__h10543 =
	     sfd__h10143[24] ? sfd__h10143[23:1] : sfd__h10143[22:0] ;
  assign _theResult___sfd__h11096 =
	     sfd__h10686[24] ?
	       ((x__h10671[7:0] == 8'd254) ? 23'd0 : sfd__h10686[23:1]) :
	       sfd__h10686[22:0] ;
  assign _theResult___sfd__h16752 =
	     sfd__h16355[24] ? sfd__h16355[23:1] : sfd__h16355[22:0] ;
  assign _theResult___sfd__h17304 =
	     sfd__h16894[24] ?
	       ((x__h16879[7:0] == 8'd254) ? 23'd0 : sfd__h16894[23:1]) :
	       sfd__h16894[22:0] ;
  assign _theResult___snd_fst_exp__h11198 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d372 ?
	       _theResult___fst_exp__h10639 :
	       _theResult___fst_exp__h11195 ;
  assign _theResult___snd_fst_exp__h11201 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d369 ?
	       8'd0 :
	       _theResult___snd_fst_exp__h11198 ;
  assign _theResult___snd_fst_exp__h11204 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d367 ?
	       _theResult___snd_fst_exp__h11201 :
	       8'd255 ;
  assign _theResult___snd_fst_exp__h17405 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d728 ?
	       _theResult___fst_exp__h16847 :
	       _theResult___fst_exp__h17402 ;
  assign _theResult___snd_fst_exp__h17408 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d727 ?
	       8'd0 :
	       _theResult___snd_fst_exp__h17405 ;
  assign _theResult___snd_fst_exp__h17411 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d726 ?
	       _theResult___snd_fst_exp__h17408 :
	       8'd255 ;
  assign _theResult___snd_fst_sfd__h11199 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d372 ?
	       _theResult___fst_sfd__h10640 :
	       _theResult___fst_sfd__h11196 ;
  assign _theResult___snd_fst_sfd__h17406 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d728 ?
	       _theResult___fst_sfd__h16848 :
	       _theResult___fst_sfd__h17403 ;
  assign b__h18110 = { value__h18112, 32'd0 } ;
  assign din_inc___2_exp__h11238 = x__h10671[7:0] + 8'd1 ;
  assign din_inc___2_exp__h17441 = x__h16879[7:0] + 8'd1 ;
  assign guard__h10126 =
	     { IF_sfd___30116_BIT_8_THEN_2_ELSE_0__q3[1],
	       { sfd___3__h10116[7:0], 23'd0 } != 31'd0 } ;
  assign guard__h10656 =
	     { IF_sfd___30116_BIT_7_THEN_2_ELSE_0__q4[1],
	       { sfd___3__h10116[6:0], 24'd0 } != 31'd0 } ;
  assign guard__h16338 =
	     { IF_sfd___36328_BIT_8_THEN_2_ELSE_0__q17[1],
	       { sfd___3__h16328[7:0], 23'd0 } != 31'd0 } ;
  assign guard__h16864 =
	     { IF_sfd___36328_BIT_7_THEN_2_ELSE_0__q18[1],
	       { sfd___3__h16328[6:0], 24'd0 } != 31'd0 } ;
  assign guard__h18043 =
	     { IF_requestR_3_BIT_223_21_THEN_NEG_0b0_CONCAT_N_ETC___d933[23],
	       { IF_requestR_3_BIT_223_21_THEN_NEG_0b0_CONCAT_N_ETC___d933[22:0],
		 33'd0 } !=
	       56'd0 } ;
  assign guard__h18597 =
	     { IF_x8786_BIT_24_THEN_2_ELSE_0__q29[1],
	       { x__h18786[23:0], 32'd0 } != 56'd0 } ;
  assign guard__h19695 =
	     { IF_x9916_BIT_24_THEN_2_ELSE_0__q30[1],
	       { x__h19916[23:0], 32'd0 } != 56'd0 } ;
  assign out1___1__h18537 =
	     IF_requestR_3_BIT_223_21_THEN_NEG_0b0_CONCAT_N_ETC___d933[56:24] +
	     33'd1 ;
  assign out_exp__h10545 =
	     sfd___3__h10116[9] ? _theResult___exp__h10542 : 8'd0 ;
  assign out_exp__h11098 =
	     sfd___3__h10116[8] ? _theResult___exp__h11095 : x__h10671[7:0] ;
  assign out_exp__h16754 =
	     sfd___3__h16328[9] ? _theResult___exp__h16751 : 8'd0 ;
  assign out_exp__h17306 =
	     sfd___3__h16328[8] ? _theResult___exp__h17303 : x__h16879[7:0] ;
  assign out_sfd__h10546 =
	     sfd___3__h10116[9] ?
	       _theResult___sfd__h10543 :
	       sfd___3__h10116[31:9] ;
  assign out_sfd__h11099 =
	     sfd___3__h10116[8] ?
	       _theResult___sfd__h11096 :
	       sfd___3__h10116[30:8] ;
  assign out_sfd__h16755 =
	     sfd___3__h16328[9] ?
	       _theResult___sfd__h16752 :
	       sfd___3__h16328[31:9] ;
  assign out_sfd__h17307 =
	     sfd___3__h16328[8] ?
	       _theResult___sfd__h17304 :
	       sfd___3__h16328[30:8] ;
  assign requestR_3_BITS_158_TO_151_085_EQ_0_101_AND_re_ETC___d1108 =
	     requestR[158:151] == 8'd0 && requestR[150:128] == 23'd0 &&
	     requestR[159] &&
	     requestR[222:215] == 8'd0 &&
	     requestR[214:192] == 23'd0 &&
	     !requestR[223] ;
  assign requestR_3_BITS_214_TO_192_14_ULE_requestR_3_B_ETC___d1120 =
	     requestR[214:192] <= requestR[150:128] ;
  assign requestR_3_BITS_214_TO_192_14_ULT_requestR_3_B_ETC___d1125 =
	     requestR[214:192] < requestR[150:128] ;
  assign requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_requ_ETC___d1104 =
	     requestR[222:215] == 8'd0 && requestR[214:192] == 23'd0 &&
	     requestR[223] &&
	     requestR[158:151] == 8'd0 &&
	     requestR[150:128] == 23'd0 &&
	     !requestR[159] ;
  assign requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_requ_ETC___d1194 =
	     requestR[222:215] == 8'd0 && requestR[214:192] == 23'd0 &&
	     requestR[158:151] == 8'd0 &&
	     requestR[150:128] == 23'd0 ||
	     (!requestR[223] || requestR[159]) &&
	     (requestR[223] || !requestR[159]) &&
	     (requestR[223] ?
		requestR_3_BITS_222_TO_215_12_ULE_requestR_3_B_ETC___d1189 :
		NOT_requestR_3_BITS_222_TO_215_12_ULT_requestR_ETC___d1190) ;
  assign requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_0__ETC___d1063 =
	     requestR[222:215] == 8'd255 && requestR[214:192] != 23'd0 ||
	     requestR[222:215] == 8'd255 && requestR[214:192] == 23'd0 ||
	     (requestR[222:215] != 8'd0 || requestR[214:192] != 23'd0) &&
	     (NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d1024[19] ||
	      NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d1026 &&
	      IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_OR_NO_ETC___d1045 &&
	      x__h19916[56:25] == 32'hFFFFFFFF) ;
  assign requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_0__ETC___d1074 =
	     { requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_0__ETC___d1063,
	       3'd0,
	       (requestR[222:215] != 8'd255 || requestR[214:192] == 23'd0) &&
	       (requestR[222:215] != 8'd255 || requestR[214:192] != 23'd0) &&
	       NOT_requestR_3_BITS_222_TO_215_12_EQ_0_22_28_O_ETC___d1068 } ==
	     5'd0 ||
	     requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_0__ETC___d1063 ;
  assign requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1094 =
	     requestR[222:215] == 8'd255 && requestR[214:192] != 23'd0 &&
	     !requestR[214] &&
	     requestR[158:151] == 8'd255 &&
	     requestR[150:128] != 23'd0 &&
	     !requestR[150] ;
  assign requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1142 =
	     requestR[222:215] == 8'd255 && requestR[214:192] != 23'd0 &&
	     !requestR[214] ||
	     requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0 &&
	     !requestR[150] ;
  assign requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1179 =
	     requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1142 ||
	     requestR[222:215] == 8'd255 && requestR[214] ||
	     requestR[158:151] == 8'd255 && requestR[150] ;
  assign requestR_3_BITS_222_TO_215_12_EQ_requestR_3_BI_ETC___d1119 =
	     requestR[222:215] == requestR[158:151] ;
  assign requestR_3_BITS_222_TO_215_12_ULE_requestR_3_B_ETC___d1117 =
	     requestR[222:215] <= requestR[158:151] ;
  assign requestR_3_BITS_222_TO_215_12_ULE_requestR_3_B_ETC___d1189 =
	     requestR_3_BITS_222_TO_215_12_ULE_requestR_3_B_ETC___d1117 &&
	     (!requestR_3_BITS_222_TO_215_12_EQ_requestR_3_BI_ETC___d1119 ||
	      requestR_3_BITS_214_TO_192_14_ULE_requestR_3_B_ETC___d1120) &&
	     !requestR_3_BITS_222_TO_215_12_ULT_requestR_3_B_ETC___d1124 &&
	     (!requestR_3_BITS_222_TO_215_12_EQ_requestR_3_BI_ETC___d1119 ||
	      !requestR_3_BITS_214_TO_192_14_ULT_requestR_3_B_ETC___d1125) ;
  assign requestR_3_BITS_222_TO_215_12_ULT_requestR_3_B_ETC___d1124 =
	     requestR[222:215] < requestR[158:151] ;
  assign requestR_3_BIT_223_21_OR_requestR_3_BIT_222_97_ETC___d889 =
	     (requestR[223] || requestR[222] || requestR[221] ||
	      requestR[220] ||
	      requestR[219] ||
	      requestR[218] ||
	      requestR[217] ||
	      requestR[216] ||
	      requestR[215] ||
	      requestR[214] ||
	      requestR[213] ||
	      requestR[212] ||
	      requestR[211] ||
	      requestR[210] ||
	      requestR[209] ||
	      requestR[208] ||
	      requestR[207] ||
	      requestR[206] ||
	      requestR[205] ||
	      requestR[204] ||
	      requestR[203] ||
	      requestR[202] ||
	      requestR[201] ||
	      requestR[200] ||
	      requestR[199] ||
	      requestR[198] ||
	      requestR[197] ||
	      requestR[196] ||
	      requestR[195] ||
	      requestR[194] ||
	      requestR[193] ||
	      requestR[192]) &&
	     (!_32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d726 ||
	      !_32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d727 &&
	      !_32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d728 &&
	      _theResult___fst_exp__h17402 == 8'd255 &&
	      _theResult___fst_sfd__h17403 == 23'd0) ;
  assign requestR_3_BIT_223_21_OR_requestR_3_BIT_222_97_ETC___d892 =
	     (requestR[223] || requestR[222] || requestR[221] ||
	      requestR[220] ||
	      requestR[219] ||
	      requestR[218] ||
	      requestR[217] ||
	      requestR[216] ||
	      requestR[215] ||
	      requestR[214] ||
	      requestR[213] ||
	      requestR[212] ||
	      requestR[211] ||
	      requestR[210] ||
	      requestR[209] ||
	      requestR[208] ||
	      requestR[207] ||
	      requestR[206] ||
	      requestR[205] ||
	      requestR[204] ||
	      requestR[203] ||
	      requestR[202] ||
	      requestR[201] ||
	      requestR[200] ||
	      requestR[199] ||
	      requestR[198] ||
	      requestR[197] ||
	      requestR[196] ||
	      requestR[195] ||
	      requestR[194] ||
	      requestR[193] ||
	      requestR[192]) &&
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d726 &&
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d727 ;
  assign requestR_3_BIT_223_21_OR_requestR_3_BIT_222_97_ETC___d901 =
	     (requestR[223] || requestR[222] || requestR[221] ||
	      requestR[220] ||
	      requestR[219] ||
	      requestR[218] ||
	      requestR[217] ||
	      requestR[216] ||
	      requestR[215] ||
	      requestR[214] ||
	      requestR[213] ||
	      requestR[212] ||
	      requestR[211] ||
	      requestR[210] ||
	      requestR[209] ||
	      requestR[208] ||
	      requestR[207] ||
	      requestR[206] ||
	      requestR[205] ||
	      requestR[204] ||
	      requestR[203] ||
	      requestR[202] ||
	      requestR[201] ||
	      requestR[200] ||
	      requestR[199] ||
	      requestR[198] ||
	      requestR[197] ||
	      requestR[196] ||
	      requestR[195] ||
	      requestR[194] ||
	      requestR[193] ||
	      requestR[192]) &&
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d726 &&
	     !_32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d727 &&
	     IF_32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21__ETC___d898 ;
  assign requestR_BITS_222_TO_215_MINUS_127__q28 =
	     requestR[222:215] - 8'd127 ;
  assign requestR_BITS_223_TO_192__q2 = requestR[223:192] ;
  assign requestR_BITS_63_TO_32__q1 = requestR[63:32] ;
  assign res___1__h29562 =
	     (requestR[222:215] == 8'd255 && requestR[214]) ?
	       64'd512 :
	       64'd256 ;
  assign res___1__h29797 = requestR[223] ? 64'd1 : 64'd128 ;
  assign res___1__h29807 = requestR[223] ? 64'd8 : 64'd16 ;
  assign res___1__h29826 = requestR[223] ? 64'd4 : 64'd32 ;
  assign res__h20952 = { 32'hFFFFFFFF, requestR[159:128] } ;
  assign res__h26678 =
	     ((requestR[222:215] != 8'd255 || requestR[214:192] == 23'd0) &&
	      (requestR[158:151] != 8'd255 || requestR[150:128] == 23'd0) &&
	      requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_requ_ETC___d1194) ?
	       64'd1 :
	       64'd0 ;
  assign res__h28190 =
	     NOT_requestR_3_BITS_222_TO_215_12_EQ_255_13_00_ETC___d1132 ?
	       64'd1 :
	       64'd0 ;
  assign res__h29290 =
	     NOT_requestR_3_BITS_222_TO_215_12_EQ_255_13_00_ETC___d1215 ?
	       64'd1 :
	       64'd0 ;
  assign res__h29842 = requestR[223] ? 64'd2 : 64'd64 ;
  assign res__h30046 = { 32'hFFFFFFFF, fpu$server_core_response_get[36:5] } ;
  assign res__h30488 =
	     { 32'hFFFFFFFF, positCore$server_core_response_get[36:5] } ;
  assign sfd___3__h10116 =
	     sfd__h5212 <<
	     IF_IF_requestR_3_BIT_223_21_THEN_NEG_requestR__ETC___d363 ;
  assign sfd___3__h16328 =
	     requestR[223:192] <<
	     IF_requestR_3_BIT_223_21_THEN_0_ELSE_IF_reques_ETC___d722 ;
  assign sfd__h10143 = { 2'd0, sfd___3__h10116[31:9] } + 25'd1 ;
  assign sfd__h10686 =
	     { 1'b0, x__h10671[7:0] != 8'd0, sfd___3__h10116[30:8] } + 25'd1 ;
  assign sfd__h16355 = { 2'd0, sfd___3__h16328[31:9] } + 25'd1 ;
  assign sfd__h16894 =
	     { 1'b0, x__h16879[7:0] != 8'd0, sfd___3__h16328[30:8] } + 25'd1 ;
  assign sfd__h5212 = requestR[223] ? -requestR[223:192] : requestR[223:192] ;
  assign value__h18112 =
	     { 1'b0, requestR[222:215] != 8'd0, requestR[214:192] } ;
  assign x__h10671 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223_21__ETC___d366 +
	     9'd127 ;
  assign x__h11364 =
	     { 2'd0,
	       requestR[223:192] != 32'd0 &&
	       IF_requestR_3_BIT_223_21_THEN_NEG_requestR_3_B_ETC___d574,
	       requestR[223:192] != 32'd0 &&
	       IF_requestR_3_BIT_223_21_THEN_NEG_requestR_3_B_ETC___d577,
	       requestR[223:192] != 32'd0 &&
	       IF_requestR_3_BIT_223_21_THEN_NEG_requestR_3_B_ETC___d586 } ;
  assign x__h11687 =
	     { 33'h1FFFFFFFE,
	       (requestR[223:192] == 32'd0) ?
		 8'd0 :
		 _theResult___snd_fst_exp__h17411,
	       (requestR[223:192] == 32'd0 ||
		NOT_requestR_3_BIT_223_21_96_AND_NOT_requestR__ETC___d815) ?
		 23'd0 :
		 _theResult___snd_fst_sfd__h17406 } ;
  assign x__h16879 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_223_21_THE_ETC___d725 +
	     9'd127 ;
  assign x__h17545 =
	     { 2'd0,
	       requestR[223:192] != 32'd0 &&
	       requestR_3_BIT_223_21_OR_requestR_3_BIT_222_97_ETC___d889,
	       requestR[223:192] != 32'd0 &&
	       requestR_3_BIT_223_21_OR_requestR_3_BIT_222_97_ETC___d892,
	       requestR[223:192] != 32'd0 &&
	       requestR_3_BIT_223_21_OR_requestR_3_BIT_222_97_ETC___d901 } ;
  assign x__h17864 = { {32{x__h17867[31]}}, x__h17867 } ;
  assign x__h17867 =
	     (requestR[222:215] == 8'd255 && requestR[214:192] != 23'd0 ||
	      !requestR[223] && requestR[222:215] == 8'd255 &&
	      requestR[214:192] == 23'd0) ?
	       32'h7FFFFFFF :
	       IF_requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_ETC___d992 ;
  assign x__h18786 =
	     IF_requestR_3_BIT_223_21_THEN_NEG_0b0_CONCAT_N_ETC___d933 >>
	     NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d959 |
	     ~(57'h1FFFFFFFFFFFFFF >>
	       NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d959) &
	     {57{IF_requestR_3_BIT_223_21_THEN_NEG_0b0_CONCAT_N_ETC___d933[56]}} ;
  assign x__h19200 =
	     { requestR[222:215] == 8'd255 && requestR[214:192] != 23'd0 ||
	       requestR[222:215] == 8'd255 && requestR[214:192] == 23'd0 ||
	       NOT_requestR_3_BITS_222_TO_215_12_EQ_0_22_28_O_ETC___d1003,
	       3'd0,
	       (requestR[222:215] != 8'd255 || requestR[214:192] == 23'd0) &&
	       (requestR[222:215] != 8'd255 || requestR[214:192] != 23'd0) &&
	       (requestR[222:215] != 8'd0 || requestR[214:192] != 23'd0) &&
	       IF_NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINU_ETC___d1014 } ;
  assign x__h19492 = { {32{x__h19495[31]}}, x__h19495 } ;
  assign x__h19495 =
	     (requestR[222:215] == 8'd255 && requestR[214:192] != 23'd0 ||
	      !requestR[223] && requestR[222:215] == 8'd255 &&
	      requestR[214:192] == 23'd0) ?
	       32'hFFFFFFFF :
	       (requestR[223] ?
		  32'd0 :
		  ((requestR[222:215] == 8'd255 &&
		    requestR[214:192] == 23'd0) ?
		     32'hFFFFFFFF :
		     IF_requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_r_ETC___d1053)) ;
  assign x__h19916 =
	     { requestR[222:215] != 8'd0, requestR[214:192], 33'd0 } >>
	     NEG_SEXT_requestR_3_BITS_222_TO_215_12_MINUS_1_ETC___d1024 ;
  assign x__h19994 =
	     { requestR[223] ?
		 requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_0__ETC___d1074 :
		 requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_0__ETC___d1063,
	       3'd0,
	       (requestR[222:215] != 8'd255 || requestR[214:192] == 23'd0) &&
	       (requestR[222:215] != 8'd255 || requestR[214:192] != 23'd0) &&
	       NOT_requestR_3_BITS_222_TO_215_12_EQ_0_22_28_O_ETC___d1068 } ;
  assign x__h20276 =
	     requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1094 ?
	       64'hFFFFFFFF7FC00000 :
	       ((requestR[222:215] == 8'd255 && requestR[214:192] != 23'd0 &&
		 !requestR[214]) ?
		  res__h20952 :
		  IF_requestR_3_BITS_158_TO_151_085_EQ_255_086_A_ETC___d1139) ;
  assign x__h22308 =
	     { requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1142,
	       4'd0 } ;
  assign x__h22935 =
	     requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1094 ?
	       64'hFFFFFFFF7FC00000 :
	       ((requestR[222:215] == 8'd255 && requestR[214:192] != 23'd0 &&
		 !requestR[214]) ?
		  res__h20952 :
		  IF_requestR_3_BITS_158_TO_151_085_EQ_255_086_A_ETC___d1156) ;
  assign x__h25640 =
	     { {32{requestR_BITS_223_TO_192__q2[31]}},
	       requestR_BITS_223_TO_192__q2 } ;
  assign x__h25812 =
	     requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1179 ?
	       64'd0 :
	       res__h26678 ;
  assign x__h27324 =
	     requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1179 ?
	       64'd0 :
	       res__h28190 ;
  assign x__h28209 =
	     { requestR[222:215] == 8'd255 && requestR[214:192] != 23'd0 ||
	       requestR[158:151] == 8'd255 && requestR[150:128] != 23'd0,
	       4'd0 } ;
  assign x__h28424 =
	     requestR_3_BITS_222_TO_215_12_EQ_255_13_AND_NO_ETC___d1179 ?
	       64'd0 :
	       res__h29290 ;
  assign x__h29542 =
	     (requestR[222:215] == 8'd255 && requestR[214:192] != 23'd0) ?
	       res___1__h29562 :
	       ((requestR[222:215] == 8'd255 && requestR[214:192] == 23'd0) ?
		  res___1__h29797 :
		  IF_requestR_3_BITS_222_TO_215_12_EQ_0_22_AND_r_ETC___d1229) ;
  assign x__h30456 =
	     (positCore$server_core_response_get[70:69] != 2'd0 &&
	      positCore$server_core_response_get[70:69] != 2'd1) ?
	       res__h30488 :
	       ((positCore$server_core_response_get[70:69] == 2'd1) ?
		  ((positCore$server_core_response_get[35:28] == 8'd255 &&
		    positCore$server_core_response_get[27:5] != 23'd0) ?
		     64'hFFFFFFFF7FC00000 :
		     res__h30488) :
		  64'd0) ;
  assign x__h4332 = { 32'hFFFFFFFF, requestR[223:192] } ;
  assign x__h4466 =
	     { {32{requestR_BITS_63_TO_32__q1[31]}},
	       requestR_BITS_63_TO_32__q1 } ;
  assign x__h4679 = { 32'hFFFFFFFF, x__h4686 } ;
  assign x__h4686 = { requestR[159], requestR[222:192] } ;
  assign x__h4845 = { 32'hFFFFFFFF, x__h4852 } ;
  assign x__h4852 = { !requestR[159], requestR[222:192] } ;
  assign x__h5013 = { 32'hFFFFFFFF, x__h5020 } ;
  assign x__h5020 = { requestR[223] != requestR[159], requestR[222:192] } ;
  assign x__h5191 = { 32'hFFFFFFFF, x__h5197 } ;
  assign x__h5197 =
	     { requestR[223:192] != 32'd0 &&
	       (NOT_IF_requestR_3_BIT_223_21_THEN_NEG_requestR_ETC___d371 ?
		  requestR[223] :
		  IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_223__ETC___d433),
	       IF_requestR_3_BITS_223_TO_192_17_EQ_0_33_OR_NO_ETC___d493,
	       (requestR[223:192] == 32'd0 ||
		NOT_IF_requestR_3_BIT_223_21_THEN_NEG_requestR_ETC___d371) ?
		 23'd0 :
		 _theResult___snd_fst_sfd__h11199 } ;
  always@(fpu$server_core_response_get or res__h30046)
  begin
    case (fpu$server_core_response_get[70:69])
      2'd0:
	  x__h29965 =
	      (fpu$server_core_response_get[67:57] == 11'd2047 &&
	       fpu$server_core_response_get[56:5] != 52'd0) ?
		64'h7FF8000000000000 :
		fpu$server_core_response_get[68:5];
      2'd1:
	  x__h29965 =
	      (fpu$server_core_response_get[35:28] == 8'd255 &&
	       fpu$server_core_response_get[27:5] != 23'd0) ?
		64'hFFFFFFFF7FC00000 :
		res__h30046;
      default: x__h29965 = 64'd0;
    endcase
  end
  always@(requestR)
  begin
    case (requestR[258:256])
      3'h0:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42 =
	      requestR[258:256];
      3'h1: IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42 = 3'd4;
      3'h2: IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42 = 3'd3;
      3'h3: IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42 = 3'd2;
      3'h4: IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42 = 3'd1;
      default: IF_requestR_3_BITS_258_TO_256_2_EQ_0x0_3_THEN__ETC___d42 =
		   3'd0;
    endcase
  end
  always@(guard__h10126 or requestR)
  begin
    case (guard__h10126)
      2'b0, 2'b01, 2'b10:
	  CASE_guard0126_0b0_requestR_BIT_223_0b1_reques_ETC__q5 =
	      requestR[223];
      2'd3:
	  CASE_guard0126_0b0_requestR_BIT_223_0b1_reques_ETC__q5 =
	      guard__h10126 == 2'b11 && requestR[223];
    endcase
  end
  always@(requestR or guard__h10126)
  begin
    case (requestR[258:256])
      3'h2, 3'h3:
	  CASE_requestR_BITS_258_TO_256_0x2_requestR_BIT_ETC__q6 =
	      requestR[223];
      3'h4:
	  CASE_requestR_BITS_258_TO_256_0x2_requestR_BIT_ETC__q6 =
	      (guard__h10126 == 2'b0) ?
		requestR[223] :
		(guard__h10126 == 2'b01 || guard__h10126 == 2'b10 ||
		 guard__h10126 == 2'b11) &&
		requestR[223];
      default: CASE_requestR_BITS_258_TO_256_0x2_requestR_BIT_ETC__q6 =
		   requestR[258:256] == 3'h1 && requestR[223];
    endcase
  end
  always@(guard__h10656 or requestR)
  begin
    case (guard__h10656)
      2'b0, 2'b01, 2'b10:
	  CASE_guard0656_0b0_requestR_BIT_223_0b1_reques_ETC__q7 =
	      requestR[223];
      2'd3:
	  CASE_guard0656_0b0_requestR_BIT_223_0b1_reques_ETC__q7 =
	      guard__h10656 == 2'b11 && requestR[223];
    endcase
  end
  always@(requestR or guard__h10656)
  begin
    case (requestR[258:256])
      3'h2, 3'h3:
	  CASE_requestR_BITS_258_TO_256_0x2_requestR_BIT_ETC__q8 =
	      requestR[223];
      3'h4:
	  CASE_requestR_BITS_258_TO_256_0x2_requestR_BIT_ETC__q8 =
	      (guard__h10656 == 2'b0) ?
		requestR[223] :
		(guard__h10656 == 2'b01 || guard__h10656 == 2'b10 ||
		 guard__h10656 == 2'b11) &&
		requestR[223];
      default: CASE_requestR_BITS_258_TO_256_0x2_requestR_BIT_ETC__q8 =
		   requestR[258:256] == 3'h1 && requestR[223];
    endcase
  end
  always@(guard__h10126 or _theResult___exp__h10542)
  begin
    case (guard__h10126)
      2'b0: CASE_guard0126_0b0_0_0b1_theResult___exp0542_0_ETC__q9 = 8'd0;
      2'b01, 2'b10, 2'b11:
	  CASE_guard0126_0b0_0_0b1_theResult___exp0542_0_ETC__q9 =
	      _theResult___exp__h10542;
    endcase
  end
  always@(requestR or
	  IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d455 or
	  guard__h10126 or
	  _theResult___exp__h10542 or
	  CASE_guard0126_0b0_0_0b1_theResult___exp0542_0_ETC__q9)
  begin
    case (requestR[258:256])
      3'h2:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d458 =
	      IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d455;
      3'h3:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d458 =
	      (guard__h10126 == 2'b0 || requestR[223]) ?
		8'd0 :
		_theResult___exp__h10542;
      3'h4:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d458 =
	      CASE_guard0126_0b0_0_0b1_theResult___exp0542_0_ETC__q9;
      default: IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d458 =
		   8'd0;
    endcase
  end
  always@(guard__h10126 or out_exp__h10545 or _theResult___exp__h10542)
  begin
    case (guard__h10126)
      2'b0, 2'b01:
	  CASE_guard0126_0b0_0_0b1_0_0b10_out_exp0545_0b_ETC__q10 = 8'd0;
      2'b10:
	  CASE_guard0126_0b0_0_0b1_0_0b10_out_exp0545_0b_ETC__q10 =
	      out_exp__h10545;
      2'b11:
	  CASE_guard0126_0b0_0_0b1_0_0b10_out_exp0545_0b_ETC__q10 =
	      _theResult___exp__h10542;
    endcase
  end
  always@(guard__h10656 or x__h10671 or _theResult___exp__h11095)
  begin
    case (guard__h10656)
      2'b0:
	  CASE_guard0656_0b0_x0671_BITS_7_TO_0_0b1_theRe_ETC__q11 =
	      x__h10671[7:0];
      2'b01, 2'b10, 2'b11:
	  CASE_guard0656_0b0_x0671_BITS_7_TO_0_0b1_theRe_ETC__q11 =
	      _theResult___exp__h11095;
    endcase
  end
  always@(requestR or
	  x__h10671 or
	  IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d483 or
	  IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d481 or
	  CASE_guard0656_0b0_x0671_BITS_7_TO_0_0b1_theRe_ETC__q11)
  begin
    case (requestR[258:256])
      3'h1:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d487 =
	      x__h10671[7:0];
      3'h2:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d487 =
	      IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d483;
      3'h3:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d487 =
	      IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d481;
      3'h4:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d487 =
	      CASE_guard0656_0b0_x0671_BITS_7_TO_0_0b1_theRe_ETC__q11;
      default: IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d487 =
		   8'd0;
    endcase
  end
  always@(guard__h10656 or
	  x__h10671 or out_exp__h11098 or _theResult___exp__h11095)
  begin
    case (guard__h10656)
      2'b0, 2'b01:
	  CASE_guard0656_0b0_x0671_BITS_7_TO_0_0b1_x0671_ETC__q12 =
	      x__h10671[7:0];
      2'b10:
	  CASE_guard0656_0b0_x0671_BITS_7_TO_0_0b1_x0671_ETC__q12 =
	      out_exp__h11098;
      2'b11:
	  CASE_guard0656_0b0_x0671_BITS_7_TO_0_0b1_x0671_ETC__q12 =
	      _theResult___exp__h11095;
    endcase
  end
  always@(guard__h10126 or sfd___3__h10116 or _theResult___sfd__h10543)
  begin
    case (guard__h10126)
      2'b0:
	  CASE_guard0126_0b0_sfd___30116_BITS_31_TO_9_0b_ETC__q13 =
	      sfd___3__h10116[31:9];
      2'b01, 2'b10, 2'b11:
	  CASE_guard0126_0b0_sfd___30116_BITS_31_TO_9_0b_ETC__q13 =
	      _theResult___sfd__h10543;
    endcase
  end
  always@(requestR or
	  sfd___3__h10116 or
	  IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d506 or
	  IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d504 or
	  CASE_guard0126_0b0_sfd___30116_BITS_31_TO_9_0b_ETC__q13)
  begin
    case (requestR[258:256])
      3'h1:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d510 =
	      sfd___3__h10116[31:9];
      3'h2:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d510 =
	      IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d506;
      3'h3:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d510 =
	      IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d504;
      3'h4:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d510 =
	      CASE_guard0126_0b0_sfd___30116_BITS_31_TO_9_0b_ETC__q13;
      default: IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d510 =
		   23'd0;
    endcase
  end
  always@(guard__h10126 or
	  sfd___3__h10116 or out_sfd__h10546 or _theResult___sfd__h10543)
  begin
    case (guard__h10126)
      2'b0, 2'b01:
	  CASE_guard0126_0b0_sfd___30116_BITS_31_TO_9_0b_ETC__q14 =
	      sfd___3__h10116[31:9];
      2'b10:
	  CASE_guard0126_0b0_sfd___30116_BITS_31_TO_9_0b_ETC__q14 =
	      out_sfd__h10546;
      2'b11:
	  CASE_guard0126_0b0_sfd___30116_BITS_31_TO_9_0b_ETC__q14 =
	      _theResult___sfd__h10543;
    endcase
  end
  always@(guard__h10656 or sfd___3__h10116 or _theResult___sfd__h11096)
  begin
    case (guard__h10656)
      2'b0:
	  CASE_guard0656_0b0_sfd___30116_BITS_30_TO_8_0b_ETC__q15 =
	      sfd___3__h10116[30:8];
      2'b01, 2'b10, 2'b11:
	  CASE_guard0656_0b0_sfd___30116_BITS_30_TO_8_0b_ETC__q15 =
	      _theResult___sfd__h11096;
    endcase
  end
  always@(requestR or
	  sfd___3__h10116 or
	  IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d524 or
	  IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d522 or
	  CASE_guard0656_0b0_sfd___30116_BITS_30_TO_8_0b_ETC__q15)
  begin
    case (requestR[258:256])
      3'h1:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d528 =
	      sfd___3__h10116[30:8];
      3'h2:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d528 =
	      IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d524;
      3'h3:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d528 =
	      IF_IF_IF_requestR_3_BIT_223_21_THEN_NEG_reques_ETC___d522;
      3'h4:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d528 =
	      CASE_guard0656_0b0_sfd___30116_BITS_30_TO_8_0b_ETC__q15;
      default: IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d528 =
		   23'd0;
    endcase
  end
  always@(guard__h10656 or
	  sfd___3__h10116 or out_sfd__h11099 or _theResult___sfd__h11096)
  begin
    case (guard__h10656)
      2'b0, 2'b01:
	  CASE_guard0656_0b0_sfd___30116_BITS_30_TO_8_0b_ETC__q16 =
	      sfd___3__h10116[30:8];
      2'b10:
	  CASE_guard0656_0b0_sfd___30116_BITS_30_TO_8_0b_ETC__q16 =
	      out_sfd__h11099;
      2'b11:
	  CASE_guard0656_0b0_sfd___30116_BITS_30_TO_8_0b_ETC__q16 =
	      _theResult___sfd__h11096;
    endcase
  end
  always@(guard__h16338 or out_exp__h16754 or _theResult___exp__h16751)
  begin
    case (guard__h16338)
      2'b0, 2'b01:
	  CASE_guard6338_0b0_0_0b1_0_0b10_out_exp6754_0b_ETC__q19 = 8'd0;
      2'b10:
	  CASE_guard6338_0b0_0_0b1_0_0b10_out_exp6754_0b_ETC__q19 =
	      out_exp__h16754;
      2'b11:
	  CASE_guard6338_0b0_0_0b1_0_0b10_out_exp6754_0b_ETC__q19 =
	      _theResult___exp__h16751;
    endcase
  end
  always@(guard__h16338 or _theResult___exp__h16751)
  begin
    case (guard__h16338)
      2'b0: CASE_guard6338_0b0_0_0b1_theResult___exp6751_0_ETC__q20 = 8'd0;
      2'b01, 2'b10, 2'b11:
	  CASE_guard6338_0b0_0_0b1_theResult___exp6751_0_ETC__q20 =
	      _theResult___exp__h16751;
    endcase
  end
  always@(requestR or
	  guard__h16338 or
	  _theResult___exp__h16751 or
	  CASE_guard6338_0b0_0_0b1_theResult___exp6751_0_ETC__q20)
  begin
    case (requestR[258:256])
      3'h3:
	  CASE_requestR_BITS_258_TO_256_0x3_IF_guard6338_ETC__q21 =
	      (guard__h16338 == 2'b0) ? 8'd0 : _theResult___exp__h16751;
      3'h4:
	  CASE_requestR_BITS_258_TO_256_0x3_IF_guard6338_ETC__q21 =
	      CASE_guard6338_0b0_0_0b1_theResult___exp6751_0_ETC__q20;
      default: CASE_requestR_BITS_258_TO_256_0x3_IF_guard6338_ETC__q21 = 8'd0;
    endcase
  end
  always@(guard__h16864 or x__h16879 or _theResult___exp__h17303)
  begin
    case (guard__h16864)
      2'b0:
	  CASE_guard6864_0b0_x6879_BITS_7_TO_0_0b1_theRe_ETC__q22 =
	      x__h16879[7:0];
      2'b01, 2'b10, 2'b11:
	  CASE_guard6864_0b0_x6879_BITS_7_TO_0_0b1_theRe_ETC__q22 =
	      _theResult___exp__h17303;
    endcase
  end
  always@(requestR or
	  x__h16879 or
	  guard__h16864 or
	  _theResult___exp__h17303 or
	  CASE_guard6864_0b0_x6879_BITS_7_TO_0_0b1_theRe_ETC__q22)
  begin
    case (requestR[258:256])
      3'h1, 3'h2:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d806 =
	      x__h16879[7:0];
      3'h3:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d806 =
	      (guard__h16864 == 2'b0) ?
		x__h16879[7:0] :
		_theResult___exp__h17303;
      3'h4:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d806 =
	      CASE_guard6864_0b0_x6879_BITS_7_TO_0_0b1_theRe_ETC__q22;
      default: IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d806 =
		   8'd0;
    endcase
  end
  always@(guard__h16864 or
	  x__h16879 or out_exp__h17306 or _theResult___exp__h17303)
  begin
    case (guard__h16864)
      2'b0, 2'b01:
	  CASE_guard6864_0b0_x6879_BITS_7_TO_0_0b1_x6879_ETC__q23 =
	      x__h16879[7:0];
      2'b10:
	  CASE_guard6864_0b0_x6879_BITS_7_TO_0_0b1_x6879_ETC__q23 =
	      out_exp__h17306;
      2'b11:
	  CASE_guard6864_0b0_x6879_BITS_7_TO_0_0b1_x6879_ETC__q23 =
	      _theResult___exp__h17303;
    endcase
  end
  always@(guard__h16864 or sfd___3__h16328 or _theResult___sfd__h17304)
  begin
    case (guard__h16864)
      2'b0:
	  CASE_guard6864_0b0_sfd___36328_BITS_30_TO_8_0b_ETC__q24 =
	      sfd___3__h16328[30:8];
      2'b01, 2'b10, 2'b11:
	  CASE_guard6864_0b0_sfd___36328_BITS_30_TO_8_0b_ETC__q24 =
	      _theResult___sfd__h17304;
    endcase
  end
  always@(requestR or
	  sfd___3__h16328 or
	  guard__h16864 or
	  _theResult___sfd__h17304 or
	  CASE_guard6864_0b0_sfd___36328_BITS_30_TO_8_0b_ETC__q24)
  begin
    case (requestR[258:256])
      3'h1, 3'h2:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d844 =
	      sfd___3__h16328[30:8];
      3'h3:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d844 =
	      (guard__h16864 == 2'b0) ?
		sfd___3__h16328[30:8] :
		_theResult___sfd__h17304;
      3'h4:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d844 =
	      CASE_guard6864_0b0_sfd___36328_BITS_30_TO_8_0b_ETC__q24;
      default: IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d844 =
		   23'd0;
    endcase
  end
  always@(guard__h16864 or
	  sfd___3__h16328 or out_sfd__h17307 or _theResult___sfd__h17304)
  begin
    case (guard__h16864)
      2'b0, 2'b01:
	  CASE_guard6864_0b0_sfd___36328_BITS_30_TO_8_0b_ETC__q25 =
	      sfd___3__h16328[30:8];
      2'b10:
	  CASE_guard6864_0b0_sfd___36328_BITS_30_TO_8_0b_ETC__q25 =
	      out_sfd__h17307;
      2'b11:
	  CASE_guard6864_0b0_sfd___36328_BITS_30_TO_8_0b_ETC__q25 =
	      _theResult___sfd__h17304;
    endcase
  end
  always@(guard__h16338 or sfd___3__h16328 or _theResult___sfd__h16752)
  begin
    case (guard__h16338)
      2'b0:
	  CASE_guard6338_0b0_sfd___36328_BITS_31_TO_9_0b_ETC__q26 =
	      sfd___3__h16328[31:9];
      2'b01, 2'b10, 2'b11:
	  CASE_guard6338_0b0_sfd___36328_BITS_31_TO_9_0b_ETC__q26 =
	      _theResult___sfd__h16752;
    endcase
  end
  always@(requestR or
	  sfd___3__h16328 or
	  guard__h16338 or
	  _theResult___sfd__h16752 or
	  CASE_guard6338_0b0_sfd___36328_BITS_31_TO_9_0b_ETC__q26)
  begin
    case (requestR[258:256])
      3'h1, 3'h2:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d829 =
	      sfd___3__h16328[31:9];
      3'h3:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d829 =
	      (guard__h16338 == 2'b0) ?
		sfd___3__h16328[31:9] :
		_theResult___sfd__h16752;
      3'h4:
	  IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d829 =
	      CASE_guard6338_0b0_sfd___36328_BITS_31_TO_9_0b_ETC__q26;
      default: IF_requestR_3_BITS_258_TO_256_2_EQ_0x4_7_THEN__ETC___d829 =
		   23'd0;
    endcase
  end
  always@(guard__h16338 or
	  sfd___3__h16328 or out_sfd__h16755 or _theResult___sfd__h16752)
  begin
    case (guard__h16338)
      2'b0, 2'b01:
	  CASE_guard6338_0b0_sfd___36328_BITS_31_TO_9_0b_ETC__q27 =
	      sfd___3__h16328[31:9];
      2'b10:
	  CASE_guard6338_0b0_sfd___36328_BITS_31_TO_9_0b_ETC__q27 =
	      out_sfd__h16755;
      2'b11:
	  CASE_guard6338_0b0_sfd___36328_BITS_31_TO_9_0b_ETC__q27 =
	      _theResult___sfd__h16752;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        stateR <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (stateR$EN) stateR <= `BSV_ASSIGNMENT_DELAY stateR$D_IN;
      end
    if (requestR$EN) requestR <= `BSV_ASSIGNMENT_DELAY requestR$D_IN;
    if (resultR$EN) resultR <= `BSV_ASSIGNMENT_DELAY resultR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    requestR =
	279'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    resultR = 70'h2AAAAAAAAAAAAAAAAA;
    stateR = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFADD_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h1136 = $stime;
	  #0;
	end
    v__h1130 = v__h1136 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFADD_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFADD: ", v__h1130);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSUB_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h1567 = $stime;
	  #0;
	end
    v__h1561 = v__h1567 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSUB_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFSUB: ", v__h1561);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMUL_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h1756 = $stime;
	  #0;
	end
    v__h1750 = v__h1756 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMUL_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMUL: ", v__h1750);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMADD_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h1957 = $stime;
	  #0;
	end
    v__h1951 = v__h1957 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMADD_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMADD_S ", v__h1951);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMSUB_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2211 = $stime;
	  #0;
	end
    v__h2205 = v__h2211 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMSUB_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMSUB_S ", v__h2205);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFNMADD_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2396 = $stime;
	  #0;
	end
    v__h2390 = v__h2396 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFNMADD_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFNMADD_S ", v__h2390);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFNMSUB_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2581 = $stime;
	  #0;
	end
    v__h2575 = v__h2581 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFNMSUB_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFNMSUB_S ", v__h2575);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFDIV_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2773 = $stime;
	  #0;
	end
    v__h2767 = v__h2773 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFDIV_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFDIV_S ", v__h2767);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_P_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3087 = $stime;
	  #0;
	end
    v__h3081 = v__h3087 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_P_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_P_S (0x%08x)", v__h3081, requestR[223:192]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_P && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3271 = $stime;
	  #0;
	end
    v__h3265 = v__h3271 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_P && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_S_P (0x%08x)", v__h3265, requestR[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_R_P && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3354 = $stime;
	  #0;
	end
    v__h3348 = v__h3354 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_R_P && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_R_P ", v__h3348);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_P_R && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3532 = $stime;
	  #0;
	end
    v__h3526 = v__h3532 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_P_R && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_P_R ", v__h3526);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMA_P && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3812 = $stime;
	  #0;
	end
    v__h3806 = v__h3812 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMA_P && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMA_P (0x%08x, 0x%08x)",
		 v__h3806,
		 requestR[63:32],
		 requestR[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMS_P && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3959 = $stime;
	  #0;
	end
    v__h3953 = v__h3959 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMS_P && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMS_P (0x%08x, 0x%08x)",
		 v__h3953,
		 requestR[63:32],
		 requestR[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFDA_P && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4106 = $stime;
	  #0;
	end
    v__h4100 = v__h4106 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFDA_P && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFDA_P (0x%08x, 0x%08x)",
		 v__h4100,
		 requestR[63:32],
		 requestR[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFDS_P && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4253 = $stime;
	  #0;
	end
    v__h4247 = v__h4253 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFDS_P && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFDS_P (0x%08x, 0x%08x)",
		 v__h4247,
		 requestR[63:32],
		 requestR[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doPMV_W_X && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4393 = $stime;
	  #0;
	end
    v__h4387 = v__h4393 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doPMV_W_X && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doPMV_W_X (0x%016x)", v__h4387, requestR[255:192]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doPMV_X_W && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4517 = $stime;
	  #0;
	end
    v__h4511 = v__h4517 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doPMV_X_W && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doPMV_X_W (0x%08x) ", v__h4511, requestR[63:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJ_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4599 = $stime;
	  #0;
	end
    v__h4593 = v__h4599 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJ_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFSGNJ_S ", v__h4593);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJN_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4765 = $stime;
	  #0;
	end
    v__h4759 = v__h4765 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJN_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFSGNJN_S ", v__h4759);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJX_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4933 = $stime;
	  #0;
	end
    v__h4927 = v__h4933 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJX_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFSGNJX_S ", v__h4927);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_W && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h5109 = $stime;
	  #0;
	end
    v__h5103 = v__h5109 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_W && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_S_W ", v__h5103);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_WU && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h11605 = $stime;
	  #0;
	end
    v__h11599 = v__h11605 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_WU && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_S_WU ", v__h11599);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_W_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h17783 = $stime;
	  #0;
	end
    v__h17777 = v__h17783 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_W_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_W_S ", v__h17777);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_WU_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h19409 = $stime;
	  #0;
	end
    v__h19403 = v__h19409 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_WU_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_WU_S ", v__h19403);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMIN_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h20191 = $stime;
	  #0;
	end
    v__h20185 = v__h20191 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMIN_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMIN_S ", v__h20185);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMAX_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h22850 = $stime;
	  #0;
	end
    v__h22844 = v__h22850 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMAX_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMAX_S ", v__h22844);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMV_W_X && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h25406 = $stime;
	  #0;
	end
    v__h25400 = v__h25406 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMV_W_X && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMV_W_X ", v__h25400);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMV_X_W && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h25561 = $stime;
	  #0;
	end
    v__h25555 = v__h25561 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMV_X_W && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMV_X_W ", v__h25555);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFEQ_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h25731 = $stime;
	  #0;
	end
    v__h25725 = v__h25731 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFEQ_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFEQ_S ", v__h25725);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFLT_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h27243 = $stime;
	  #0;
	end
    v__h27237 = v__h27243 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFLT_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFLT_S ", v__h27237);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFLE_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h28343 = $stime;
	  #0;
	end
    v__h28337 = v__h28343 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFLE_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFLE_S ", v__h28337);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCLASS_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h29463 = $stime;
	  #0;
	end
    v__h29457 = v__h29463 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCLASS_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCLASS_S ", v__h29457);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h30249 = $stime;
	  #0;
	end
    v__h30243 = v__h30249 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write("%0d: %m.rl_get_fpu_result: ", v__h30243);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write("<");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[70:69] == 2'd0)
	if (fpu$server_core_response_get[68])
	  $write("tagged D ",
		 "<Float %s%x.%x>",
		 "-",
		 fpu$server_core_response_get[67:57],
		 fpu$server_core_response_get[56:5]);
	else
	  $write("tagged D ",
		 "<Float %s%x.%x>",
		 "+",
		 fpu$server_core_response_get[67:57],
		 fpu$server_core_response_get[56:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[70:69] == 2'd1)
	if (fpu$server_core_response_get[36])
	  $write("tagged S ",
		 "<Float %s%x.%x>",
		 "-",
		 fpu$server_core_response_get[35:28],
		 fpu$server_core_response_get[27:5]);
	else
	  $write("tagged S ",
		 "<Float %s%x.%x>",
		 "+",
		 fpu$server_core_response_get[35:28],
		 fpu$server_core_response_get[27:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[70:69] != 2'd0 &&
	  fpu$server_core_response_get[70:69] != 2'd1)
	$write("tagged P ", "'h%h", fpu$server_core_response_get[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write("<Exception: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[4])
	$write("Invalid_Op ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[4])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[3])
	$write("Divide_0 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[3])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[2])
	$write("Overflow ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[2])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[1])
	$write("Underflow ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[1])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[0])
	$write("Inexact ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[0])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write(">");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write(">");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h30693 = $stime;
	  #0;
	end
    v__h30687 = v__h30693 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write("%0d: %m.rl_get_posit_result: ", v__h30687);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write("<");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[70:69] == 2'd0)
	if (positCore$server_core_response_get[68])
	  $write("tagged D ",
		 "<Float %s%x.%x>",
		 "-",
		 positCore$server_core_response_get[67:57],
		 positCore$server_core_response_get[56:5]);
	else
	  $write("tagged D ",
		 "<Float %s%x.%x>",
		 "+",
		 positCore$server_core_response_get[67:57],
		 positCore$server_core_response_get[56:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[70:69] == 2'd1)
	if (positCore$server_core_response_get[36])
	  $write("tagged S ",
		 "<Float %s%x.%x>",
		 "-",
		 positCore$server_core_response_get[35:28],
		 positCore$server_core_response_get[27:5]);
	else
	  $write("tagged S ",
		 "<Float %s%x.%x>",
		 "+",
		 positCore$server_core_response_get[35:28],
		 positCore$server_core_response_get[27:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[70:69] != 2'd0 &&
	  positCore$server_core_response_get[70:69] != 2'd1)
	$write("tagged P ", "'h%h", positCore$server_core_response_get[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write("<Exception: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[4])
	$write("Invalid_Op ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  !positCore$server_core_response_get[4])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[3])
	$write("Divide_0 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  !positCore$server_core_response_get[3])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[2])
	$write("Overflow ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  !positCore$server_core_response_get[2])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[1])
	$write("Underflow ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  !positCore$server_core_response_get[1])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[0])
	$write("Inexact ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  !positCore$server_core_response_get[0])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write(">");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write(">");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkFBox_Core

