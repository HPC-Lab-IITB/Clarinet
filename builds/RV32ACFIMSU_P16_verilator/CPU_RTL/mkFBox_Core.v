//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// valid                          O     1
// word_fst                       O    64
// word_snd                       O     5
// verbosity                      I     4
// CLK                            I     1 clock
// RST_N                          I     1 reset
// req_opcode                     I     7
// req_f7                         I     7
// req_rm                         I     3
// req_rs2                        I     5
// req_v1                         I    64
// req_v2                         I    64
// req_v3                         I    64
// req_pv1                        I    16
// req_pv2                        I    16
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFBox_Core(verbosity,
		   CLK,
		   RST_N,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_opcode,
		   req_f7,
		   req_rm,
		   req_rs2,
		   req_v1,
		   req_v2,
		   req_v3,
		   req_pv1,
		   req_pv2,
		   EN_req,

		   valid,

		   word_fst,

		   word_snd);
  input  [3 : 0] verbosity;
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [6 : 0] req_opcode;
  input  [6 : 0] req_f7;
  input  [2 : 0] req_rm;
  input  [4 : 0] req_rs2;
  input  [63 : 0] req_v1;
  input  [63 : 0] req_v2;
  input  [63 : 0] req_v3;
  input  [15 : 0] req_pv1;
  input  [15 : 0] req_pv2;
  input  EN_req;

  // value method valid
  output valid;

  // value method word_fst
  output [63 : 0] word_fst;

  // value method word_snd
  output [4 : 0] word_snd;

  // signals for module outputs
  wire [63 : 0] word_fst;
  wire [4 : 0] word_snd;
  wire RDY_server_reset_request_put, RDY_server_reset_response_get, valid;

  // inlined wires
  reg [68 : 0] dw_result$wget;
  wire dw_valid$wget, dw_valid$whas;

  // register requestR
  reg [246 : 0] requestR;
  wire [246 : 0] requestR$D_IN;
  wire requestR$EN;

  // register resultR
  reg [69 : 0] resultR;
  reg [69 : 0] resultR$D_IN;
  wire resultR$EN;

  // register stateR
  reg [2 : 0] stateR;
  reg [2 : 0] stateR$D_IN;
  wire stateR$EN;

  // ports of submodule fpu
  reg [204 : 0] fpu$server_core_request_put;
  wire [70 : 0] fpu$server_core_response_get;
  wire fpu$EN_server_core_request_put,
       fpu$EN_server_core_response_get,
       fpu$EN_server_reset_request_put,
       fpu$EN_server_reset_response_get,
       fpu$RDY_server_core_request_put,
       fpu$RDY_server_core_response_get,
       fpu$RDY_server_reset_request_put,
       fpu$RDY_server_reset_response_get;

  // ports of submodule frmFpuF
  wire frmFpuF$CLR, frmFpuF$DEQ, frmFpuF$D_IN, frmFpuF$ENQ;

  // ports of submodule positCore
  reg [137 : 0] positCore$server_core_request_put;
  wire [70 : 0] positCore$server_core_response_get;
  wire positCore$EN_server_core_request_put,
       positCore$EN_server_core_response_get,
       positCore$RDY_server_core_request_put,
       positCore$RDY_server_core_response_get;

  // ports of submodule resetReqsF
  wire resetReqsF$CLR,
       resetReqsF$DEQ,
       resetReqsF$EMPTY_N,
       resetReqsF$ENQ,
       resetReqsF$FULL_N;

  // ports of submodule resetRspsF
  wire resetRspsF$CLR,
       resetRspsF$DEQ,
       resetRspsF$EMPTY_N,
       resetRspsF$ENQ,
       resetRspsF$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_doFADD_S,
       CAN_FIRE_RL_doFCLASS_S,
       CAN_FIRE_RL_doFCVT_P_R,
       CAN_FIRE_RL_doFCVT_P_S,
       CAN_FIRE_RL_doFCVT_R_P,
       CAN_FIRE_RL_doFCVT_S_P,
       CAN_FIRE_RL_doFCVT_S_W,
       CAN_FIRE_RL_doFCVT_S_WU,
       CAN_FIRE_RL_doFCVT_WU_S,
       CAN_FIRE_RL_doFCVT_W_S,
       CAN_FIRE_RL_doFDA_P,
       CAN_FIRE_RL_doFDS_P,
       CAN_FIRE_RL_doFEQ_S,
       CAN_FIRE_RL_doFLE_S,
       CAN_FIRE_RL_doFLT_S,
       CAN_FIRE_RL_doFMADD_S,
       CAN_FIRE_RL_doFMAX_S,
       CAN_FIRE_RL_doFMA_P,
       CAN_FIRE_RL_doFMIN_S,
       CAN_FIRE_RL_doFMSUB_S,
       CAN_FIRE_RL_doFMS_P,
       CAN_FIRE_RL_doFMUL_S,
       CAN_FIRE_RL_doFMV_W_X,
       CAN_FIRE_RL_doFMV_X_W,
       CAN_FIRE_RL_doFNMADD_S,
       CAN_FIRE_RL_doFNMSUB_S,
       CAN_FIRE_RL_doFSGNJN_S,
       CAN_FIRE_RL_doFSGNJX_S,
       CAN_FIRE_RL_doFSGNJ_S,
       CAN_FIRE_RL_doFSUB_S,
       CAN_FIRE_RL_doPMV_W_X,
       CAN_FIRE_RL_doPMV_X_W,
       CAN_FIRE_RL_rl_drive_fpu_result,
       CAN_FIRE_RL_rl_get_fpu_result,
       CAN_FIRE_RL_rl_get_posit_result,
       CAN_FIRE_RL_rl_reset_begin,
       CAN_FIRE_RL_rl_reset_end,
       CAN_FIRE_req,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       WILL_FIRE_RL_doFADD_S,
       WILL_FIRE_RL_doFCLASS_S,
       WILL_FIRE_RL_doFCVT_P_R,
       WILL_FIRE_RL_doFCVT_P_S,
       WILL_FIRE_RL_doFCVT_R_P,
       WILL_FIRE_RL_doFCVT_S_P,
       WILL_FIRE_RL_doFCVT_S_W,
       WILL_FIRE_RL_doFCVT_S_WU,
       WILL_FIRE_RL_doFCVT_WU_S,
       WILL_FIRE_RL_doFCVT_W_S,
       WILL_FIRE_RL_doFDA_P,
       WILL_FIRE_RL_doFDS_P,
       WILL_FIRE_RL_doFEQ_S,
       WILL_FIRE_RL_doFLE_S,
       WILL_FIRE_RL_doFLT_S,
       WILL_FIRE_RL_doFMADD_S,
       WILL_FIRE_RL_doFMAX_S,
       WILL_FIRE_RL_doFMA_P,
       WILL_FIRE_RL_doFMIN_S,
       WILL_FIRE_RL_doFMSUB_S,
       WILL_FIRE_RL_doFMS_P,
       WILL_FIRE_RL_doFMUL_S,
       WILL_FIRE_RL_doFMV_W_X,
       WILL_FIRE_RL_doFMV_X_W,
       WILL_FIRE_RL_doFNMADD_S,
       WILL_FIRE_RL_doFNMSUB_S,
       WILL_FIRE_RL_doFSGNJN_S,
       WILL_FIRE_RL_doFSGNJX_S,
       WILL_FIRE_RL_doFSGNJ_S,
       WILL_FIRE_RL_doFSUB_S,
       WILL_FIRE_RL_doPMV_W_X,
       WILL_FIRE_RL_doPMV_X_W,
       WILL_FIRE_RL_rl_drive_fpu_result,
       WILL_FIRE_RL_rl_get_fpu_result,
       WILL_FIRE_RL_rl_get_posit_result,
       WILL_FIRE_RL_rl_reset_begin,
       WILL_FIRE_RL_rl_reset_end,
       WILL_FIRE_req,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get;

  // inputs to muxes for submodule ports
  wire [246 : 0] MUX_requestR$write_1__VAL_2;
  wire [204 : 0] MUX_fpu$server_core_request_put_1__VAL_1,
		 MUX_fpu$server_core_request_put_1__VAL_2,
		 MUX_fpu$server_core_request_put_1__VAL_3,
		 MUX_fpu$server_core_request_put_1__VAL_4,
		 MUX_fpu$server_core_request_put_1__VAL_5,
		 MUX_fpu$server_core_request_put_1__VAL_6,
		 MUX_fpu$server_core_request_put_1__VAL_7;
  wire [137 : 0] MUX_positCore$server_core_request_put_1__VAL_1,
		 MUX_positCore$server_core_request_put_1__VAL_2,
		 MUX_positCore$server_core_request_put_1__VAL_3,
		 MUX_positCore$server_core_request_put_1__VAL_4,
		 MUX_positCore$server_core_request_put_1__VAL_5,
		 MUX_positCore$server_core_request_put_1__VAL_6,
		 MUX_positCore$server_core_request_put_1__VAL_7,
		 MUX_positCore$server_core_request_put_1__VAL_8;
  wire [69 : 0] MUX_resultR$write_1__VAL_10,
		MUX_resultR$write_1__VAL_11,
		MUX_resultR$write_1__VAL_12,
		MUX_resultR$write_1__VAL_13,
		MUX_resultR$write_1__VAL_14,
		MUX_resultR$write_1__VAL_15,
		MUX_resultR$write_1__VAL_16,
		MUX_resultR$write_1__VAL_17,
		MUX_resultR$write_1__VAL_18,
		MUX_resultR$write_1__VAL_19,
		MUX_resultR$write_1__VAL_20,
		MUX_resultR$write_1__VAL_3,
		MUX_resultR$write_1__VAL_4,
		MUX_resultR$write_1__VAL_5,
		MUX_resultR$write_1__VAL_6,
		MUX_resultR$write_1__VAL_7,
		MUX_resultR$write_1__VAL_8,
		MUX_resultR$write_1__VAL_9;
  wire [68 : 0] MUX_dw_result$wset_1__VAL_1, MUX_dw_result$wset_1__VAL_2;
  wire MUX_dw_result$wset_1__SEL_1, MUX_dw_result$wset_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1135;
  reg [31 : 0] v__h1566;
  reg [31 : 0] v__h1755;
  reg [31 : 0] v__h1956;
  reg [31 : 0] v__h2210;
  reg [31 : 0] v__h2395;
  reg [31 : 0] v__h2580;
  reg [31 : 0] v__h2897;
  reg [31 : 0] v__h3081;
  reg [31 : 0] v__h3164;
  reg [31 : 0] v__h3342;
  reg [31 : 0] v__h3622;
  reg [31 : 0] v__h3769;
  reg [31 : 0] v__h3916;
  reg [31 : 0] v__h4063;
  reg [31 : 0] v__h4203;
  reg [31 : 0] v__h4327;
  reg [31 : 0] v__h4409;
  reg [31 : 0] v__h4575;
  reg [31 : 0] v__h4743;
  reg [31 : 0] v__h4919;
  reg [31 : 0] v__h11415;
  reg [31 : 0] v__h17593;
  reg [31 : 0] v__h19219;
  reg [31 : 0] v__h20001;
  reg [31 : 0] v__h22660;
  reg [31 : 0] v__h25216;
  reg [31 : 0] v__h25371;
  reg [31 : 0] v__h25541;
  reg [31 : 0] v__h27053;
  reg [31 : 0] v__h28153;
  reg [31 : 0] v__h29273;
  reg [31 : 0] v__h30059;
  reg [31 : 0] v__h30503;
  reg [31 : 0] v__h1129;
  reg [31 : 0] v__h1560;
  reg [31 : 0] v__h1749;
  reg [31 : 0] v__h1950;
  reg [31 : 0] v__h2204;
  reg [31 : 0] v__h2389;
  reg [31 : 0] v__h2574;
  reg [31 : 0] v__h2891;
  reg [31 : 0] v__h3075;
  reg [31 : 0] v__h3158;
  reg [31 : 0] v__h3336;
  reg [31 : 0] v__h3616;
  reg [31 : 0] v__h3763;
  reg [31 : 0] v__h3910;
  reg [31 : 0] v__h4057;
  reg [31 : 0] v__h4197;
  reg [31 : 0] v__h4321;
  reg [31 : 0] v__h4403;
  reg [31 : 0] v__h4569;
  reg [31 : 0] v__h4737;
  reg [31 : 0] v__h4913;
  reg [31 : 0] v__h11409;
  reg [31 : 0] v__h17587;
  reg [31 : 0] v__h19213;
  reg [31 : 0] v__h19995;
  reg [31 : 0] v__h22654;
  reg [31 : 0] v__h25210;
  reg [31 : 0] v__h25365;
  reg [31 : 0] v__h25535;
  reg [31 : 0] v__h27047;
  reg [31 : 0] v__h28147;
  reg [31 : 0] v__h29267;
  reg [31 : 0] v__h30053;
  reg [31 : 0] v__h30497;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] x__h29775;
  reg [22 : 0] CASE_guard0466_0b0_sfd___3926_BITS_30_TO_8_0b1_ETC__q15,
	       CASE_guard0466_0b0_sfd___3926_BITS_30_TO_8_0b1_ETC__q16,
	       CASE_guard6148_0b0_sfd___36138_BITS_31_TO_9_0b_ETC__q26,
	       CASE_guard6148_0b0_sfd___36138_BITS_31_TO_9_0b_ETC__q27,
	       CASE_guard6674_0b0_sfd___36138_BITS_30_TO_8_0b_ETC__q24,
	       CASE_guard6674_0b0_sfd___36138_BITS_30_TO_8_0b_ETC__q25,
	       CASE_guard936_0b0_sfd___3926_BITS_31_TO_9_0b1__ETC__q13,
	       CASE_guard936_0b0_sfd___3926_BITS_31_TO_9_0b1__ETC__q14,
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d502,
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d520,
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d821,
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d836;
  reg [7 : 0] CASE_guard0466_0b0_x0481_BITS_7_TO_0_0b1_theRe_ETC__q11,
	      CASE_guard0466_0b0_x0481_BITS_7_TO_0_0b1_x0481_ETC__q12,
	      CASE_guard6148_0b0_0_0b1_0_0b10_out_exp6564_0b_ETC__q19,
	      CASE_guard6148_0b0_0_0b1_theResult___exp6561_0_ETC__q20,
	      CASE_guard6674_0b0_x6689_BITS_7_TO_0_0b1_theRe_ETC__q22,
	      CASE_guard6674_0b0_x6689_BITS_7_TO_0_0b1_x6689_ETC__q23,
	      CASE_guard936_0b0_0_0b1_0_0b10_out_exp0355_0b1_ETC__q10,
	      CASE_guard936_0b0_0_0b1_theResult___exp0352_0b_ETC__q9,
	      CASE_requestR_BITS_226_TO_224_0x3_IF_guard6148_ETC__q21,
	      IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d450,
	      IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d479,
	      IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d798;
  reg [2 : 0] IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42;
  reg CASE_guard0466_0b0_requestR_BIT_191_0b1_reques_ETC__q7,
      CASE_guard936_0b0_requestR_BIT_191_0b1_request_ETC__q5,
      CASE_requestR_BITS_226_TO_224_0x2_requestR_BIT_ETC__q6,
      CASE_requestR_BITS_226_TO_224_0x2_requestR_BIT_ETC__q8;
  wire [63 : 0] IF_requestR_3_BITS_126_TO_119_077_EQ_255_078_A_ETC___d1131,
		IF_requestR_3_BITS_126_TO_119_077_EQ_255_078_A_ETC___d1148,
		IF_requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_r_ETC___d1221,
		res___1__h29372,
		res___1__h29607,
		res___1__h29617,
		res___1__h29636,
		res__h20762,
		res__h26488,
		res__h28000,
		res__h29100,
		res__h29652,
		res__h29856,
		res__h30298,
		res__h30353,
		x__h11497,
		x__h17674,
		x__h19302,
		x__h20086,
		x__h22745,
		x__h25450,
		x__h25622,
		x__h27134,
		x__h28234,
		x__h29352,
		x__h30266,
		x__h4142,
		x__h4276,
		x__h4489,
		x__h4655,
		x__h4823,
		x__h5001;
  wire [56 : 0] IF_requestR_3_BIT_191_13_THEN_NEG_0b0_CONCAT_N_ETC___d925,
		b__h17920,
		x__h18596,
		x__h19726;
  wire [32 : 0] _theResult_____2__h17855, out1___1__h18347;
  wire [31 : 0] IF_NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINU_ETC___d1043,
		IF_NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINU_ETC___d980,
		IF_NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINU_ETC___d982,
		IF_requestR_3_BITS_126_TO_119_077_EQ_0_093_AND_ETC___d1126,
		IF_requestR_3_BITS_126_TO_119_077_EQ_0_093_AND_ETC___d1142,
		IF_requestR_3_BITS_126_TO_119_077_EQ_255_078_A_ETC___d1127,
		IF_requestR_3_BITS_126_TO_119_077_EQ_255_078_A_ETC___d1144,
		IF_requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_r_ETC___d1045,
		IF_requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_ETC___d984,
		IF_requestR_3_BIT_191_13_THEN_2147483648_ELSE__ETC___d913,
		requestR_BITS_191_TO_160__q2,
		sfd___3__h16138,
		sfd___3__h9926,
		sfd__h5022,
		x__h17677,
		x__h19305,
		x__h4496,
		x__h4662,
		x__h4830,
		x__h5007;
  wire [24 : 0] sfd__h10496,
		sfd__h16165,
		sfd__h16704,
		sfd__h9953,
		value__h17922;
  wire [22 : 0] IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d496,
		IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d498,
		IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d514,
		IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d516,
		_theResult___fst_sfd__h10450,
		_theResult___fst_sfd__h11003,
		_theResult___fst_sfd__h11006,
		_theResult___fst_sfd__h16658,
		_theResult___fst_sfd__h17210,
		_theResult___fst_sfd__h17213,
		_theResult___sfd__h10353,
		_theResult___sfd__h10906,
		_theResult___sfd__h16562,
		_theResult___sfd__h17114,
		_theResult___snd_fst_sfd__h11009,
		_theResult___snd_fst_sfd__h17216,
		out_sfd__h10356,
		out_sfd__h10909,
		out_sfd__h16565,
		out_sfd__h17117;
  wire [19 : 0] NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d1016,
		NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d918,
		NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d950,
		NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d951;
  wire [15 : 0] requestR_BITS_31_TO_16__q1;
  wire [8 : 0] _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d358,
	       _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d717,
	       x__h10481,
	       x__h16689;
  wire [7 : 0] IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d447,
	       IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d473,
	       IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d475,
	       IF_requestR_3_BITS_191_TO_160_09_EQ_0_25_OR_NO_ETC___d485,
	       _theResult___exp__h10352,
	       _theResult___exp__h10905,
	       _theResult___exp__h16561,
	       _theResult___exp__h17113,
	       _theResult___fst_exp__h10449,
	       _theResult___fst_exp__h11002,
	       _theResult___fst_exp__h11005,
	       _theResult___fst_exp__h16657,
	       _theResult___fst_exp__h17209,
	       _theResult___fst_exp__h17212,
	       _theResult___snd_fst_exp__h11008,
	       _theResult___snd_fst_exp__h11011,
	       _theResult___snd_fst_exp__h11014,
	       _theResult___snd_fst_exp__h17215,
	       _theResult___snd_fst_exp__h17218,
	       _theResult___snd_fst_exp__h17221,
	       din_inc___2_exp__h11048,
	       din_inc___2_exp__h17251,
	       out_exp__h10355,
	       out_exp__h10908,
	       out_exp__h16564,
	       out_exp__h17116,
	       requestR_BITS_190_TO_183_MINUS_127__q28;
  wire [5 : 0] IF_IF_requestR_3_BIT_191_13_THEN_NEG_requestR__ETC___d355,
	       IF_requestR_3_BIT_191_13_THEN_0_ELSE_IF_reques_ETC___d714;
  wire [4 : 0] x__h11174,
	       x__h17355,
	       x__h19010,
	       x__h19804,
	       x__h22118,
	       x__h28019;
  wire [1 : 0] IF_sfd___36138_BIT_7_THEN_2_ELSE_0__q18,
	       IF_sfd___36138_BIT_8_THEN_2_ELSE_0__q17,
	       IF_sfd___3926_BIT_7_THEN_2_ELSE_0__q4,
	       IF_sfd___3926_BIT_8_THEN_2_ELSE_0__q3,
	       IF_x8596_BIT_24_THEN_2_ELSE_0__q29,
	       IF_x9726_BIT_24_THEN_2_ELSE_0__q30,
	       guard__h10466,
	       guard__h16148,
	       guard__h16674,
	       guard__h17853,
	       guard__h18407,
	       guard__h19505,
	       guard__h9936;
  wire IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191__ETC___d425,
       IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191__ETC___d575,
       IF_32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13__ETC___d890,
       IF_NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINU_ETC___d1006,
       IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_OR_NO_ETC___d1037,
       IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_OR_NO_ETC___d942,
       IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_OR_NO_ETC___d974,
       IF_requestR_3_BIT_191_13_THEN_NEG_requestR_3_B_ETC___d566,
       IF_requestR_3_BIT_191_13_THEN_NEG_requestR_3_B_ETC___d569,
       IF_requestR_3_BIT_191_13_THEN_NEG_requestR_3_B_ETC___d578,
       IF_requestR_3_BIT_191_13_THEN_NOT_requestR_3_B_ETC___d1120,
       NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d1018,
       NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d953,
       NOT_IF_requestR_3_BIT_191_13_THEN_NEG_requestR_ETC___d363,
       NOT_requestR_3_BITS_190_TO_183_04_EQ_0_14_20_O_ETC___d1060,
       NOT_requestR_3_BITS_190_TO_183_04_EQ_0_14_20_O_ETC___d995,
       NOT_requestR_3_BITS_190_TO_183_04_EQ_255_05_98_ETC___d1124,
       NOT_requestR_3_BITS_190_TO_183_04_EQ_255_05_98_ETC___d1207,
       NOT_requestR_3_BITS_190_TO_183_04_ULT_requestR_ETC___d1182,
       NOT_requestR_3_BIT_191_13_88_AND_NOT_requestR__ETC___d807,
       NOT_verbosity_ULE_1_4___d25,
       _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d359,
       _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d361,
       _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d364,
       _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d718,
       _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d719,
       _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d720,
       requestR_3_BITS_126_TO_119_077_EQ_0_093_AND_re_ETC___d1100,
       requestR_3_BITS_182_TO_160_06_ULE_requestR_3_B_ETC___d1112,
       requestR_3_BITS_182_TO_160_06_ULT_requestR_3_B_ETC___d1117,
       requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_requ_ETC___d1096,
       requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_requ_ETC___d1186,
       requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_0__ETC___d1055,
       requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_0__ETC___d1066,
       requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1086,
       requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1134,
       requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1171,
       requestR_3_BITS_190_TO_183_04_EQ_requestR_3_BI_ETC___d1111,
       requestR_3_BITS_190_TO_183_04_ULE_requestR_3_B_ETC___d1109,
       requestR_3_BITS_190_TO_183_04_ULE_requestR_3_B_ETC___d1181,
       requestR_3_BITS_190_TO_183_04_ULT_requestR_3_B_ETC___d1116,
       requestR_3_BIT_191_13_OR_requestR_3_BIT_190_89_ETC___d881,
       requestR_3_BIT_191_13_OR_requestR_3_BIT_190_89_ETC___d884,
       requestR_3_BIT_191_13_OR_requestR_3_BIT_190_89_ETC___d893;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = resetReqsF$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = resetReqsF$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = resetRspsF$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = resetRspsF$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas && dw_valid$wget ;

  // value method word_fst
  assign word_fst = dw_result$wget[68:5] ;

  // value method word_snd
  assign word_snd = dw_result$wget[4:0] ;

  // submodule fpu
  mkFPU fpu(.CLK(CLK),
	    .RST_N(RST_N),
	    .server_core_request_put(fpu$server_core_request_put),
	    .EN_server_core_request_put(fpu$EN_server_core_request_put),
	    .EN_server_core_response_get(fpu$EN_server_core_response_get),
	    .EN_server_reset_request_put(fpu$EN_server_reset_request_put),
	    .EN_server_reset_response_get(fpu$EN_server_reset_response_get),
	    .RDY_server_core_request_put(fpu$RDY_server_core_request_put),
	    .server_core_response_get(fpu$server_core_response_get),
	    .RDY_server_core_response_get(fpu$RDY_server_core_response_get),
	    .RDY_server_reset_request_put(fpu$RDY_server_reset_request_put),
	    .RDY_server_reset_response_get(fpu$RDY_server_reset_response_get));

  // submodule frmFpuF
  FIFO2 #(.width(32'd1), .guarded(32'd1)) frmFpuF(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(frmFpuF$D_IN),
						  .ENQ(frmFpuF$ENQ),
						  .DEQ(frmFpuF$DEQ),
						  .CLR(frmFpuF$CLR),
						  .D_OUT(),
						  .FULL_N(),
						  .EMPTY_N());

  // submodule positCore
  mkPositCore positCore(.verbosity(verbosity),
			.CLK(CLK),
			.RST_N(RST_N),
			.server_core_request_put(positCore$server_core_request_put),
			.EN_server_core_request_put(positCore$EN_server_core_request_put),
			.EN_server_core_response_get(positCore$EN_server_core_response_get),
			.RDY_server_core_request_put(positCore$RDY_server_core_request_put),
			.server_core_response_get(positCore$server_core_response_get),
			.RDY_server_core_response_get(positCore$RDY_server_core_response_get));

  // submodule resetReqsF
  FIFO20 #(.guarded(32'd1)) resetReqsF(.RST(RST_N),
				       .CLK(CLK),
				       .ENQ(resetReqsF$ENQ),
				       .DEQ(resetReqsF$DEQ),
				       .CLR(resetReqsF$CLR),
				       .FULL_N(resetReqsF$FULL_N),
				       .EMPTY_N(resetReqsF$EMPTY_N));

  // submodule resetRspsF
  FIFO20 #(.guarded(32'd1)) resetRspsF(.RST(RST_N),
				       .CLK(CLK),
				       .ENQ(resetRspsF$ENQ),
				       .DEQ(resetRspsF$DEQ),
				       .CLR(resetRspsF$CLR),
				       .FULL_N(resetRspsF$FULL_N),
				       .EMPTY_N(resetRspsF$EMPTY_N));

  // rule RL_rl_reset_end
  assign CAN_FIRE_RL_rl_reset_end =
	     fpu$RDY_server_reset_response_get && resetRspsF$FULL_N &&
	     stateR == 3'd0 ;
  assign WILL_FIRE_RL_rl_reset_end = CAN_FIRE_RL_rl_reset_end ;

  // rule RL_doFADD_S
  assign CAN_FIRE_RL_doFADD_S =
	     fpu$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h0 ;
  assign WILL_FIRE_RL_doFADD_S = CAN_FIRE_RL_doFADD_S ;

  // rule RL_doFSUB_S
  assign CAN_FIRE_RL_doFSUB_S =
	     fpu$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h04 ;
  assign WILL_FIRE_RL_doFSUB_S = CAN_FIRE_RL_doFSUB_S ;

  // rule RL_doFMUL_S
  assign CAN_FIRE_RL_doFMUL_S =
	     fpu$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h08 ;
  assign WILL_FIRE_RL_doFMUL_S = CAN_FIRE_RL_doFMUL_S ;

  // rule RL_doFMADD_S
  assign CAN_FIRE_RL_doFMADD_S =
	     fpu$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1000011 &&
	     requestR[233:232] == 2'd0 ;
  assign WILL_FIRE_RL_doFMADD_S = CAN_FIRE_RL_doFMADD_S ;

  // rule RL_doFMSUB_S
  assign CAN_FIRE_RL_doFMSUB_S =
	     fpu$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1000111 &&
	     requestR[233:232] == 2'd0 ;
  assign WILL_FIRE_RL_doFMSUB_S = CAN_FIRE_RL_doFMSUB_S ;

  // rule RL_doFNMADD_S
  assign CAN_FIRE_RL_doFNMADD_S =
	     fpu$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1001111 &&
	     requestR[233:232] == 2'd0 ;
  assign WILL_FIRE_RL_doFNMADD_S = CAN_FIRE_RL_doFNMADD_S ;

  // rule RL_doFNMSUB_S
  assign CAN_FIRE_RL_doFNMSUB_S =
	     fpu$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1001011 &&
	     requestR[233:232] == 2'd0 ;
  assign WILL_FIRE_RL_doFNMSUB_S = CAN_FIRE_RL_doFNMSUB_S ;

  // rule RL_doFCVT_P_S
  assign CAN_FIRE_RL_doFCVT_P_S =
	     positCore$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h26 &&
	     requestR[231:227] == 5'h0 ;
  assign WILL_FIRE_RL_doFCVT_P_S = CAN_FIRE_RL_doFCVT_P_S ;

  // rule RL_doFCVT_S_P
  assign CAN_FIRE_RL_doFCVT_S_P =
	     positCore$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h24 &&
	     requestR[231:227] == 5'h10 ;
  assign WILL_FIRE_RL_doFCVT_S_P = CAN_FIRE_RL_doFCVT_S_P ;

  // rule RL_doFCVT_R_P
  assign CAN_FIRE_RL_doFCVT_R_P =
	     positCore$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h2A &&
	     requestR[231:227] == 5'h10 ;
  assign WILL_FIRE_RL_doFCVT_R_P = CAN_FIRE_RL_doFCVT_R_P ;

  // rule RL_doFCVT_P_R
  assign CAN_FIRE_RL_doFCVT_P_R =
	     positCore$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h2A &&
	     requestR[231:227] == 5'h11 ;
  assign WILL_FIRE_RL_doFCVT_P_R = CAN_FIRE_RL_doFCVT_P_R ;

  // rule RL_doFMA_P
  assign CAN_FIRE_RL_doFMA_P =
	     positCore$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h32 ;
  assign WILL_FIRE_RL_doFMA_P = CAN_FIRE_RL_doFMA_P ;

  // rule RL_doFMS_P
  assign CAN_FIRE_RL_doFMS_P =
	     positCore$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h36 ;
  assign WILL_FIRE_RL_doFMS_P = CAN_FIRE_RL_doFMS_P ;

  // rule RL_doFDA_P
  assign CAN_FIRE_RL_doFDA_P =
	     positCore$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h3A ;
  assign WILL_FIRE_RL_doFDA_P = CAN_FIRE_RL_doFDA_P ;

  // rule RL_doFDS_P
  assign CAN_FIRE_RL_doFDS_P =
	     positCore$RDY_server_core_request_put && requestR[246] &&
	     stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h3E ;
  assign WILL_FIRE_RL_doFDS_P = CAN_FIRE_RL_doFDS_P ;

  // rule RL_doPMV_W_X
  assign CAN_FIRE_RL_doPMV_W_X =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h7A ;
  assign WILL_FIRE_RL_doPMV_W_X = CAN_FIRE_RL_doPMV_W_X ;

  // rule RL_doPMV_X_W
  assign CAN_FIRE_RL_doPMV_X_W =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h70 &&
	     requestR[231:227] == 5'h10 ;
  assign WILL_FIRE_RL_doPMV_X_W = CAN_FIRE_RL_doPMV_X_W ;

  // rule RL_doFSGNJ_S
  assign CAN_FIRE_RL_doFSGNJ_S =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h10 &&
	     requestR[226:224] == 3'h0 ;
  assign WILL_FIRE_RL_doFSGNJ_S = CAN_FIRE_RL_doFSGNJ_S ;

  // rule RL_doFSGNJN_S
  assign CAN_FIRE_RL_doFSGNJN_S =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h10 &&
	     requestR[226:224] == 3'h1 ;
  assign WILL_FIRE_RL_doFSGNJN_S = CAN_FIRE_RL_doFSGNJN_S ;

  // rule RL_doFSGNJX_S
  assign CAN_FIRE_RL_doFSGNJX_S =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h10 &&
	     requestR[226:224] == 3'h2 ;
  assign WILL_FIRE_RL_doFSGNJX_S = CAN_FIRE_RL_doFSGNJX_S ;

  // rule RL_doFCVT_S_W
  assign CAN_FIRE_RL_doFCVT_S_W =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h68 &&
	     requestR[231:227] == 5'h0 ;
  assign WILL_FIRE_RL_doFCVT_S_W = CAN_FIRE_RL_doFCVT_S_W ;

  // rule RL_doFCVT_S_WU
  assign CAN_FIRE_RL_doFCVT_S_WU =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h68 &&
	     requestR[231:227] == 5'd1 ;
  assign WILL_FIRE_RL_doFCVT_S_WU = CAN_FIRE_RL_doFCVT_S_WU ;

  // rule RL_doFCVT_W_S
  assign CAN_FIRE_RL_doFCVT_W_S =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h60 &&
	     requestR[231:227] == 5'h0 ;
  assign WILL_FIRE_RL_doFCVT_W_S = CAN_FIRE_RL_doFCVT_W_S ;

  // rule RL_doFCVT_WU_S
  assign CAN_FIRE_RL_doFCVT_WU_S =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h60 &&
	     requestR[231:227] == 5'd1 ;
  assign WILL_FIRE_RL_doFCVT_WU_S = CAN_FIRE_RL_doFCVT_WU_S ;

  // rule RL_doFMIN_S
  assign CAN_FIRE_RL_doFMIN_S =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h14 &&
	     requestR[226:224] == 3'h0 ;
  assign WILL_FIRE_RL_doFMIN_S = CAN_FIRE_RL_doFMIN_S ;

  // rule RL_doFMAX_S
  assign CAN_FIRE_RL_doFMAX_S =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h14 &&
	     requestR[226:224] == 3'h1 ;
  assign WILL_FIRE_RL_doFMAX_S = CAN_FIRE_RL_doFMAX_S ;

  // rule RL_doFMV_W_X
  assign CAN_FIRE_RL_doFMV_W_X =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h78 &&
	     requestR[226:224] == 3'h0 ;
  assign WILL_FIRE_RL_doFMV_W_X = CAN_FIRE_RL_doFMV_W_X ;

  // rule RL_doFMV_X_W
  assign CAN_FIRE_RL_doFMV_X_W =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h70 &&
	     requestR[226:224] == 3'h0 ;
  assign WILL_FIRE_RL_doFMV_X_W =
	     CAN_FIRE_RL_doFMV_X_W && !WILL_FIRE_RL_doPMV_X_W ;

  // rule RL_doFEQ_S
  assign CAN_FIRE_RL_doFEQ_S =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h50 &&
	     requestR[226:224] == 3'h2 ;
  assign WILL_FIRE_RL_doFEQ_S = CAN_FIRE_RL_doFEQ_S ;

  // rule RL_doFLT_S
  assign CAN_FIRE_RL_doFLT_S =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h50 &&
	     requestR[226:224] == 3'h1 ;
  assign WILL_FIRE_RL_doFLT_S = CAN_FIRE_RL_doFLT_S ;

  // rule RL_doFLE_S
  assign CAN_FIRE_RL_doFLE_S =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h50 &&
	     requestR[226:224] == 3'h0 ;
  assign WILL_FIRE_RL_doFLE_S = CAN_FIRE_RL_doFLE_S ;

  // rule RL_doFCLASS_S
  assign CAN_FIRE_RL_doFCLASS_S =
	     requestR[246] && stateR == 3'd1 &&
	     requestR[245:239] == 7'b1010011 &&
	     requestR[238:232] == 7'h70 &&
	     requestR[226:224] == 3'h1 ;
  assign WILL_FIRE_RL_doFCLASS_S =
	     CAN_FIRE_RL_doFCLASS_S && !WILL_FIRE_RL_doPMV_X_W ;

  // rule RL_rl_get_fpu_result
  assign CAN_FIRE_RL_rl_get_fpu_result = MUX_dw_result$wset_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_get_fpu_result = MUX_dw_result$wset_1__SEL_2 ;

  // rule RL_rl_get_posit_result
  assign CAN_FIRE_RL_rl_get_posit_result = MUX_dw_result$wset_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_get_posit_result = MUX_dw_result$wset_1__SEL_1 ;

  // rule RL_rl_drive_fpu_result
  assign CAN_FIRE_RL_rl_drive_fpu_result = stateR == 3'd4 ;
  assign WILL_FIRE_RL_rl_drive_fpu_result = stateR == 3'd4 ;

  // rule RL_rl_reset_begin
  assign CAN_FIRE_RL_rl_reset_begin =
	     fpu$RDY_server_reset_request_put && resetReqsF$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_begin = CAN_FIRE_RL_rl_reset_begin ;

  // inputs to muxes for submodule ports
  assign MUX_dw_result$wset_1__SEL_1 =
	     positCore$RDY_server_core_response_get && stateR == 3'd3 ;
  assign MUX_dw_result$wset_1__SEL_2 =
	     fpu$RDY_server_core_response_get && stateR == 3'd2 ;
  assign MUX_dw_result$wset_1__VAL_1 =
	     { x__h30266, positCore$server_core_response_get[4:0] } ;
  assign MUX_dw_result$wset_1__VAL_2 =
	     { x__h29775, fpu$server_core_response_get[4:0] } ;
  assign MUX_fpu$server_core_request_put_1__VAL_1 =
	     { 2'd1,
	       requestR[223:160],
	       2'd1,
	       requestR[159:96],
	       66'h2AAAAAAAAAAAAAAAA,
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd0 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_2 =
	     { 2'd1,
	       requestR[223:160],
	       2'd1,
	       requestR[159:96],
	       66'h2AAAAAAAAAAAAAAAA,
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd1 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_3 =
	     { 2'd1,
	       requestR[223:160],
	       2'd1,
	       requestR[159:96],
	       66'h2AAAAAAAAAAAAAAAA,
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd2 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_4 =
	     { 2'd1,
	       requestR[223:160],
	       2'd1,
	       requestR[159:96],
	       2'd1,
	       requestR[95:32],
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd5 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_5 =
	     { 2'd1,
	       requestR[223:160],
	       2'd1,
	       requestR[159:96],
	       2'd1,
	       requestR[95:32],
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd6 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_6 =
	     { 2'd1,
	       requestR[223:160],
	       2'd1,
	       requestR[159:96],
	       2'd1,
	       requestR[95:32],
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd7 } ;
  assign MUX_fpu$server_core_request_put_1__VAL_7 =
	     { 2'd1,
	       requestR[223:160],
	       2'd1,
	       requestR[159:96],
	       2'd1,
	       requestR[95:32],
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42,
	       4'd8 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_1 =
	     { 2'd1, requestR[223:160], 72'hAAAAAAAAAAAAAAAA94 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_2 =
	     { 2'd2,
	       requestR[79:16],
	       66'h2AAAAAAAAAAAAAAAA,
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42,
	       3'd5 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_3 =
	     { 2'd2, requestR[79:16], 72'hAAAAAAAAAAAAAAAA97 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_4 =
	     { 2'd2, requestR[79:16], 72'hAAAAAAAAAAAAAAAA96 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_5 =
	     { 2'd2, requestR[79:16], 2'd2, requestR[63:0], 6'h10 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_6 =
	     { 2'd2, requestR[79:16], 2'd2, requestR[63:0], 6'h12 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_7 =
	     { 2'd2, requestR[79:16], 2'd2, requestR[63:0], 6'h11 } ;
  assign MUX_positCore$server_core_request_put_1__VAL_8 =
	     { 2'd2, requestR[79:16], 2'd2, requestR[63:0], 6'h13 } ;
  assign MUX_requestR$write_1__VAL_2 =
	     { 1'd1,
	       req_opcode,
	       req_f7,
	       req_rs2,
	       req_rm,
	       req_v1,
	       req_v2,
	       req_v3,
	       req_pv1,
	       req_pv2 } ;
  assign MUX_resultR$write_1__VAL_3 =
	     { 1'd1, x__h30266, positCore$server_core_response_get[4:0] } ;
  assign MUX_resultR$write_1__VAL_4 =
	     { 1'd1, x__h29775, fpu$server_core_response_get[4:0] } ;
  assign MUX_resultR$write_1__VAL_5 = { 1'd1, x__h29352, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_6 = { 1'd1, x__h28234, x__h28019 } ;
  assign MUX_resultR$write_1__VAL_7 = { 1'd1, x__h27134, x__h28019 } ;
  assign MUX_resultR$write_1__VAL_8 = { 1'd1, x__h25622, x__h22118 } ;
  assign MUX_resultR$write_1__VAL_9 = { 1'd1, x__h25450, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_10 = { 1'd1, x__h4142, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_11 = { 1'd1, x__h22745, x__h22118 } ;
  assign MUX_resultR$write_1__VAL_12 = { 1'd1, x__h20086, x__h22118 } ;
  assign MUX_resultR$write_1__VAL_13 = { 1'd1, x__h19302, x__h19804 } ;
  assign MUX_resultR$write_1__VAL_14 = { 1'd1, x__h17674, x__h19010 } ;
  assign MUX_resultR$write_1__VAL_15 = { 1'd1, x__h11497, x__h17355 } ;
  assign MUX_resultR$write_1__VAL_16 = { 1'd1, x__h5001, x__h11174 } ;
  assign MUX_resultR$write_1__VAL_17 = { 1'd1, x__h4823, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_18 = { 1'd1, x__h4655, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_19 = { 1'd1, x__h4489, 5'd0 } ;
  assign MUX_resultR$write_1__VAL_20 = { 1'd1, x__h4276, 5'd0 } ;

  // inlined wires
  assign dw_valid$wget = !WILL_FIRE_RL_rl_drive_fpu_result || resultR[69] ;
  assign dw_valid$whas =
	     WILL_FIRE_RL_rl_drive_fpu_result ||
	     WILL_FIRE_RL_rl_get_posit_result ||
	     WILL_FIRE_RL_rl_get_fpu_result ;
  always@(WILL_FIRE_RL_rl_get_posit_result or
	  MUX_dw_result$wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_get_fpu_result or
	  MUX_dw_result$wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_drive_fpu_result or resultR)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_get_posit_result:
	  dw_result$wget = MUX_dw_result$wset_1__VAL_1;
      WILL_FIRE_RL_rl_get_fpu_result:
	  dw_result$wget = MUX_dw_result$wset_1__VAL_2;
      WILL_FIRE_RL_rl_drive_fpu_result: dw_result$wget = resultR[68:0];
      default: dw_result$wget =
		   69'h0AAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // register requestR
  assign requestR$D_IN =
	     WILL_FIRE_RL_rl_reset_begin ?
	       247'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       MUX_requestR$write_1__VAL_2 ;
  assign requestR$EN = WILL_FIRE_RL_rl_reset_begin || EN_req ;

  // register resultR
  always@(WILL_FIRE_RL_rl_reset_begin or
	  EN_req or
	  WILL_FIRE_RL_rl_get_posit_result or
	  MUX_resultR$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_get_fpu_result or
	  MUX_resultR$write_1__VAL_4 or
	  WILL_FIRE_RL_doFCLASS_S or
	  MUX_resultR$write_1__VAL_5 or
	  WILL_FIRE_RL_doFLE_S or
	  MUX_resultR$write_1__VAL_6 or
	  WILL_FIRE_RL_doFLT_S or
	  MUX_resultR$write_1__VAL_7 or
	  WILL_FIRE_RL_doFEQ_S or
	  MUX_resultR$write_1__VAL_8 or
	  WILL_FIRE_RL_doFMV_X_W or
	  MUX_resultR$write_1__VAL_9 or
	  WILL_FIRE_RL_doFMV_W_X or
	  MUX_resultR$write_1__VAL_10 or
	  WILL_FIRE_RL_doFMAX_S or
	  MUX_resultR$write_1__VAL_11 or
	  WILL_FIRE_RL_doFMIN_S or
	  MUX_resultR$write_1__VAL_12 or
	  WILL_FIRE_RL_doFCVT_WU_S or
	  MUX_resultR$write_1__VAL_13 or
	  WILL_FIRE_RL_doFCVT_W_S or
	  MUX_resultR$write_1__VAL_14 or
	  WILL_FIRE_RL_doFCVT_S_WU or
	  MUX_resultR$write_1__VAL_15 or
	  WILL_FIRE_RL_doFCVT_S_W or
	  MUX_resultR$write_1__VAL_16 or
	  WILL_FIRE_RL_doFSGNJX_S or
	  MUX_resultR$write_1__VAL_17 or
	  WILL_FIRE_RL_doFSGNJN_S or
	  MUX_resultR$write_1__VAL_18 or
	  WILL_FIRE_RL_doFSGNJ_S or
	  MUX_resultR$write_1__VAL_19 or
	  WILL_FIRE_RL_doPMV_X_W or
	  MUX_resultR$write_1__VAL_20 or WILL_FIRE_RL_doPMV_W_X)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_begin || EN_req:
	resultR$D_IN = 70'h0AAAAAAAAAAAAAAAAA;
    WILL_FIRE_RL_rl_get_posit_result:
	resultR$D_IN = MUX_resultR$write_1__VAL_3;
    WILL_FIRE_RL_rl_get_fpu_result: resultR$D_IN = MUX_resultR$write_1__VAL_4;
    WILL_FIRE_RL_doFCLASS_S: resultR$D_IN = MUX_resultR$write_1__VAL_5;
    WILL_FIRE_RL_doFLE_S: resultR$D_IN = MUX_resultR$write_1__VAL_6;
    WILL_FIRE_RL_doFLT_S: resultR$D_IN = MUX_resultR$write_1__VAL_7;
    WILL_FIRE_RL_doFEQ_S: resultR$D_IN = MUX_resultR$write_1__VAL_8;
    WILL_FIRE_RL_doFMV_X_W: resultR$D_IN = MUX_resultR$write_1__VAL_9;
    WILL_FIRE_RL_doFMV_W_X: resultR$D_IN = MUX_resultR$write_1__VAL_10;
    WILL_FIRE_RL_doFMAX_S: resultR$D_IN = MUX_resultR$write_1__VAL_11;
    WILL_FIRE_RL_doFMIN_S: resultR$D_IN = MUX_resultR$write_1__VAL_12;
    WILL_FIRE_RL_doFCVT_WU_S: resultR$D_IN = MUX_resultR$write_1__VAL_13;
    WILL_FIRE_RL_doFCVT_W_S: resultR$D_IN = MUX_resultR$write_1__VAL_14;
    WILL_FIRE_RL_doFCVT_S_WU: resultR$D_IN = MUX_resultR$write_1__VAL_15;
    WILL_FIRE_RL_doFCVT_S_W: resultR$D_IN = MUX_resultR$write_1__VAL_16;
    WILL_FIRE_RL_doFSGNJX_S: resultR$D_IN = MUX_resultR$write_1__VAL_17;
    WILL_FIRE_RL_doFSGNJN_S: resultR$D_IN = MUX_resultR$write_1__VAL_18;
    WILL_FIRE_RL_doFSGNJ_S: resultR$D_IN = MUX_resultR$write_1__VAL_19;
    WILL_FIRE_RL_doPMV_X_W: resultR$D_IN = MUX_resultR$write_1__VAL_20;
    WILL_FIRE_RL_doPMV_W_X: resultR$D_IN = MUX_resultR$write_1__VAL_10;
    default: resultR$D_IN = 70'h2AAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign resultR$EN =
	     WILL_FIRE_RL_rl_reset_begin || EN_req ||
	     WILL_FIRE_RL_doFMV_W_X ||
	     WILL_FIRE_RL_doPMV_W_X ||
	     WILL_FIRE_RL_doPMV_X_W ||
	     WILL_FIRE_RL_doFSGNJ_S ||
	     WILL_FIRE_RL_doFSGNJN_S ||
	     WILL_FIRE_RL_doFSGNJX_S ||
	     WILL_FIRE_RL_doFCVT_S_W ||
	     WILL_FIRE_RL_doFCVT_S_WU ||
	     WILL_FIRE_RL_doFCVT_W_S ||
	     WILL_FIRE_RL_doFCVT_WU_S ||
	     WILL_FIRE_RL_doFMIN_S ||
	     WILL_FIRE_RL_doFMAX_S ||
	     WILL_FIRE_RL_doFMV_X_W ||
	     WILL_FIRE_RL_doFEQ_S ||
	     WILL_FIRE_RL_doFLT_S ||
	     WILL_FIRE_RL_doFLE_S ||
	     WILL_FIRE_RL_doFCLASS_S ||
	     WILL_FIRE_RL_rl_get_fpu_result ||
	     WILL_FIRE_RL_rl_get_posit_result ;

  // register stateR
  always@(WILL_FIRE_RL_rl_reset_begin or
	  EN_req or
	  WILL_FIRE_RL_rl_get_posit_result or
	  WILL_FIRE_RL_rl_get_fpu_result or
	  WILL_FIRE_RL_doFCLASS_S or
	  WILL_FIRE_RL_doFLE_S or
	  WILL_FIRE_RL_doFLT_S or
	  WILL_FIRE_RL_doFEQ_S or
	  WILL_FIRE_RL_doFMV_X_W or
	  WILL_FIRE_RL_doFMV_W_X or
	  WILL_FIRE_RL_doFMAX_S or
	  WILL_FIRE_RL_doFMIN_S or
	  WILL_FIRE_RL_doFCVT_WU_S or
	  WILL_FIRE_RL_doFCVT_W_S or
	  WILL_FIRE_RL_doFCVT_S_WU or
	  WILL_FIRE_RL_doFCVT_S_W or
	  WILL_FIRE_RL_doFSGNJX_S or
	  WILL_FIRE_RL_doFSGNJN_S or
	  WILL_FIRE_RL_doFSGNJ_S or
	  WILL_FIRE_RL_doPMV_X_W or
	  WILL_FIRE_RL_doPMV_W_X or
	  WILL_FIRE_RL_doFDS_P or
	  WILL_FIRE_RL_doFDA_P or
	  WILL_FIRE_RL_doFMS_P or
	  WILL_FIRE_RL_doFMA_P or
	  WILL_FIRE_RL_doFCVT_P_R or
	  WILL_FIRE_RL_doFCVT_R_P or
	  WILL_FIRE_RL_doFCVT_S_P or
	  WILL_FIRE_RL_doFCVT_P_S or
	  WILL_FIRE_RL_doFNMSUB_S or
	  WILL_FIRE_RL_doFNMADD_S or
	  WILL_FIRE_RL_doFMSUB_S or
	  WILL_FIRE_RL_doFMADD_S or
	  WILL_FIRE_RL_doFMUL_S or
	  WILL_FIRE_RL_doFSUB_S or
	  WILL_FIRE_RL_doFADD_S or WILL_FIRE_RL_rl_reset_end)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_begin: stateR$D_IN = 3'd0;
    EN_req: stateR$D_IN = 3'd1;
    WILL_FIRE_RL_rl_get_posit_result || WILL_FIRE_RL_rl_get_fpu_result ||
    WILL_FIRE_RL_doFCLASS_S ||
    WILL_FIRE_RL_doFLE_S ||
    WILL_FIRE_RL_doFLT_S ||
    WILL_FIRE_RL_doFEQ_S ||
    WILL_FIRE_RL_doFMV_X_W ||
    WILL_FIRE_RL_doFMV_W_X ||
    WILL_FIRE_RL_doFMAX_S ||
    WILL_FIRE_RL_doFMIN_S ||
    WILL_FIRE_RL_doFCVT_WU_S ||
    WILL_FIRE_RL_doFCVT_W_S ||
    WILL_FIRE_RL_doFCVT_S_WU ||
    WILL_FIRE_RL_doFCVT_S_W ||
    WILL_FIRE_RL_doFSGNJX_S ||
    WILL_FIRE_RL_doFSGNJN_S ||
    WILL_FIRE_RL_doFSGNJ_S ||
    WILL_FIRE_RL_doPMV_X_W ||
    WILL_FIRE_RL_doPMV_W_X:
	stateR$D_IN = 3'd4;
    WILL_FIRE_RL_doFDS_P || WILL_FIRE_RL_doFDA_P || WILL_FIRE_RL_doFMS_P ||
    WILL_FIRE_RL_doFMA_P ||
    WILL_FIRE_RL_doFCVT_P_R ||
    WILL_FIRE_RL_doFCVT_R_P ||
    WILL_FIRE_RL_doFCVT_S_P ||
    WILL_FIRE_RL_doFCVT_P_S:
	stateR$D_IN = 3'd3;
    WILL_FIRE_RL_doFNMSUB_S || WILL_FIRE_RL_doFNMADD_S ||
    WILL_FIRE_RL_doFMSUB_S ||
    WILL_FIRE_RL_doFMADD_S ||
    WILL_FIRE_RL_doFMUL_S ||
    WILL_FIRE_RL_doFSUB_S ||
    WILL_FIRE_RL_doFADD_S:
	stateR$D_IN = 3'd2;
    WILL_FIRE_RL_rl_reset_end: stateR$D_IN = 3'd1;
    default: stateR$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign stateR$EN =
	     WILL_FIRE_RL_rl_reset_begin || WILL_FIRE_RL_rl_reset_end ||
	     EN_req ||
	     WILL_FIRE_RL_doFNMSUB_S ||
	     WILL_FIRE_RL_doFNMADD_S ||
	     WILL_FIRE_RL_doFMSUB_S ||
	     WILL_FIRE_RL_doFMADD_S ||
	     WILL_FIRE_RL_doFMUL_S ||
	     WILL_FIRE_RL_doFSUB_S ||
	     WILL_FIRE_RL_doFADD_S ||
	     WILL_FIRE_RL_doFDS_P ||
	     WILL_FIRE_RL_doFDA_P ||
	     WILL_FIRE_RL_doFMS_P ||
	     WILL_FIRE_RL_doFMA_P ||
	     WILL_FIRE_RL_doFCVT_P_R ||
	     WILL_FIRE_RL_doFCVT_R_P ||
	     WILL_FIRE_RL_doFCVT_S_P ||
	     WILL_FIRE_RL_doFCVT_P_S ||
	     WILL_FIRE_RL_rl_get_posit_result ||
	     WILL_FIRE_RL_rl_get_fpu_result ||
	     WILL_FIRE_RL_doFCLASS_S ||
	     WILL_FIRE_RL_doFLE_S ||
	     WILL_FIRE_RL_doFLT_S ||
	     WILL_FIRE_RL_doFEQ_S ||
	     WILL_FIRE_RL_doFMV_X_W ||
	     WILL_FIRE_RL_doFMV_W_X ||
	     WILL_FIRE_RL_doFMAX_S ||
	     WILL_FIRE_RL_doFMIN_S ||
	     WILL_FIRE_RL_doFCVT_WU_S ||
	     WILL_FIRE_RL_doFCVT_W_S ||
	     WILL_FIRE_RL_doFCVT_S_WU ||
	     WILL_FIRE_RL_doFCVT_S_W ||
	     WILL_FIRE_RL_doFSGNJX_S ||
	     WILL_FIRE_RL_doFSGNJN_S ||
	     WILL_FIRE_RL_doFSGNJ_S ||
	     WILL_FIRE_RL_doPMV_X_W ||
	     WILL_FIRE_RL_doPMV_W_X ;

  // submodule fpu
  always@(WILL_FIRE_RL_doFADD_S or
	  MUX_fpu$server_core_request_put_1__VAL_1 or
	  WILL_FIRE_RL_doFSUB_S or
	  MUX_fpu$server_core_request_put_1__VAL_2 or
	  WILL_FIRE_RL_doFMUL_S or
	  MUX_fpu$server_core_request_put_1__VAL_3 or
	  WILL_FIRE_RL_doFMADD_S or
	  MUX_fpu$server_core_request_put_1__VAL_4 or
	  WILL_FIRE_RL_doFMSUB_S or
	  MUX_fpu$server_core_request_put_1__VAL_5 or
	  WILL_FIRE_RL_doFNMADD_S or
	  MUX_fpu$server_core_request_put_1__VAL_6 or
	  WILL_FIRE_RL_doFNMSUB_S or MUX_fpu$server_core_request_put_1__VAL_7)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_doFADD_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_1;
      WILL_FIRE_RL_doFSUB_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_2;
      WILL_FIRE_RL_doFMUL_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_3;
      WILL_FIRE_RL_doFMADD_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_4;
      WILL_FIRE_RL_doFMSUB_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_5;
      WILL_FIRE_RL_doFNMADD_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_6;
      WILL_FIRE_RL_doFNMSUB_S:
	  fpu$server_core_request_put =
	      MUX_fpu$server_core_request_put_1__VAL_7;
      default: fpu$server_core_request_put =
		   205'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign fpu$EN_server_core_request_put =
	     WILL_FIRE_RL_doFADD_S || WILL_FIRE_RL_doFSUB_S ||
	     WILL_FIRE_RL_doFMUL_S ||
	     WILL_FIRE_RL_doFMADD_S ||
	     WILL_FIRE_RL_doFMSUB_S ||
	     WILL_FIRE_RL_doFNMADD_S ||
	     WILL_FIRE_RL_doFNMSUB_S ;
  assign fpu$EN_server_core_response_get = MUX_dw_result$wset_1__SEL_2 ;
  assign fpu$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_begin ;
  assign fpu$EN_server_reset_response_get = CAN_FIRE_RL_rl_reset_end ;

  // submodule frmFpuF
  assign frmFpuF$D_IN = 1'b0 ;
  assign frmFpuF$ENQ = 1'b0 ;
  assign frmFpuF$DEQ = 1'b0 ;
  assign frmFpuF$CLR = CAN_FIRE_RL_rl_reset_begin ;

  // submodule positCore
  always@(WILL_FIRE_RL_doFCVT_P_S or
	  MUX_positCore$server_core_request_put_1__VAL_1 or
	  WILL_FIRE_RL_doFCVT_S_P or
	  MUX_positCore$server_core_request_put_1__VAL_2 or
	  WILL_FIRE_RL_doFCVT_R_P or
	  MUX_positCore$server_core_request_put_1__VAL_3 or
	  WILL_FIRE_RL_doFCVT_P_R or
	  MUX_positCore$server_core_request_put_1__VAL_4 or
	  WILL_FIRE_RL_doFMA_P or
	  MUX_positCore$server_core_request_put_1__VAL_5 or
	  WILL_FIRE_RL_doFMS_P or
	  MUX_positCore$server_core_request_put_1__VAL_6 or
	  WILL_FIRE_RL_doFDA_P or
	  MUX_positCore$server_core_request_put_1__VAL_7 or
	  WILL_FIRE_RL_doFDS_P or
	  MUX_positCore$server_core_request_put_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_doFCVT_P_S:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_1;
      WILL_FIRE_RL_doFCVT_S_P:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_2;
      WILL_FIRE_RL_doFCVT_R_P:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_3;
      WILL_FIRE_RL_doFCVT_P_R:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_4;
      WILL_FIRE_RL_doFMA_P:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_5;
      WILL_FIRE_RL_doFMS_P:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_6;
      WILL_FIRE_RL_doFDA_P:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_7;
      WILL_FIRE_RL_doFDS_P:
	  positCore$server_core_request_put =
	      MUX_positCore$server_core_request_put_1__VAL_8;
      default: positCore$server_core_request_put =
		   138'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign positCore$EN_server_core_request_put =
	     WILL_FIRE_RL_doFCVT_P_S || WILL_FIRE_RL_doFCVT_S_P ||
	     WILL_FIRE_RL_doFCVT_R_P ||
	     WILL_FIRE_RL_doFCVT_P_R ||
	     WILL_FIRE_RL_doFMA_P ||
	     WILL_FIRE_RL_doFMS_P ||
	     WILL_FIRE_RL_doFDA_P ||
	     WILL_FIRE_RL_doFDS_P ;
  assign positCore$EN_server_core_response_get = MUX_dw_result$wset_1__SEL_1 ;

  // submodule resetReqsF
  assign resetReqsF$ENQ = EN_server_reset_request_put ;
  assign resetReqsF$DEQ = CAN_FIRE_RL_rl_reset_begin ;
  assign resetReqsF$CLR = 1'b0 ;

  // submodule resetRspsF
  assign resetRspsF$ENQ = CAN_FIRE_RL_rl_reset_end ;
  assign resetRspsF$DEQ = EN_server_reset_response_get ;
  assign resetRspsF$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191__ETC___d425 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d364 ?
	       ((requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
		 requestR[226:224] != 3'h3 &&
		 requestR[226:224] != 3'h4) ?
		  CASE_guard936_0b0_requestR_BIT_191_0b1_request_ETC__q5 :
		  CASE_requestR_BITS_226_TO_224_0x2_requestR_BIT_ETC__q6) :
	       ((x__h10481[7:0] == 8'd255) ?
		  requestR[191] :
		  ((requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
		    requestR[226:224] != 3'h3 &&
		    requestR[226:224] != 3'h4) ?
		     CASE_guard0466_0b0_requestR_BIT_191_0b1_reques_ETC__q7 :
		     CASE_requestR_BITS_226_TO_224_0x2_requestR_BIT_ETC__q8)) ;
  assign IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191__ETC___d575 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d364 ?
	       guard__h9936 != 2'b0 :
	       x__h10481[7:0] != 8'd255 && guard__h10466 != 2'b0 ;
  assign IF_32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13__ETC___d890 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d720 ?
	       guard__h16148 != 2'b0 :
	       x__h16689[7:0] != 8'd255 && guard__h16674 != 2'b0 ;
  assign IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d447 =
	     (guard__h9936 == 2'b0) ?
	       8'd0 :
	       (requestR[191] ? _theResult___exp__h10352 : 8'd0) ;
  assign IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d473 =
	     (guard__h10466 == 2'b0 || requestR[191]) ?
	       x__h10481[7:0] :
	       _theResult___exp__h10905 ;
  assign IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d475 =
	     (guard__h10466 == 2'b0) ?
	       x__h10481[7:0] :
	       (requestR[191] ? _theResult___exp__h10905 : x__h10481[7:0]) ;
  assign IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d496 =
	     (guard__h9936 == 2'b0 || requestR[191]) ?
	       sfd___3__h9926[31:9] :
	       _theResult___sfd__h10353 ;
  assign IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d498 =
	     (guard__h9936 == 2'b0) ?
	       sfd___3__h9926[31:9] :
	       (requestR[191] ?
		  _theResult___sfd__h10353 :
		  sfd___3__h9926[31:9]) ;
  assign IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d514 =
	     (guard__h10466 == 2'b0 || requestR[191]) ?
	       sfd___3__h9926[30:8] :
	       _theResult___sfd__h10906 ;
  assign IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d516 =
	     (guard__h10466 == 2'b0) ?
	       sfd___3__h9926[30:8] :
	       (requestR[191] ?
		  _theResult___sfd__h10906 :
		  sfd___3__h9926[30:8]) ;
  assign IF_IF_requestR_3_BIT_191_13_THEN_NEG_requestR__ETC___d355 =
	     sfd__h5022[31] ?
	       6'd0 :
	       (sfd__h5022[30] ?
		  6'd1 :
		  (sfd__h5022[29] ?
		     6'd2 :
		     (sfd__h5022[28] ?
			6'd3 :
			(sfd__h5022[27] ?
			   6'd4 :
			   (sfd__h5022[26] ?
			      6'd5 :
			      (sfd__h5022[25] ?
				 6'd6 :
				 (sfd__h5022[24] ?
				    6'd7 :
				    (sfd__h5022[23] ?
				       6'd8 :
				       (sfd__h5022[22] ?
					  6'd9 :
					  (sfd__h5022[21] ?
					     6'd10 :
					     (sfd__h5022[20] ?
						6'd11 :
						(sfd__h5022[19] ?
						   6'd12 :
						   (sfd__h5022[18] ?
						      6'd13 :
						      (sfd__h5022[17] ?
							 6'd14 :
							 (sfd__h5022[16] ?
							    6'd15 :
							    (sfd__h5022[15] ?
							       6'd16 :
							       (sfd__h5022[14] ?
								  6'd17 :
								  (sfd__h5022[13] ?
								     6'd18 :
								     (sfd__h5022[12] ?
									6'd19 :
									(sfd__h5022[11] ?
									   6'd20 :
									   (sfd__h5022[10] ?
									      6'd21 :
									      (sfd__h5022[9] ?
										 6'd22 :
										 (sfd__h5022[8] ?
										    6'd23 :
										    (sfd__h5022[7] ?
										       6'd24 :
										       (sfd__h5022[6] ?
											  6'd25 :
											  (sfd__h5022[5] ?
											     6'd26 :
											     (sfd__h5022[4] ?
												6'd27 :
												(sfd__h5022[3] ?
												   6'd28 :
												   (sfd__h5022[2] ?
												      6'd29 :
												      (sfd__h5022[1] ?
													 6'd30 :
													 (sfd__h5022[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign IF_NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINU_ETC___d1006 =
	     (NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d918 ==
	      20'd1048545) ?
	       _theResult_____2__h17855[32:31] == 2'b11 &&
	       guard__h17853 != 2'd0 :
	       !NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d951[19] &&
	       (!NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d953 ||
		guard__h18407 != 2'd0) ;
  assign IF_NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINU_ETC___d1043 =
	     NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d1018 ?
	       (IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_OR_NO_ETC___d1037 ?
		  ((x__h19726[56:25] == 32'hFFFFFFFF) ?
		     x__h19726[56:25] :
		     x__h19726[56:25] + 32'd1) :
		  x__h19726[56:25]) :
	       32'd0 ;
  assign IF_NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINU_ETC___d980 =
	     NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d953 ?
	       (IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_OR_NO_ETC___d974 ?
		  ((x__h18596[56:25] == 32'h7FFFFFFF) ?
		     x__h18596[56:25] :
		     x__h18596[56:25] + 32'd1) :
		  x__h18596[56:25]) :
	       32'd0 ;
  assign IF_NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINU_ETC___d982 =
	     (NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d918 ==
	      20'd1048545) ?
	       ((_theResult_____2__h17855[32:31] == 2'b11) ?
		  _theResult_____2__h17855[31:0] :
		  IF_requestR_3_BIT_191_13_THEN_2147483648_ELSE__ETC___d913) :
	       (NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d951[19] ?
		  IF_requestR_3_BIT_191_13_THEN_2147483648_ELSE__ETC___d913 :
		  IF_NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINU_ETC___d980) ;
  assign IF_requestR_3_BITS_126_TO_119_077_EQ_0_093_AND_ETC___d1126 =
	     requestR_3_BITS_126_TO_119_077_EQ_0_093_AND_re_ETC___d1100 ?
	       requestR[127:96] :
	       (NOT_requestR_3_BITS_190_TO_183_04_EQ_255_05_98_ETC___d1124 ?
		  requestR[191:160] :
		  requestR[127:96]) ;
  assign IF_requestR_3_BITS_126_TO_119_077_EQ_0_093_AND_ETC___d1142 =
	     requestR_3_BITS_126_TO_119_077_EQ_0_093_AND_re_ETC___d1100 ?
	       requestR[191:160] :
	       (NOT_requestR_3_BITS_190_TO_183_04_EQ_255_05_98_ETC___d1124 ?
		  requestR[127:96] :
		  requestR[191:160]) ;
  assign IF_requestR_3_BITS_126_TO_119_077_EQ_255_078_A_ETC___d1127 =
	     (requestR[126:119] == 8'd255 && requestR[118] ||
	      requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_requ_ETC___d1096) ?
	       requestR[191:160] :
	       IF_requestR_3_BITS_126_TO_119_077_EQ_0_093_AND_ETC___d1126 ;
  assign IF_requestR_3_BITS_126_TO_119_077_EQ_255_078_A_ETC___d1131 =
	     (requestR[126:119] == 8'd255 && requestR[118:96] != 23'd0 &&
	      !requestR[118]) ?
	       x__h4142 :
	       ((requestR[190:183] == 8'd255 && requestR[182] &&
		 requestR[126:119] == 8'd255 &&
		 requestR[118]) ?
		  64'hFFFFFFFF7FC00000 :
		  { 32'hFFFFFFFF,
		    (requestR[190:183] == 8'd255 && requestR[182]) ?
		      requestR[127:96] :
		      IF_requestR_3_BITS_126_TO_119_077_EQ_255_078_A_ETC___d1127 }) ;
  assign IF_requestR_3_BITS_126_TO_119_077_EQ_255_078_A_ETC___d1144 =
	     (requestR[126:119] == 8'd255 && requestR[118]) ?
	       requestR[191:160] :
	       (requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_requ_ETC___d1096 ?
		  requestR[127:96] :
		  IF_requestR_3_BITS_126_TO_119_077_EQ_0_093_AND_ETC___d1142) ;
  assign IF_requestR_3_BITS_126_TO_119_077_EQ_255_078_A_ETC___d1148 =
	     (requestR[126:119] == 8'd255 && requestR[118:96] != 23'd0 &&
	      !requestR[118]) ?
	       x__h4142 :
	       ((requestR[190:183] == 8'd255 && requestR[182] &&
		 requestR[126:119] == 8'd255 &&
		 requestR[118]) ?
		  64'hFFFFFFFF7FC00000 :
		  { 32'hFFFFFFFF,
		    (requestR[190:183] == 8'd255 && requestR[182]) ?
		      requestR[127:96] :
		      IF_requestR_3_BITS_126_TO_119_077_EQ_255_078_A_ETC___d1144 }) ;
  assign IF_requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_r_ETC___d1045 =
	     (requestR[190:183] == 8'd0 && requestR[182:160] == 23'd0) ?
	       32'd0 :
	       (NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d1016[19] ?
		  32'hFFFFFFFF :
		  IF_NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINU_ETC___d1043) ;
  assign IF_requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_r_ETC___d1221 =
	     (requestR[190:183] == 8'd0 && requestR[182:160] == 23'd0) ?
	       res___1__h29617 :
	       ((requestR[190:183] == 8'd0) ? res___1__h29636 : res__h29652) ;
  assign IF_requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_ETC___d984 =
	     (requestR[190:183] == 8'd255 && requestR[182:160] == 23'd0) ?
	       IF_requestR_3_BIT_191_13_THEN_2147483648_ELSE__ETC___d913 :
	       ((requestR[190:183] == 8'd0 && requestR[182:160] == 23'd0) ?
		  32'd0 :
		  IF_NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINU_ETC___d982) ;
  assign IF_requestR_3_BITS_191_TO_160_09_EQ_0_25_OR_NO_ETC___d485 =
	     (requestR[191:160] == 32'd0 ||
	      !sfd__h5022[31] && !sfd__h5022[30] && !sfd__h5022[29] &&
	      !sfd__h5022[28] &&
	      !sfd__h5022[27] &&
	      !sfd__h5022[26] &&
	      !sfd__h5022[25] &&
	      !sfd__h5022[24] &&
	      !sfd__h5022[23] &&
	      !sfd__h5022[22] &&
	      !sfd__h5022[21] &&
	      !sfd__h5022[20] &&
	      !sfd__h5022[19] &&
	      !sfd__h5022[18] &&
	      !sfd__h5022[17] &&
	      !sfd__h5022[16] &&
	      !sfd__h5022[15] &&
	      !sfd__h5022[14] &&
	      !sfd__h5022[13] &&
	      !sfd__h5022[12] &&
	      !sfd__h5022[11] &&
	      !sfd__h5022[10] &&
	      !sfd__h5022[9] &&
	      !sfd__h5022[8] &&
	      !sfd__h5022[7] &&
	      !sfd__h5022[6] &&
	      !sfd__h5022[5] &&
	      !sfd__h5022[4] &&
	      !sfd__h5022[3] &&
	      !sfd__h5022[2] &&
	      !sfd__h5022[1] &&
	      !sfd__h5022[0]) ?
	       8'd0 :
	       _theResult___snd_fst_exp__h11014 ;
  assign IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_OR_NO_ETC___d1037 =
	     (requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
	      requestR[226:224] != 3'h3 &&
	      requestR[226:224] != 3'h4) ?
	       ((guard__h19505 == 2'b10) ?
		  x__h19726[25] :
		  guard__h19505 == 2'b11) :
	       requestR[226:224] == 3'h3 && guard__h19505 != 2'd0 ;
  assign IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_OR_NO_ETC___d942 =
	     (requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
	      requestR[226:224] != 3'h3 &&
	      requestR[226:224] != 3'h4) ?
	       ((guard__h17853 == 2'b10) ?
		  IF_requestR_3_BIT_191_13_THEN_NEG_0b0_CONCAT_N_ETC___d925[24] :
		  guard__h17853 == 2'b11) :
	       ((requestR[226:224] == 3'h3) ?
		  guard__h17853 != 2'd0 :
		  requestR[226:224] == 3'h1 &&
		  IF_requestR_3_BIT_191_13_THEN_NEG_0b0_CONCAT_N_ETC___d925[56] &&
		  guard__h17853 != 2'd0) ;
  assign IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_OR_NO_ETC___d974 =
	     (requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
	      requestR[226:224] != 3'h3 &&
	      requestR[226:224] != 3'h4) ?
	       ((guard__h18407 == 2'b10) ?
		  x__h18596[25] :
		  guard__h18407 == 2'b11) :
	       ((requestR[226:224] == 3'h3) ?
		  guard__h18407 != 2'd0 :
		  requestR[226:224] == 3'h1 && x__h18596[56] &&
		  guard__h18407 != 2'd0) ;
  assign IF_requestR_3_BIT_191_13_THEN_0_ELSE_IF_reques_ETC___d714 =
	     requestR[191] ?
	       6'd0 :
	       (requestR[190] ?
		  6'd1 :
		  (requestR[189] ?
		     6'd2 :
		     (requestR[188] ?
			6'd3 :
			(requestR[187] ?
			   6'd4 :
			   (requestR[186] ?
			      6'd5 :
			      (requestR[185] ?
				 6'd6 :
				 (requestR[184] ?
				    6'd7 :
				    (requestR[183] ?
				       6'd8 :
				       (requestR[182] ?
					  6'd9 :
					  (requestR[181] ?
					     6'd10 :
					     (requestR[180] ?
						6'd11 :
						(requestR[179] ?
						   6'd12 :
						   (requestR[178] ?
						      6'd13 :
						      (requestR[177] ?
							 6'd14 :
							 (requestR[176] ?
							    6'd15 :
							    (requestR[175] ?
							       6'd16 :
							       (requestR[174] ?
								  6'd17 :
								  (requestR[173] ?
								     6'd18 :
								     (requestR[172] ?
									6'd19 :
									(requestR[171] ?
									   6'd20 :
									   (requestR[170] ?
									      6'd21 :
									      (requestR[169] ?
										 6'd22 :
										 (requestR[168] ?
										    6'd23 :
										    (requestR[167] ?
										       6'd24 :
										       (requestR[166] ?
											  6'd25 :
											  (requestR[165] ?
											     6'd26 :
											     (requestR[164] ?
												6'd27 :
												(requestR[163] ?
												   6'd28 :
												   (requestR[162] ?
												      6'd29 :
												      (requestR[161] ?
													 6'd30 :
													 (requestR[160] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign IF_requestR_3_BIT_191_13_THEN_2147483648_ELSE__ETC___d913 =
	     requestR[191] ? 32'h80000000 : 32'h7FFFFFFF ;
  assign IF_requestR_3_BIT_191_13_THEN_NEG_0b0_CONCAT_N_ETC___d925 =
	     requestR[191] ? -b__h17920 : b__h17920 ;
  assign IF_requestR_3_BIT_191_13_THEN_NEG_requestR_3_B_ETC___d566 =
	     (sfd__h5022[31] || sfd__h5022[30] || sfd__h5022[29] ||
	      sfd__h5022[28] ||
	      sfd__h5022[27] ||
	      sfd__h5022[26] ||
	      sfd__h5022[25] ||
	      sfd__h5022[24] ||
	      sfd__h5022[23] ||
	      sfd__h5022[22] ||
	      sfd__h5022[21] ||
	      sfd__h5022[20] ||
	      sfd__h5022[19] ||
	      sfd__h5022[18] ||
	      sfd__h5022[17] ||
	      sfd__h5022[16] ||
	      sfd__h5022[15] ||
	      sfd__h5022[14] ||
	      sfd__h5022[13] ||
	      sfd__h5022[12] ||
	      sfd__h5022[11] ||
	      sfd__h5022[10] ||
	      sfd__h5022[9] ||
	      sfd__h5022[8] ||
	      sfd__h5022[7] ||
	      sfd__h5022[6] ||
	      sfd__h5022[5] ||
	      sfd__h5022[4] ||
	      sfd__h5022[3] ||
	      sfd__h5022[2] ||
	      sfd__h5022[1] ||
	      sfd__h5022[0]) &&
	     (!_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d359 ||
	      !_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d361 &&
	      !_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d364 &&
	      _theResult___fst_exp__h11005 == 8'd255 &&
	      _theResult___fst_sfd__h11006 == 23'd0) ;
  assign IF_requestR_3_BIT_191_13_THEN_NEG_requestR_3_B_ETC___d569 =
	     (sfd__h5022[31] || sfd__h5022[30] || sfd__h5022[29] ||
	      sfd__h5022[28] ||
	      sfd__h5022[27] ||
	      sfd__h5022[26] ||
	      sfd__h5022[25] ||
	      sfd__h5022[24] ||
	      sfd__h5022[23] ||
	      sfd__h5022[22] ||
	      sfd__h5022[21] ||
	      sfd__h5022[20] ||
	      sfd__h5022[19] ||
	      sfd__h5022[18] ||
	      sfd__h5022[17] ||
	      sfd__h5022[16] ||
	      sfd__h5022[15] ||
	      sfd__h5022[14] ||
	      sfd__h5022[13] ||
	      sfd__h5022[12] ||
	      sfd__h5022[11] ||
	      sfd__h5022[10] ||
	      sfd__h5022[9] ||
	      sfd__h5022[8] ||
	      sfd__h5022[7] ||
	      sfd__h5022[6] ||
	      sfd__h5022[5] ||
	      sfd__h5022[4] ||
	      sfd__h5022[3] ||
	      sfd__h5022[2] ||
	      sfd__h5022[1] ||
	      sfd__h5022[0]) &&
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d359 &&
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d361 ;
  assign IF_requestR_3_BIT_191_13_THEN_NEG_requestR_3_B_ETC___d578 =
	     (sfd__h5022[31] || sfd__h5022[30] || sfd__h5022[29] ||
	      sfd__h5022[28] ||
	      sfd__h5022[27] ||
	      sfd__h5022[26] ||
	      sfd__h5022[25] ||
	      sfd__h5022[24] ||
	      sfd__h5022[23] ||
	      sfd__h5022[22] ||
	      sfd__h5022[21] ||
	      sfd__h5022[20] ||
	      sfd__h5022[19] ||
	      sfd__h5022[18] ||
	      sfd__h5022[17] ||
	      sfd__h5022[16] ||
	      sfd__h5022[15] ||
	      sfd__h5022[14] ||
	      sfd__h5022[13] ||
	      sfd__h5022[12] ||
	      sfd__h5022[11] ||
	      sfd__h5022[10] ||
	      sfd__h5022[9] ||
	      sfd__h5022[8] ||
	      sfd__h5022[7] ||
	      sfd__h5022[6] ||
	      sfd__h5022[5] ||
	      sfd__h5022[4] ||
	      sfd__h5022[3] ||
	      sfd__h5022[2] ||
	      sfd__h5022[1] ||
	      sfd__h5022[0]) &&
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d359 &&
	     !_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d361 &&
	     IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191__ETC___d575 ;
  assign IF_requestR_3_BIT_191_13_THEN_NOT_requestR_3_B_ETC___d1120 =
	     requestR[191] ?
	       !requestR_3_BITS_190_TO_183_04_ULE_requestR_3_B_ETC___d1109 ||
	       requestR_3_BITS_190_TO_183_04_EQ_requestR_3_BI_ETC___d1111 &&
	       !requestR_3_BITS_182_TO_160_06_ULE_requestR_3_B_ETC___d1112 :
	       requestR_3_BITS_190_TO_183_04_ULT_requestR_3_B_ETC___d1116 ||
	       requestR_3_BITS_190_TO_183_04_EQ_requestR_3_BI_ETC___d1111 &&
	       requestR_3_BITS_182_TO_160_06_ULT_requestR_3_B_ETC___d1117 ;
  assign IF_sfd___36138_BIT_7_THEN_2_ELSE_0__q18 =
	     sfd___3__h16138[7] ? 2'd2 : 2'd0 ;
  assign IF_sfd___36138_BIT_8_THEN_2_ELSE_0__q17 =
	     sfd___3__h16138[8] ? 2'd2 : 2'd0 ;
  assign IF_sfd___3926_BIT_7_THEN_2_ELSE_0__q4 =
	     sfd___3__h9926[7] ? 2'd2 : 2'd0 ;
  assign IF_sfd___3926_BIT_8_THEN_2_ELSE_0__q3 =
	     sfd___3__h9926[8] ? 2'd2 : 2'd0 ;
  assign IF_x8596_BIT_24_THEN_2_ELSE_0__q29 = x__h18596[24] ? 2'd2 : 2'd0 ;
  assign IF_x9726_BIT_24_THEN_2_ELSE_0__q30 = x__h19726[24] ? 2'd2 : 2'd0 ;
  assign NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d1016 =
	     NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d950 -
	     20'd1 ;
  assign NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d1018 =
	     (NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d1016 ^
	      20'h80000) <=
	     20'd524320 ;
  assign NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d918 =
	     -{ {12{requestR_BITS_190_TO_183_MINUS_127__q28[7]}},
		requestR_BITS_190_TO_183_MINUS_127__q28 } ;
  assign NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d950 =
	     NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d918 +
	     20'd32 ;
  assign NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d951 =
	     NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d950 -
	     20'd2 ;
  assign NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d953 =
	     (NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d951 ^
	      20'h80000) <=
	     20'd524320 ;
  assign NOT_IF_requestR_3_BIT_191_13_THEN_NEG_requestR_ETC___d363 =
	     !sfd__h5022[31] && !sfd__h5022[30] && !sfd__h5022[29] &&
	     !sfd__h5022[28] &&
	     !sfd__h5022[27] &&
	     !sfd__h5022[26] &&
	     !sfd__h5022[25] &&
	     !sfd__h5022[24] &&
	     !sfd__h5022[23] &&
	     !sfd__h5022[22] &&
	     !sfd__h5022[21] &&
	     !sfd__h5022[20] &&
	     !sfd__h5022[19] &&
	     !sfd__h5022[18] &&
	     !sfd__h5022[17] &&
	     !sfd__h5022[16] &&
	     !sfd__h5022[15] &&
	     !sfd__h5022[14] &&
	     !sfd__h5022[13] &&
	     !sfd__h5022[12] &&
	     !sfd__h5022[11] &&
	     !sfd__h5022[10] &&
	     !sfd__h5022[9] &&
	     !sfd__h5022[8] &&
	     !sfd__h5022[7] &&
	     !sfd__h5022[6] &&
	     !sfd__h5022[5] &&
	     !sfd__h5022[4] &&
	     !sfd__h5022[3] &&
	     !sfd__h5022[2] &&
	     !sfd__h5022[1] &&
	     !sfd__h5022[0] ||
	     !_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d359 ||
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d361 ;
  assign NOT_requestR_3_BITS_190_TO_183_04_EQ_0_14_20_O_ETC___d1060 =
	     (requestR[190:183] != 8'd0 || requestR[182:160] != 23'd0) &&
	     !NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d1016[19] &&
	     (!NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d1018 ||
	      guard__h19505 != 2'd0) ;
  assign NOT_requestR_3_BITS_190_TO_183_04_EQ_0_14_20_O_ETC___d995 =
	     (requestR[190:183] != 8'd0 || requestR[182:160] != 23'd0) &&
	     ((NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d918 ==
	       20'd1048545) ?
		_theResult_____2__h17855[32:31] != 2'b11 :
		NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d951[19] ||
		NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d953 &&
		IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_OR_NO_ETC___d974 &&
		x__h18596[56:25] == 32'h7FFFFFFF) ;
  assign NOT_requestR_3_BITS_190_TO_183_04_EQ_255_05_98_ETC___d1124 =
	     (requestR[190:183] != 8'd255 || requestR[182:160] == 23'd0) &&
	     (requestR[126:119] != 8'd255 || requestR[118:96] == 23'd0) &&
	     (requestR[190:183] != 8'd0 || requestR[182:160] != 23'd0 ||
	      requestR[126:119] != 8'd0 ||
	      requestR[118:96] != 23'd0) &&
	     (requestR[191] && !requestR[127] ||
	      (requestR[191] || !requestR[127]) &&
	      IF_requestR_3_BIT_191_13_THEN_NOT_requestR_3_B_ETC___d1120) ;
  assign NOT_requestR_3_BITS_190_TO_183_04_EQ_255_05_98_ETC___d1207 =
	     (requestR[190:183] != 8'd255 || requestR[182:160] == 23'd0) &&
	     (requestR[126:119] != 8'd255 || requestR[118:96] == 23'd0) &&
	     (requestR[191] && !requestR[127] ||
	      (requestR[191] || !requestR[127]) &&
	      IF_requestR_3_BIT_191_13_THEN_NOT_requestR_3_B_ETC___d1120 ||
	      requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_requ_ETC___d1186) ;
  assign NOT_requestR_3_BITS_190_TO_183_04_ULT_requestR_ETC___d1182 =
	     !requestR_3_BITS_190_TO_183_04_ULT_requestR_3_B_ETC___d1116 &&
	     (!requestR_3_BITS_190_TO_183_04_EQ_requestR_3_BI_ETC___d1111 ||
	      !requestR_3_BITS_182_TO_160_06_ULT_requestR_3_B_ETC___d1117) &&
	     requestR_3_BITS_190_TO_183_04_ULE_requestR_3_B_ETC___d1109 &&
	     (!requestR_3_BITS_190_TO_183_04_EQ_requestR_3_BI_ETC___d1111 ||
	      requestR_3_BITS_182_TO_160_06_ULE_requestR_3_B_ETC___d1112) ;
  assign NOT_requestR_3_BIT_191_13_88_AND_NOT_requestR__ETC___d807 =
	     !requestR[191] && !requestR[190] && !requestR[189] &&
	     !requestR[188] &&
	     !requestR[187] &&
	     !requestR[186] &&
	     !requestR[185] &&
	     !requestR[184] &&
	     !requestR[183] &&
	     !requestR[182] &&
	     !requestR[181] &&
	     !requestR[180] &&
	     !requestR[179] &&
	     !requestR[178] &&
	     !requestR[177] &&
	     !requestR[176] &&
	     !requestR[175] &&
	     !requestR[174] &&
	     !requestR[173] &&
	     !requestR[172] &&
	     !requestR[171] &&
	     !requestR[170] &&
	     !requestR[169] &&
	     !requestR[168] &&
	     !requestR[167] &&
	     !requestR[166] &&
	     !requestR[165] &&
	     !requestR[164] &&
	     !requestR[163] &&
	     !requestR[162] &&
	     !requestR[161] &&
	     !requestR[160] ||
	     !_32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d718 ||
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d719 ;
  assign NOT_verbosity_ULE_1_4___d25 = verbosity > 4'd1 ;
  assign _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d358 =
	     (9'd32 -
	      { 3'd0,
		IF_IF_requestR_3_BIT_191_13_THEN_NEG_requestR__ETC___d355 }) -
	     9'd1 ;
  assign _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d359 =
	     (_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d358 ^
	      9'h100) <=
	     9'd383 ;
  assign _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d361 =
	     (_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d358 ^
	      9'h100) <
	     9'd107 ;
  assign _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d364 =
	     (_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d358 ^
	      9'h100) <
	     9'd130 ;
  assign _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d717 =
	     (9'd32 -
	      { 3'd0,
		IF_requestR_3_BIT_191_13_THEN_0_ELSE_IF_reques_ETC___d714 }) -
	     9'd1 ;
  assign _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d718 =
	     (_32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d717 ^
	      9'h100) <=
	     9'd383 ;
  assign _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d719 =
	     (_32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d717 ^
	      9'h100) <
	     9'd107 ;
  assign _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d720 =
	     (_32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d717 ^
	      9'h100) <
	     9'd130 ;
  assign _theResult_____2__h17855 =
	     IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_OR_NO_ETC___d942 ?
	       out1___1__h18347 :
	       IF_requestR_3_BIT_191_13_THEN_NEG_0b0_CONCAT_N_ETC___d925[56:24] ;
  assign _theResult___exp__h10352 =
	     (sfd__h9953[24] || sfd__h9953[24:23] == 2'b01) ? 8'd1 : 8'd0 ;
  assign _theResult___exp__h10905 =
	     sfd__h10496[24] ?
	       ((x__h10481[7:0] == 8'd254) ?
		  8'd255 :
		  din_inc___2_exp__h11048) :
	       ((x__h10481[7:0] == 8'd0 && sfd__h10496[24:23] == 2'b01) ?
		  8'd1 :
		  x__h10481[7:0]) ;
  assign _theResult___exp__h16561 =
	     (sfd__h16165[24] || sfd__h16165[24:23] == 2'b01) ? 8'd1 : 8'd0 ;
  assign _theResult___exp__h17113 =
	     sfd__h16704[24] ?
	       ((x__h16689[7:0] == 8'd254) ?
		  8'd255 :
		  din_inc___2_exp__h17251) :
	       ((x__h16689[7:0] == 8'd0 && sfd__h16704[24:23] == 2'b01) ?
		  8'd1 :
		  x__h16689[7:0]) ;
  assign _theResult___fst_exp__h10449 =
	     (requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
	      requestR[226:224] != 3'h3 &&
	      requestR[226:224] != 3'h4) ?
	       CASE_guard936_0b0_0_0b1_0_0b10_out_exp0355_0b1_ETC__q10 :
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d450 ;
  assign _theResult___fst_exp__h11002 =
	     (requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
	      requestR[226:224] != 3'h3 &&
	      requestR[226:224] != 3'h4) ?
	       CASE_guard0466_0b0_x0481_BITS_7_TO_0_0b1_x0481_ETC__q12 :
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d479 ;
  assign _theResult___fst_exp__h11005 =
	     (x__h10481[7:0] == 8'd255) ?
	       x__h10481[7:0] :
	       _theResult___fst_exp__h11002 ;
  assign _theResult___fst_exp__h16657 =
	     (requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
	      requestR[226:224] != 3'h3 &&
	      requestR[226:224] != 3'h4) ?
	       CASE_guard6148_0b0_0_0b1_0_0b10_out_exp6564_0b_ETC__q19 :
	       CASE_requestR_BITS_226_TO_224_0x3_IF_guard6148_ETC__q21 ;
  assign _theResult___fst_exp__h17209 =
	     (requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
	      requestR[226:224] != 3'h3 &&
	      requestR[226:224] != 3'h4) ?
	       CASE_guard6674_0b0_x6689_BITS_7_TO_0_0b1_x6689_ETC__q23 :
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d798 ;
  assign _theResult___fst_exp__h17212 =
	     (x__h16689[7:0] == 8'd255) ?
	       x__h16689[7:0] :
	       _theResult___fst_exp__h17209 ;
  assign _theResult___fst_sfd__h10450 =
	     (requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
	      requestR[226:224] != 3'h3 &&
	      requestR[226:224] != 3'h4) ?
	       CASE_guard936_0b0_sfd___3926_BITS_31_TO_9_0b1__ETC__q14 :
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d502 ;
  assign _theResult___fst_sfd__h11003 =
	     (requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
	      requestR[226:224] != 3'h3 &&
	      requestR[226:224] != 3'h4) ?
	       CASE_guard0466_0b0_sfd___3926_BITS_30_TO_8_0b1_ETC__q16 :
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d520 ;
  assign _theResult___fst_sfd__h11006 =
	     (x__h10481[7:0] == 8'd255) ?
	       sfd___3__h9926[30:8] :
	       _theResult___fst_sfd__h11003 ;
  assign _theResult___fst_sfd__h16658 =
	     (requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
	      requestR[226:224] != 3'h3 &&
	      requestR[226:224] != 3'h4) ?
	       CASE_guard6148_0b0_sfd___36138_BITS_31_TO_9_0b_ETC__q27 :
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d821 ;
  assign _theResult___fst_sfd__h17210 =
	     (requestR[226:224] != 3'h1 && requestR[226:224] != 3'h2 &&
	      requestR[226:224] != 3'h3 &&
	      requestR[226:224] != 3'h4) ?
	       CASE_guard6674_0b0_sfd___36138_BITS_30_TO_8_0b_ETC__q25 :
	       IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d836 ;
  assign _theResult___fst_sfd__h17213 =
	     (x__h16689[7:0] == 8'd255) ?
	       sfd___3__h16138[30:8] :
	       _theResult___fst_sfd__h17210 ;
  assign _theResult___sfd__h10353 =
	     sfd__h9953[24] ? sfd__h9953[23:1] : sfd__h9953[22:0] ;
  assign _theResult___sfd__h10906 =
	     sfd__h10496[24] ?
	       ((x__h10481[7:0] == 8'd254) ? 23'd0 : sfd__h10496[23:1]) :
	       sfd__h10496[22:0] ;
  assign _theResult___sfd__h16562 =
	     sfd__h16165[24] ? sfd__h16165[23:1] : sfd__h16165[22:0] ;
  assign _theResult___sfd__h17114 =
	     sfd__h16704[24] ?
	       ((x__h16689[7:0] == 8'd254) ? 23'd0 : sfd__h16704[23:1]) :
	       sfd__h16704[22:0] ;
  assign _theResult___snd_fst_exp__h11008 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d364 ?
	       _theResult___fst_exp__h10449 :
	       _theResult___fst_exp__h11005 ;
  assign _theResult___snd_fst_exp__h11011 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d361 ?
	       8'd0 :
	       _theResult___snd_fst_exp__h11008 ;
  assign _theResult___snd_fst_exp__h11014 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d359 ?
	       _theResult___snd_fst_exp__h11011 :
	       8'd255 ;
  assign _theResult___snd_fst_exp__h17215 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d720 ?
	       _theResult___fst_exp__h16657 :
	       _theResult___fst_exp__h17212 ;
  assign _theResult___snd_fst_exp__h17218 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d719 ?
	       8'd0 :
	       _theResult___snd_fst_exp__h17215 ;
  assign _theResult___snd_fst_exp__h17221 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d718 ?
	       _theResult___snd_fst_exp__h17218 :
	       8'd255 ;
  assign _theResult___snd_fst_sfd__h11009 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d364 ?
	       _theResult___fst_sfd__h10450 :
	       _theResult___fst_sfd__h11006 ;
  assign _theResult___snd_fst_sfd__h17216 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d720 ?
	       _theResult___fst_sfd__h16658 :
	       _theResult___fst_sfd__h17213 ;
  assign b__h17920 = { value__h17922, 32'd0 } ;
  assign din_inc___2_exp__h11048 = x__h10481[7:0] + 8'd1 ;
  assign din_inc___2_exp__h17251 = x__h16689[7:0] + 8'd1 ;
  assign guard__h10466 =
	     { IF_sfd___3926_BIT_7_THEN_2_ELSE_0__q4[1],
	       { sfd___3__h9926[6:0], 24'd0 } != 31'd0 } ;
  assign guard__h16148 =
	     { IF_sfd___36138_BIT_8_THEN_2_ELSE_0__q17[1],
	       { sfd___3__h16138[7:0], 23'd0 } != 31'd0 } ;
  assign guard__h16674 =
	     { IF_sfd___36138_BIT_7_THEN_2_ELSE_0__q18[1],
	       { sfd___3__h16138[6:0], 24'd0 } != 31'd0 } ;
  assign guard__h17853 =
	     { IF_requestR_3_BIT_191_13_THEN_NEG_0b0_CONCAT_N_ETC___d925[23],
	       { IF_requestR_3_BIT_191_13_THEN_NEG_0b0_CONCAT_N_ETC___d925[22:0],
		 33'd0 } !=
	       56'd0 } ;
  assign guard__h18407 =
	     { IF_x8596_BIT_24_THEN_2_ELSE_0__q29[1],
	       { x__h18596[23:0], 32'd0 } != 56'd0 } ;
  assign guard__h19505 =
	     { IF_x9726_BIT_24_THEN_2_ELSE_0__q30[1],
	       { x__h19726[23:0], 32'd0 } != 56'd0 } ;
  assign guard__h9936 =
	     { IF_sfd___3926_BIT_8_THEN_2_ELSE_0__q3[1],
	       { sfd___3__h9926[7:0], 23'd0 } != 31'd0 } ;
  assign out1___1__h18347 =
	     IF_requestR_3_BIT_191_13_THEN_NEG_0b0_CONCAT_N_ETC___d925[56:24] +
	     33'd1 ;
  assign out_exp__h10355 =
	     sfd___3__h9926[9] ? _theResult___exp__h10352 : 8'd0 ;
  assign out_exp__h10908 =
	     sfd___3__h9926[8] ? _theResult___exp__h10905 : x__h10481[7:0] ;
  assign out_exp__h16564 =
	     sfd___3__h16138[9] ? _theResult___exp__h16561 : 8'd0 ;
  assign out_exp__h17116 =
	     sfd___3__h16138[8] ? _theResult___exp__h17113 : x__h16689[7:0] ;
  assign out_sfd__h10356 =
	     sfd___3__h9926[9] ?
	       _theResult___sfd__h10353 :
	       sfd___3__h9926[31:9] ;
  assign out_sfd__h10909 =
	     sfd___3__h9926[8] ?
	       _theResult___sfd__h10906 :
	       sfd___3__h9926[30:8] ;
  assign out_sfd__h16565 =
	     sfd___3__h16138[9] ?
	       _theResult___sfd__h16562 :
	       sfd___3__h16138[31:9] ;
  assign out_sfd__h17117 =
	     sfd___3__h16138[8] ?
	       _theResult___sfd__h17114 :
	       sfd___3__h16138[30:8] ;
  assign requestR_3_BITS_126_TO_119_077_EQ_0_093_AND_re_ETC___d1100 =
	     requestR[126:119] == 8'd0 && requestR[118:96] == 23'd0 &&
	     requestR[127] &&
	     requestR[190:183] == 8'd0 &&
	     requestR[182:160] == 23'd0 &&
	     !requestR[191] ;
  assign requestR_3_BITS_182_TO_160_06_ULE_requestR_3_B_ETC___d1112 =
	     requestR[182:160] <= requestR[118:96] ;
  assign requestR_3_BITS_182_TO_160_06_ULT_requestR_3_B_ETC___d1117 =
	     requestR[182:160] < requestR[118:96] ;
  assign requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_requ_ETC___d1096 =
	     requestR[190:183] == 8'd0 && requestR[182:160] == 23'd0 &&
	     requestR[191] &&
	     requestR[126:119] == 8'd0 &&
	     requestR[118:96] == 23'd0 &&
	     !requestR[127] ;
  assign requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_requ_ETC___d1186 =
	     requestR[190:183] == 8'd0 && requestR[182:160] == 23'd0 &&
	     requestR[126:119] == 8'd0 &&
	     requestR[118:96] == 23'd0 ||
	     (!requestR[191] || requestR[127]) &&
	     (requestR[191] || !requestR[127]) &&
	     (requestR[191] ?
		requestR_3_BITS_190_TO_183_04_ULE_requestR_3_B_ETC___d1181 :
		NOT_requestR_3_BITS_190_TO_183_04_ULT_requestR_ETC___d1182) ;
  assign requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_0__ETC___d1055 =
	     requestR[190:183] == 8'd255 && requestR[182:160] != 23'd0 ||
	     requestR[190:183] == 8'd255 && requestR[182:160] == 23'd0 ||
	     (requestR[190:183] != 8'd0 || requestR[182:160] != 23'd0) &&
	     (NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d1016[19] ||
	      NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d1018 &&
	      IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_OR_NO_ETC___d1037 &&
	      x__h19726[56:25] == 32'hFFFFFFFF) ;
  assign requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_0__ETC___d1066 =
	     { requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_0__ETC___d1055,
	       3'd0,
	       (requestR[190:183] != 8'd255 || requestR[182:160] == 23'd0) &&
	       (requestR[190:183] != 8'd255 || requestR[182:160] != 23'd0) &&
	       NOT_requestR_3_BITS_190_TO_183_04_EQ_0_14_20_O_ETC___d1060 } ==
	     5'd0 ||
	     requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_0__ETC___d1055 ;
  assign requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1086 =
	     requestR[190:183] == 8'd255 && requestR[182:160] != 23'd0 &&
	     !requestR[182] &&
	     requestR[126:119] == 8'd255 &&
	     requestR[118:96] != 23'd0 &&
	     !requestR[118] ;
  assign requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1134 =
	     requestR[190:183] == 8'd255 && requestR[182:160] != 23'd0 &&
	     !requestR[182] ||
	     requestR[126:119] == 8'd255 && requestR[118:96] != 23'd0 &&
	     !requestR[118] ;
  assign requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1171 =
	     requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1134 ||
	     requestR[190:183] == 8'd255 && requestR[182] ||
	     requestR[126:119] == 8'd255 && requestR[118] ;
  assign requestR_3_BITS_190_TO_183_04_EQ_requestR_3_BI_ETC___d1111 =
	     requestR[190:183] == requestR[126:119] ;
  assign requestR_3_BITS_190_TO_183_04_ULE_requestR_3_B_ETC___d1109 =
	     requestR[190:183] <= requestR[126:119] ;
  assign requestR_3_BITS_190_TO_183_04_ULE_requestR_3_B_ETC___d1181 =
	     requestR_3_BITS_190_TO_183_04_ULE_requestR_3_B_ETC___d1109 &&
	     (!requestR_3_BITS_190_TO_183_04_EQ_requestR_3_BI_ETC___d1111 ||
	      requestR_3_BITS_182_TO_160_06_ULE_requestR_3_B_ETC___d1112) &&
	     !requestR_3_BITS_190_TO_183_04_ULT_requestR_3_B_ETC___d1116 &&
	     (!requestR_3_BITS_190_TO_183_04_EQ_requestR_3_BI_ETC___d1111 ||
	      !requestR_3_BITS_182_TO_160_06_ULT_requestR_3_B_ETC___d1117) ;
  assign requestR_3_BITS_190_TO_183_04_ULT_requestR_3_B_ETC___d1116 =
	     requestR[190:183] < requestR[126:119] ;
  assign requestR_3_BIT_191_13_OR_requestR_3_BIT_190_89_ETC___d881 =
	     (requestR[191] || requestR[190] || requestR[189] ||
	      requestR[188] ||
	      requestR[187] ||
	      requestR[186] ||
	      requestR[185] ||
	      requestR[184] ||
	      requestR[183] ||
	      requestR[182] ||
	      requestR[181] ||
	      requestR[180] ||
	      requestR[179] ||
	      requestR[178] ||
	      requestR[177] ||
	      requestR[176] ||
	      requestR[175] ||
	      requestR[174] ||
	      requestR[173] ||
	      requestR[172] ||
	      requestR[171] ||
	      requestR[170] ||
	      requestR[169] ||
	      requestR[168] ||
	      requestR[167] ||
	      requestR[166] ||
	      requestR[165] ||
	      requestR[164] ||
	      requestR[163] ||
	      requestR[162] ||
	      requestR[161] ||
	      requestR[160]) &&
	     (!_32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d718 ||
	      !_32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d719 &&
	      !_32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d720 &&
	      _theResult___fst_exp__h17212 == 8'd255 &&
	      _theResult___fst_sfd__h17213 == 23'd0) ;
  assign requestR_3_BIT_191_13_OR_requestR_3_BIT_190_89_ETC___d884 =
	     (requestR[191] || requestR[190] || requestR[189] ||
	      requestR[188] ||
	      requestR[187] ||
	      requestR[186] ||
	      requestR[185] ||
	      requestR[184] ||
	      requestR[183] ||
	      requestR[182] ||
	      requestR[181] ||
	      requestR[180] ||
	      requestR[179] ||
	      requestR[178] ||
	      requestR[177] ||
	      requestR[176] ||
	      requestR[175] ||
	      requestR[174] ||
	      requestR[173] ||
	      requestR[172] ||
	      requestR[171] ||
	      requestR[170] ||
	      requestR[169] ||
	      requestR[168] ||
	      requestR[167] ||
	      requestR[166] ||
	      requestR[165] ||
	      requestR[164] ||
	      requestR[163] ||
	      requestR[162] ||
	      requestR[161] ||
	      requestR[160]) &&
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d718 &&
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d719 ;
  assign requestR_3_BIT_191_13_OR_requestR_3_BIT_190_89_ETC___d893 =
	     (requestR[191] || requestR[190] || requestR[189] ||
	      requestR[188] ||
	      requestR[187] ||
	      requestR[186] ||
	      requestR[185] ||
	      requestR[184] ||
	      requestR[183] ||
	      requestR[182] ||
	      requestR[181] ||
	      requestR[180] ||
	      requestR[179] ||
	      requestR[178] ||
	      requestR[177] ||
	      requestR[176] ||
	      requestR[175] ||
	      requestR[174] ||
	      requestR[173] ||
	      requestR[172] ||
	      requestR[171] ||
	      requestR[170] ||
	      requestR[169] ||
	      requestR[168] ||
	      requestR[167] ||
	      requestR[166] ||
	      requestR[165] ||
	      requestR[164] ||
	      requestR[163] ||
	      requestR[162] ||
	      requestR[161] ||
	      requestR[160]) &&
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d718 &&
	     !_32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d719 &&
	     IF_32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13__ETC___d890 ;
  assign requestR_BITS_190_TO_183_MINUS_127__q28 =
	     requestR[190:183] - 8'd127 ;
  assign requestR_BITS_191_TO_160__q2 = requestR[191:160] ;
  assign requestR_BITS_31_TO_16__q1 = requestR[31:16] ;
  assign res___1__h29372 =
	     (requestR[190:183] == 8'd255 && requestR[182]) ?
	       64'd512 :
	       64'd256 ;
  assign res___1__h29607 = requestR[191] ? 64'd1 : 64'd128 ;
  assign res___1__h29617 = requestR[191] ? 64'd8 : 64'd16 ;
  assign res___1__h29636 = requestR[191] ? 64'd4 : 64'd32 ;
  assign res__h20762 = { 32'hFFFFFFFF, requestR[127:96] } ;
  assign res__h26488 =
	     ((requestR[190:183] != 8'd255 || requestR[182:160] == 23'd0) &&
	      (requestR[126:119] != 8'd255 || requestR[118:96] == 23'd0) &&
	      requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_requ_ETC___d1186) ?
	       64'd1 :
	       64'd0 ;
  assign res__h28000 =
	     NOT_requestR_3_BITS_190_TO_183_04_EQ_255_05_98_ETC___d1124 ?
	       64'd1 :
	       64'd0 ;
  assign res__h29100 =
	     NOT_requestR_3_BITS_190_TO_183_04_EQ_255_05_98_ETC___d1207 ?
	       64'd1 :
	       64'd0 ;
  assign res__h29652 = requestR[191] ? 64'd2 : 64'd64 ;
  assign res__h29856 = { 32'hFFFFFFFF, fpu$server_core_response_get[36:5] } ;
  assign res__h30298 =
	     { 48'hFFFFFFFF0000, positCore$server_core_response_get[20:5] } ;
  assign res__h30353 =
	     { 32'hFFFFFFFF, positCore$server_core_response_get[36:5] } ;
  assign sfd___3__h16138 =
	     requestR[191:160] <<
	     IF_requestR_3_BIT_191_13_THEN_0_ELSE_IF_reques_ETC___d714 ;
  assign sfd___3__h9926 =
	     sfd__h5022 <<
	     IF_IF_requestR_3_BIT_191_13_THEN_NEG_requestR__ETC___d355 ;
  assign sfd__h10496 =
	     { 1'b0, x__h10481[7:0] != 8'd0, sfd___3__h9926[30:8] } + 25'd1 ;
  assign sfd__h16165 = { 2'd0, sfd___3__h16138[31:9] } + 25'd1 ;
  assign sfd__h16704 =
	     { 1'b0, x__h16689[7:0] != 8'd0, sfd___3__h16138[30:8] } + 25'd1 ;
  assign sfd__h5022 = requestR[191] ? -requestR[191:160] : requestR[191:160] ;
  assign sfd__h9953 = { 2'd0, sfd___3__h9926[31:9] } + 25'd1 ;
  assign value__h17922 =
	     { 1'b0, requestR[190:183] != 8'd0, requestR[182:160] } ;
  assign x__h10481 =
	     _32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191_13__ETC___d358 +
	     9'd127 ;
  assign x__h11174 =
	     { 2'd0,
	       requestR[191:160] != 32'd0 &&
	       IF_requestR_3_BIT_191_13_THEN_NEG_requestR_3_B_ETC___d566,
	       requestR[191:160] != 32'd0 &&
	       IF_requestR_3_BIT_191_13_THEN_NEG_requestR_3_B_ETC___d569,
	       requestR[191:160] != 32'd0 &&
	       IF_requestR_3_BIT_191_13_THEN_NEG_requestR_3_B_ETC___d578 } ;
  assign x__h11497 =
	     { 33'h1FFFFFFFE,
	       (requestR[191:160] == 32'd0) ?
		 8'd0 :
		 _theResult___snd_fst_exp__h17221,
	       (requestR[191:160] == 32'd0 ||
		NOT_requestR_3_BIT_191_13_88_AND_NOT_requestR__ETC___d807) ?
		 23'd0 :
		 _theResult___snd_fst_sfd__h17216 } ;
  assign x__h16689 =
	     _32_MINUS_0_CONCAT_IF_requestR_3_BIT_191_13_THE_ETC___d717 +
	     9'd127 ;
  assign x__h17355 =
	     { 2'd0,
	       requestR[191:160] != 32'd0 &&
	       requestR_3_BIT_191_13_OR_requestR_3_BIT_190_89_ETC___d881,
	       requestR[191:160] != 32'd0 &&
	       requestR_3_BIT_191_13_OR_requestR_3_BIT_190_89_ETC___d884,
	       requestR[191:160] != 32'd0 &&
	       requestR_3_BIT_191_13_OR_requestR_3_BIT_190_89_ETC___d893 } ;
  assign x__h17674 = { {32{x__h17677[31]}}, x__h17677 } ;
  assign x__h17677 =
	     (requestR[190:183] == 8'd255 && requestR[182:160] != 23'd0 ||
	      !requestR[191] && requestR[190:183] == 8'd255 &&
	      requestR[182:160] == 23'd0) ?
	       32'h7FFFFFFF :
	       IF_requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_ETC___d984 ;
  assign x__h18596 =
	     IF_requestR_3_BIT_191_13_THEN_NEG_0b0_CONCAT_N_ETC___d925 >>
	     NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d951 |
	     ~(57'h1FFFFFFFFFFFFFF >>
	       NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d951) &
	     {57{IF_requestR_3_BIT_191_13_THEN_NEG_0b0_CONCAT_N_ETC___d925[56]}} ;
  assign x__h19010 =
	     { requestR[190:183] == 8'd255 && requestR[182:160] != 23'd0 ||
	       requestR[190:183] == 8'd255 && requestR[182:160] == 23'd0 ||
	       NOT_requestR_3_BITS_190_TO_183_04_EQ_0_14_20_O_ETC___d995,
	       3'd0,
	       (requestR[190:183] != 8'd255 || requestR[182:160] == 23'd0) &&
	       (requestR[190:183] != 8'd255 || requestR[182:160] != 23'd0) &&
	       (requestR[190:183] != 8'd0 || requestR[182:160] != 23'd0) &&
	       IF_NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINU_ETC___d1006 } ;
  assign x__h19302 = { {32{x__h19305[31]}}, x__h19305 } ;
  assign x__h19305 =
	     (requestR[190:183] == 8'd255 && requestR[182:160] != 23'd0 ||
	      !requestR[191] && requestR[190:183] == 8'd255 &&
	      requestR[182:160] == 23'd0) ?
	       32'hFFFFFFFF :
	       (requestR[191] ?
		  32'd0 :
		  ((requestR[190:183] == 8'd255 &&
		    requestR[182:160] == 23'd0) ?
		     32'hFFFFFFFF :
		     IF_requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_r_ETC___d1045)) ;
  assign x__h19726 =
	     { requestR[190:183] != 8'd0, requestR[182:160], 33'd0 } >>
	     NEG_SEXT_requestR_3_BITS_190_TO_183_04_MINUS_1_ETC___d1016 ;
  assign x__h19804 =
	     { requestR[191] ?
		 requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_0__ETC___d1066 :
		 requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_0__ETC___d1055,
	       3'd0,
	       (requestR[190:183] != 8'd255 || requestR[182:160] == 23'd0) &&
	       (requestR[190:183] != 8'd255 || requestR[182:160] != 23'd0) &&
	       NOT_requestR_3_BITS_190_TO_183_04_EQ_0_14_20_O_ETC___d1060 } ;
  assign x__h20086 =
	     requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1086 ?
	       64'hFFFFFFFF7FC00000 :
	       ((requestR[190:183] == 8'd255 && requestR[182:160] != 23'd0 &&
		 !requestR[182]) ?
		  res__h20762 :
		  IF_requestR_3_BITS_126_TO_119_077_EQ_255_078_A_ETC___d1131) ;
  assign x__h22118 =
	     { requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1134,
	       4'd0 } ;
  assign x__h22745 =
	     requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1086 ?
	       64'hFFFFFFFF7FC00000 :
	       ((requestR[190:183] == 8'd255 && requestR[182:160] != 23'd0 &&
		 !requestR[182]) ?
		  res__h20762 :
		  IF_requestR_3_BITS_126_TO_119_077_EQ_255_078_A_ETC___d1148) ;
  assign x__h25450 =
	     { {32{requestR_BITS_191_TO_160__q2[31]}},
	       requestR_BITS_191_TO_160__q2 } ;
  assign x__h25622 =
	     requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1171 ?
	       64'd0 :
	       res__h26488 ;
  assign x__h27134 =
	     requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1171 ?
	       64'd0 :
	       res__h28000 ;
  assign x__h28019 =
	     { requestR[190:183] == 8'd255 && requestR[182:160] != 23'd0 ||
	       requestR[126:119] == 8'd255 && requestR[118:96] != 23'd0,
	       4'd0 } ;
  assign x__h28234 =
	     requestR_3_BITS_190_TO_183_04_EQ_255_05_AND_NO_ETC___d1171 ?
	       64'd0 :
	       res__h29100 ;
  assign x__h29352 =
	     (requestR[190:183] == 8'd255 && requestR[182:160] != 23'd0) ?
	       res___1__h29372 :
	       ((requestR[190:183] == 8'd255 && requestR[182:160] == 23'd0) ?
		  res___1__h29607 :
		  IF_requestR_3_BITS_190_TO_183_04_EQ_0_14_AND_r_ETC___d1221) ;
  assign x__h30266 =
	     (positCore$server_core_response_get[70:69] != 2'd0 &&
	      positCore$server_core_response_get[70:69] != 2'd1) ?
	       res__h30298 :
	       ((positCore$server_core_response_get[70:69] == 2'd1) ?
		  ((positCore$server_core_response_get[35:28] == 8'd255 &&
		    positCore$server_core_response_get[27:5] != 23'd0) ?
		     64'hFFFFFFFF7FC00000 :
		     res__h30353) :
		  64'd0) ;
  assign x__h4142 = { 32'hFFFFFFFF, requestR[191:160] } ;
  assign x__h4276 =
	     { {48{requestR_BITS_31_TO_16__q1[15]}},
	       requestR_BITS_31_TO_16__q1 } ;
  assign x__h4489 = { 32'hFFFFFFFF, x__h4496 } ;
  assign x__h4496 = { requestR[127], requestR[190:160] } ;
  assign x__h4655 = { 32'hFFFFFFFF, x__h4662 } ;
  assign x__h4662 = { !requestR[127], requestR[190:160] } ;
  assign x__h4823 = { 32'hFFFFFFFF, x__h4830 } ;
  assign x__h4830 = { requestR[191] != requestR[127], requestR[190:160] } ;
  assign x__h5001 = { 32'hFFFFFFFF, x__h5007 } ;
  assign x__h5007 =
	     { requestR[191:160] != 32'd0 &&
	       (NOT_IF_requestR_3_BIT_191_13_THEN_NEG_requestR_ETC___d363 ?
		  requestR[191] :
		  IF_32_MINUS_0_CONCAT_IF_IF_requestR_3_BIT_191__ETC___d425),
	       IF_requestR_3_BITS_191_TO_160_09_EQ_0_25_OR_NO_ETC___d485,
	       (requestR[191:160] == 32'd0 ||
		NOT_IF_requestR_3_BIT_191_13_THEN_NEG_requestR_ETC___d363) ?
		 23'd0 :
		 _theResult___snd_fst_sfd__h11009 } ;
  always@(fpu$server_core_response_get or res__h29856)
  begin
    case (fpu$server_core_response_get[70:69])
      2'd0:
	  x__h29775 =
	      (fpu$server_core_response_get[67:57] == 11'd2047 &&
	       fpu$server_core_response_get[56:5] != 52'd0) ?
		64'h7FF8000000000000 :
		fpu$server_core_response_get[68:5];
      2'd1:
	  x__h29775 =
	      (fpu$server_core_response_get[35:28] == 8'd255 &&
	       fpu$server_core_response_get[27:5] != 23'd0) ?
		64'hFFFFFFFF7FC00000 :
		res__h29856;
      default: x__h29775 = 64'd0;
    endcase
  end
  always@(requestR)
  begin
    case (requestR[226:224])
      3'h0:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42 =
	      requestR[226:224];
      3'h1: IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42 = 3'd4;
      3'h2: IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42 = 3'd3;
      3'h3: IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42 = 3'd2;
      3'h4: IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42 = 3'd1;
      default: IF_requestR_3_BITS_226_TO_224_2_EQ_0x0_3_THEN__ETC___d42 =
		   3'd0;
    endcase
  end
  always@(guard__h9936 or requestR)
  begin
    case (guard__h9936)
      2'b0, 2'b01, 2'b10:
	  CASE_guard936_0b0_requestR_BIT_191_0b1_request_ETC__q5 =
	      requestR[191];
      2'd3:
	  CASE_guard936_0b0_requestR_BIT_191_0b1_request_ETC__q5 =
	      guard__h9936 == 2'b11 && requestR[191];
    endcase
  end
  always@(requestR or guard__h9936)
  begin
    case (requestR[226:224])
      3'h2, 3'h3:
	  CASE_requestR_BITS_226_TO_224_0x2_requestR_BIT_ETC__q6 =
	      requestR[191];
      3'h4:
	  CASE_requestR_BITS_226_TO_224_0x2_requestR_BIT_ETC__q6 =
	      (guard__h9936 == 2'b0) ?
		requestR[191] :
		(guard__h9936 == 2'b01 || guard__h9936 == 2'b10 ||
		 guard__h9936 == 2'b11) &&
		requestR[191];
      default: CASE_requestR_BITS_226_TO_224_0x2_requestR_BIT_ETC__q6 =
		   requestR[226:224] == 3'h1 && requestR[191];
    endcase
  end
  always@(guard__h10466 or requestR)
  begin
    case (guard__h10466)
      2'b0, 2'b01, 2'b10:
	  CASE_guard0466_0b0_requestR_BIT_191_0b1_reques_ETC__q7 =
	      requestR[191];
      2'd3:
	  CASE_guard0466_0b0_requestR_BIT_191_0b1_reques_ETC__q7 =
	      guard__h10466 == 2'b11 && requestR[191];
    endcase
  end
  always@(requestR or guard__h10466)
  begin
    case (requestR[226:224])
      3'h2, 3'h3:
	  CASE_requestR_BITS_226_TO_224_0x2_requestR_BIT_ETC__q8 =
	      requestR[191];
      3'h4:
	  CASE_requestR_BITS_226_TO_224_0x2_requestR_BIT_ETC__q8 =
	      (guard__h10466 == 2'b0) ?
		requestR[191] :
		(guard__h10466 == 2'b01 || guard__h10466 == 2'b10 ||
		 guard__h10466 == 2'b11) &&
		requestR[191];
      default: CASE_requestR_BITS_226_TO_224_0x2_requestR_BIT_ETC__q8 =
		   requestR[226:224] == 3'h1 && requestR[191];
    endcase
  end
  always@(guard__h9936 or _theResult___exp__h10352)
  begin
    case (guard__h9936)
      2'b0: CASE_guard936_0b0_0_0b1_theResult___exp0352_0b_ETC__q9 = 8'd0;
      2'b01, 2'b10, 2'b11:
	  CASE_guard936_0b0_0_0b1_theResult___exp0352_0b_ETC__q9 =
	      _theResult___exp__h10352;
    endcase
  end
  always@(requestR or
	  IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d447 or
	  guard__h9936 or
	  _theResult___exp__h10352 or
	  CASE_guard936_0b0_0_0b1_theResult___exp0352_0b_ETC__q9)
  begin
    case (requestR[226:224])
      3'h2:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d450 =
	      IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d447;
      3'h3:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d450 =
	      (guard__h9936 == 2'b0 || requestR[191]) ?
		8'd0 :
		_theResult___exp__h10352;
      3'h4:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d450 =
	      CASE_guard936_0b0_0_0b1_theResult___exp0352_0b_ETC__q9;
      default: IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d450 =
		   8'd0;
    endcase
  end
  always@(guard__h9936 or out_exp__h10355 or _theResult___exp__h10352)
  begin
    case (guard__h9936)
      2'b0, 2'b01:
	  CASE_guard936_0b0_0_0b1_0_0b10_out_exp0355_0b1_ETC__q10 = 8'd0;
      2'b10:
	  CASE_guard936_0b0_0_0b1_0_0b10_out_exp0355_0b1_ETC__q10 =
	      out_exp__h10355;
      2'b11:
	  CASE_guard936_0b0_0_0b1_0_0b10_out_exp0355_0b1_ETC__q10 =
	      _theResult___exp__h10352;
    endcase
  end
  always@(guard__h10466 or x__h10481 or _theResult___exp__h10905)
  begin
    case (guard__h10466)
      2'b0:
	  CASE_guard0466_0b0_x0481_BITS_7_TO_0_0b1_theRe_ETC__q11 =
	      x__h10481[7:0];
      2'b01, 2'b10, 2'b11:
	  CASE_guard0466_0b0_x0481_BITS_7_TO_0_0b1_theRe_ETC__q11 =
	      _theResult___exp__h10905;
    endcase
  end
  always@(requestR or
	  x__h10481 or
	  IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d475 or
	  IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d473 or
	  CASE_guard0466_0b0_x0481_BITS_7_TO_0_0b1_theRe_ETC__q11)
  begin
    case (requestR[226:224])
      3'h1:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d479 =
	      x__h10481[7:0];
      3'h2:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d479 =
	      IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d475;
      3'h3:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d479 =
	      IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d473;
      3'h4:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d479 =
	      CASE_guard0466_0b0_x0481_BITS_7_TO_0_0b1_theRe_ETC__q11;
      default: IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d479 =
		   8'd0;
    endcase
  end
  always@(guard__h10466 or
	  x__h10481 or out_exp__h10908 or _theResult___exp__h10905)
  begin
    case (guard__h10466)
      2'b0, 2'b01:
	  CASE_guard0466_0b0_x0481_BITS_7_TO_0_0b1_x0481_ETC__q12 =
	      x__h10481[7:0];
      2'b10:
	  CASE_guard0466_0b0_x0481_BITS_7_TO_0_0b1_x0481_ETC__q12 =
	      out_exp__h10908;
      2'b11:
	  CASE_guard0466_0b0_x0481_BITS_7_TO_0_0b1_x0481_ETC__q12 =
	      _theResult___exp__h10905;
    endcase
  end
  always@(guard__h9936 or sfd___3__h9926 or _theResult___sfd__h10353)
  begin
    case (guard__h9936)
      2'b0:
	  CASE_guard936_0b0_sfd___3926_BITS_31_TO_9_0b1__ETC__q13 =
	      sfd___3__h9926[31:9];
      2'b01, 2'b10, 2'b11:
	  CASE_guard936_0b0_sfd___3926_BITS_31_TO_9_0b1__ETC__q13 =
	      _theResult___sfd__h10353;
    endcase
  end
  always@(requestR or
	  sfd___3__h9926 or
	  IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d498 or
	  IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d496 or
	  CASE_guard936_0b0_sfd___3926_BITS_31_TO_9_0b1__ETC__q13)
  begin
    case (requestR[226:224])
      3'h1:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d502 =
	      sfd___3__h9926[31:9];
      3'h2:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d502 =
	      IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d498;
      3'h3:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d502 =
	      IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d496;
      3'h4:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d502 =
	      CASE_guard936_0b0_sfd___3926_BITS_31_TO_9_0b1__ETC__q13;
      default: IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d502 =
		   23'd0;
    endcase
  end
  always@(guard__h9936 or
	  sfd___3__h9926 or out_sfd__h10356 or _theResult___sfd__h10353)
  begin
    case (guard__h9936)
      2'b0, 2'b01:
	  CASE_guard936_0b0_sfd___3926_BITS_31_TO_9_0b1__ETC__q14 =
	      sfd___3__h9926[31:9];
      2'b10:
	  CASE_guard936_0b0_sfd___3926_BITS_31_TO_9_0b1__ETC__q14 =
	      out_sfd__h10356;
      2'b11:
	  CASE_guard936_0b0_sfd___3926_BITS_31_TO_9_0b1__ETC__q14 =
	      _theResult___sfd__h10353;
    endcase
  end
  always@(guard__h10466 or sfd___3__h9926 or _theResult___sfd__h10906)
  begin
    case (guard__h10466)
      2'b0:
	  CASE_guard0466_0b0_sfd___3926_BITS_30_TO_8_0b1_ETC__q15 =
	      sfd___3__h9926[30:8];
      2'b01, 2'b10, 2'b11:
	  CASE_guard0466_0b0_sfd___3926_BITS_30_TO_8_0b1_ETC__q15 =
	      _theResult___sfd__h10906;
    endcase
  end
  always@(requestR or
	  sfd___3__h9926 or
	  IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d516 or
	  IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d514 or
	  CASE_guard0466_0b0_sfd___3926_BITS_30_TO_8_0b1_ETC__q15)
  begin
    case (requestR[226:224])
      3'h1:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d520 =
	      sfd___3__h9926[30:8];
      3'h2:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d520 =
	      IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d516;
      3'h3:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d520 =
	      IF_IF_IF_requestR_3_BIT_191_13_THEN_NEG_reques_ETC___d514;
      3'h4:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d520 =
	      CASE_guard0466_0b0_sfd___3926_BITS_30_TO_8_0b1_ETC__q15;
      default: IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d520 =
		   23'd0;
    endcase
  end
  always@(guard__h10466 or
	  sfd___3__h9926 or out_sfd__h10909 or _theResult___sfd__h10906)
  begin
    case (guard__h10466)
      2'b0, 2'b01:
	  CASE_guard0466_0b0_sfd___3926_BITS_30_TO_8_0b1_ETC__q16 =
	      sfd___3__h9926[30:8];
      2'b10:
	  CASE_guard0466_0b0_sfd___3926_BITS_30_TO_8_0b1_ETC__q16 =
	      out_sfd__h10909;
      2'b11:
	  CASE_guard0466_0b0_sfd___3926_BITS_30_TO_8_0b1_ETC__q16 =
	      _theResult___sfd__h10906;
    endcase
  end
  always@(guard__h16148 or out_exp__h16564 or _theResult___exp__h16561)
  begin
    case (guard__h16148)
      2'b0, 2'b01:
	  CASE_guard6148_0b0_0_0b1_0_0b10_out_exp6564_0b_ETC__q19 = 8'd0;
      2'b10:
	  CASE_guard6148_0b0_0_0b1_0_0b10_out_exp6564_0b_ETC__q19 =
	      out_exp__h16564;
      2'b11:
	  CASE_guard6148_0b0_0_0b1_0_0b10_out_exp6564_0b_ETC__q19 =
	      _theResult___exp__h16561;
    endcase
  end
  always@(guard__h16148 or _theResult___exp__h16561)
  begin
    case (guard__h16148)
      2'b0: CASE_guard6148_0b0_0_0b1_theResult___exp6561_0_ETC__q20 = 8'd0;
      2'b01, 2'b10, 2'b11:
	  CASE_guard6148_0b0_0_0b1_theResult___exp6561_0_ETC__q20 =
	      _theResult___exp__h16561;
    endcase
  end
  always@(requestR or
	  guard__h16148 or
	  _theResult___exp__h16561 or
	  CASE_guard6148_0b0_0_0b1_theResult___exp6561_0_ETC__q20)
  begin
    case (requestR[226:224])
      3'h3:
	  CASE_requestR_BITS_226_TO_224_0x3_IF_guard6148_ETC__q21 =
	      (guard__h16148 == 2'b0) ? 8'd0 : _theResult___exp__h16561;
      3'h4:
	  CASE_requestR_BITS_226_TO_224_0x3_IF_guard6148_ETC__q21 =
	      CASE_guard6148_0b0_0_0b1_theResult___exp6561_0_ETC__q20;
      default: CASE_requestR_BITS_226_TO_224_0x3_IF_guard6148_ETC__q21 = 8'd0;
    endcase
  end
  always@(guard__h16674 or x__h16689 or _theResult___exp__h17113)
  begin
    case (guard__h16674)
      2'b0:
	  CASE_guard6674_0b0_x6689_BITS_7_TO_0_0b1_theRe_ETC__q22 =
	      x__h16689[7:0];
      2'b01, 2'b10, 2'b11:
	  CASE_guard6674_0b0_x6689_BITS_7_TO_0_0b1_theRe_ETC__q22 =
	      _theResult___exp__h17113;
    endcase
  end
  always@(requestR or
	  x__h16689 or
	  guard__h16674 or
	  _theResult___exp__h17113 or
	  CASE_guard6674_0b0_x6689_BITS_7_TO_0_0b1_theRe_ETC__q22)
  begin
    case (requestR[226:224])
      3'h1, 3'h2:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d798 =
	      x__h16689[7:0];
      3'h3:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d798 =
	      (guard__h16674 == 2'b0) ?
		x__h16689[7:0] :
		_theResult___exp__h17113;
      3'h4:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d798 =
	      CASE_guard6674_0b0_x6689_BITS_7_TO_0_0b1_theRe_ETC__q22;
      default: IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d798 =
		   8'd0;
    endcase
  end
  always@(guard__h16674 or
	  x__h16689 or out_exp__h17116 or _theResult___exp__h17113)
  begin
    case (guard__h16674)
      2'b0, 2'b01:
	  CASE_guard6674_0b0_x6689_BITS_7_TO_0_0b1_x6689_ETC__q23 =
	      x__h16689[7:0];
      2'b10:
	  CASE_guard6674_0b0_x6689_BITS_7_TO_0_0b1_x6689_ETC__q23 =
	      out_exp__h17116;
      2'b11:
	  CASE_guard6674_0b0_x6689_BITS_7_TO_0_0b1_x6689_ETC__q23 =
	      _theResult___exp__h17113;
    endcase
  end
  always@(guard__h16674 or sfd___3__h16138 or _theResult___sfd__h17114)
  begin
    case (guard__h16674)
      2'b0:
	  CASE_guard6674_0b0_sfd___36138_BITS_30_TO_8_0b_ETC__q24 =
	      sfd___3__h16138[30:8];
      2'b01, 2'b10, 2'b11:
	  CASE_guard6674_0b0_sfd___36138_BITS_30_TO_8_0b_ETC__q24 =
	      _theResult___sfd__h17114;
    endcase
  end
  always@(requestR or
	  sfd___3__h16138 or
	  guard__h16674 or
	  _theResult___sfd__h17114 or
	  CASE_guard6674_0b0_sfd___36138_BITS_30_TO_8_0b_ETC__q24)
  begin
    case (requestR[226:224])
      3'h1, 3'h2:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d836 =
	      sfd___3__h16138[30:8];
      3'h3:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d836 =
	      (guard__h16674 == 2'b0) ?
		sfd___3__h16138[30:8] :
		_theResult___sfd__h17114;
      3'h4:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d836 =
	      CASE_guard6674_0b0_sfd___36138_BITS_30_TO_8_0b_ETC__q24;
      default: IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d836 =
		   23'd0;
    endcase
  end
  always@(guard__h16674 or
	  sfd___3__h16138 or out_sfd__h17117 or _theResult___sfd__h17114)
  begin
    case (guard__h16674)
      2'b0, 2'b01:
	  CASE_guard6674_0b0_sfd___36138_BITS_30_TO_8_0b_ETC__q25 =
	      sfd___3__h16138[30:8];
      2'b10:
	  CASE_guard6674_0b0_sfd___36138_BITS_30_TO_8_0b_ETC__q25 =
	      out_sfd__h17117;
      2'b11:
	  CASE_guard6674_0b0_sfd___36138_BITS_30_TO_8_0b_ETC__q25 =
	      _theResult___sfd__h17114;
    endcase
  end
  always@(guard__h16148 or sfd___3__h16138 or _theResult___sfd__h16562)
  begin
    case (guard__h16148)
      2'b0:
	  CASE_guard6148_0b0_sfd___36138_BITS_31_TO_9_0b_ETC__q26 =
	      sfd___3__h16138[31:9];
      2'b01, 2'b10, 2'b11:
	  CASE_guard6148_0b0_sfd___36138_BITS_31_TO_9_0b_ETC__q26 =
	      _theResult___sfd__h16562;
    endcase
  end
  always@(requestR or
	  sfd___3__h16138 or
	  guard__h16148 or
	  _theResult___sfd__h16562 or
	  CASE_guard6148_0b0_sfd___36138_BITS_31_TO_9_0b_ETC__q26)
  begin
    case (requestR[226:224])
      3'h1, 3'h2:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d821 =
	      sfd___3__h16138[31:9];
      3'h3:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d821 =
	      (guard__h16148 == 2'b0) ?
		sfd___3__h16138[31:9] :
		_theResult___sfd__h16562;
      3'h4:
	  IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d821 =
	      CASE_guard6148_0b0_sfd___36138_BITS_31_TO_9_0b_ETC__q26;
      default: IF_requestR_3_BITS_226_TO_224_2_EQ_0x4_7_THEN__ETC___d821 =
		   23'd0;
    endcase
  end
  always@(guard__h16148 or
	  sfd___3__h16138 or out_sfd__h16565 or _theResult___sfd__h16562)
  begin
    case (guard__h16148)
      2'b0, 2'b01:
	  CASE_guard6148_0b0_sfd___36138_BITS_31_TO_9_0b_ETC__q27 =
	      sfd___3__h16138[31:9];
      2'b10:
	  CASE_guard6148_0b0_sfd___36138_BITS_31_TO_9_0b_ETC__q27 =
	      out_sfd__h16565;
      2'b11:
	  CASE_guard6148_0b0_sfd___36138_BITS_31_TO_9_0b_ETC__q27 =
	      _theResult___sfd__h16562;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        stateR <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (stateR$EN) stateR <= `BSV_ASSIGNMENT_DELAY stateR$D_IN;
      end
    if (requestR$EN) requestR <= `BSV_ASSIGNMENT_DELAY requestR$D_IN;
    if (resultR$EN) resultR <= `BSV_ASSIGNMENT_DELAY resultR$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    requestR =
	247'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    resultR = 70'h2AAAAAAAAAAAAAAAAA;
    stateR = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFADD_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h1135 = $stime;
	  #0;
	end
    v__h1129 = v__h1135 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFADD_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFADD: ", v__h1129);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSUB_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h1566 = $stime;
	  #0;
	end
    v__h1560 = v__h1566 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSUB_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFSUB: ", v__h1560);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMUL_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h1755 = $stime;
	  #0;
	end
    v__h1749 = v__h1755 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMUL_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMUL: ", v__h1749);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMADD_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h1956 = $stime;
	  #0;
	end
    v__h1950 = v__h1956 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMADD_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMADD_S ", v__h1950);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMSUB_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2210 = $stime;
	  #0;
	end
    v__h2204 = v__h2210 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMSUB_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMSUB_S ", v__h2204);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFNMADD_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2395 = $stime;
	  #0;
	end
    v__h2389 = v__h2395 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFNMADD_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFNMADD_S ", v__h2389);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFNMSUB_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2580 = $stime;
	  #0;
	end
    v__h2574 = v__h2580 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFNMSUB_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFNMSUB_S ", v__h2574);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_P_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h2897 = $stime;
	  #0;
	end
    v__h2891 = v__h2897 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_P_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_P_S (0x%08x)", v__h2891, requestR[191:160]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_P && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3081 = $stime;
	  #0;
	end
    v__h3075 = v__h3081 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_P && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_S_P (0x%08x)", v__h3075, requestR[31:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_R_P && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3164 = $stime;
	  #0;
	end
    v__h3158 = v__h3164 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_R_P && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_R_P ", v__h3158);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_P_R && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3342 = $stime;
	  #0;
	end
    v__h3336 = v__h3342 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_P_R && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_P_R ", v__h3336);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMA_P && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3622 = $stime;
	  #0;
	end
    v__h3616 = v__h3622 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMA_P && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMA_P (0x%08x, 0x%08x)",
		 v__h3616,
		 requestR[31:16],
		 requestR[15:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMS_P && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3769 = $stime;
	  #0;
	end
    v__h3763 = v__h3769 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMS_P && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMS_P (0x%08x, 0x%08x)",
		 v__h3763,
		 requestR[31:16],
		 requestR[15:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFDA_P && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h3916 = $stime;
	  #0;
	end
    v__h3910 = v__h3916 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFDA_P && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFDA_P (0x%08x, 0x%08x)",
		 v__h3910,
		 requestR[31:16],
		 requestR[15:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFDS_P && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4063 = $stime;
	  #0;
	end
    v__h4057 = v__h4063 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFDS_P && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFDS_P (0x%08x, 0x%08x)",
		 v__h4057,
		 requestR[31:16],
		 requestR[15:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doPMV_W_X && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4203 = $stime;
	  #0;
	end
    v__h4197 = v__h4203 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doPMV_W_X && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doPMV_W_X (0x%016x)", v__h4197, requestR[223:160]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doPMV_X_W && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4327 = $stime;
	  #0;
	end
    v__h4321 = v__h4327 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doPMV_X_W && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doPMV_X_W (0x%08x) ", v__h4321, requestR[31:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJ_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4409 = $stime;
	  #0;
	end
    v__h4403 = v__h4409 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJ_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFSGNJ_S ", v__h4403);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJN_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4575 = $stime;
	  #0;
	end
    v__h4569 = v__h4575 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJN_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFSGNJN_S ", v__h4569);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJX_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4743 = $stime;
	  #0;
	end
    v__h4737 = v__h4743 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFSGNJX_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFSGNJX_S ", v__h4737);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_W && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h4919 = $stime;
	  #0;
	end
    v__h4913 = v__h4919 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_W && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_S_W ", v__h4913);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_WU && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h11415 = $stime;
	  #0;
	end
    v__h11409 = v__h11415 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_S_WU && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_S_WU ", v__h11409);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_W_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h17593 = $stime;
	  #0;
	end
    v__h17587 = v__h17593 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_W_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_W_S ", v__h17587);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_WU_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h19219 = $stime;
	  #0;
	end
    v__h19213 = v__h19219 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCVT_WU_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCVT_WU_S ", v__h19213);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMIN_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h20001 = $stime;
	  #0;
	end
    v__h19995 = v__h20001 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMIN_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMIN_S ", v__h19995);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMAX_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h22660 = $stime;
	  #0;
	end
    v__h22654 = v__h22660 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMAX_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMAX_S ", v__h22654);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMV_W_X && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h25216 = $stime;
	  #0;
	end
    v__h25210 = v__h25216 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMV_W_X && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMV_W_X ", v__h25210);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMV_X_W && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h25371 = $stime;
	  #0;
	end
    v__h25365 = v__h25371 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFMV_X_W && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFMV_X_W ", v__h25365);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFEQ_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h25541 = $stime;
	  #0;
	end
    v__h25535 = v__h25541 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFEQ_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFEQ_S ", v__h25535);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFLT_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h27053 = $stime;
	  #0;
	end
    v__h27047 = v__h27053 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFLT_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFLT_S ", v__h27047);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFLE_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h28153 = $stime;
	  #0;
	end
    v__h28147 = v__h28153 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFLE_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFLE_S ", v__h28147);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCLASS_S && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h29273 = $stime;
	  #0;
	end
    v__h29267 = v__h29273 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_doFCLASS_S && NOT_verbosity_ULE_1_4___d25)
	$display("%0d: %m.doFCLASS_S ", v__h29267);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h30059 = $stime;
	  #0;
	end
    v__h30053 = v__h30059 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write("%0d: %m.rl_get_fpu_result: ", v__h30053);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write("<");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[70:69] == 2'd0)
	if (fpu$server_core_response_get[68])
	  $write("tagged D ",
		 "<Float %s%x.%x>",
		 "-",
		 fpu$server_core_response_get[67:57],
		 fpu$server_core_response_get[56:5]);
	else
	  $write("tagged D ",
		 "<Float %s%x.%x>",
		 "+",
		 fpu$server_core_response_get[67:57],
		 fpu$server_core_response_get[56:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[70:69] == 2'd1)
	if (fpu$server_core_response_get[36])
	  $write("tagged S ",
		 "<Float %s%x.%x>",
		 "-",
		 fpu$server_core_response_get[35:28],
		 fpu$server_core_response_get[27:5]);
	else
	  $write("tagged S ",
		 "<Float %s%x.%x>",
		 "+",
		 fpu$server_core_response_get[35:28],
		 fpu$server_core_response_get[27:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[70:69] != 2'd0 &&
	  fpu$server_core_response_get[70:69] != 2'd1)
	$write("tagged P ", "'h%h", fpu$server_core_response_get[20:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write("<Exception: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[4])
	$write("Invalid_Op ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[4])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[3])
	$write("Divide_0 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[3])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[2])
	$write("Overflow ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[2])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[1])
	$write("Underflow ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[1])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  fpu$server_core_response_get[0])
	$write("Inexact ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25 &&
	  !fpu$server_core_response_get[0])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write(">");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write(">");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_fpu_result && NOT_verbosity_ULE_1_4___d25)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	begin
	  v__h30503 = $stime;
	  #0;
	end
    v__h30497 = v__h30503 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write("%0d: %m.rl_get_posit_result: ", v__h30497);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write("<");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[70:69] == 2'd0)
	if (positCore$server_core_response_get[68])
	  $write("tagged D ",
		 "<Float %s%x.%x>",
		 "-",
		 positCore$server_core_response_get[67:57],
		 positCore$server_core_response_get[56:5]);
	else
	  $write("tagged D ",
		 "<Float %s%x.%x>",
		 "+",
		 positCore$server_core_response_get[67:57],
		 positCore$server_core_response_get[56:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[70:69] == 2'd1)
	if (positCore$server_core_response_get[36])
	  $write("tagged S ",
		 "<Float %s%x.%x>",
		 "-",
		 positCore$server_core_response_get[35:28],
		 positCore$server_core_response_get[27:5]);
	else
	  $write("tagged S ",
		 "<Float %s%x.%x>",
		 "+",
		 positCore$server_core_response_get[35:28],
		 positCore$server_core_response_get[27:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[70:69] != 2'd0 &&
	  positCore$server_core_response_get[70:69] != 2'd1)
	$write("tagged P ", "'h%h", positCore$server_core_response_get[20:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write(",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write("<Exception: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[4])
	$write("Invalid_Op ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  !positCore$server_core_response_get[4])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[3])
	$write("Divide_0 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  !positCore$server_core_response_get[3])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[2])
	$write("Overflow ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  !positCore$server_core_response_get[2])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[1])
	$write("Underflow ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  !positCore$server_core_response_get[1])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  positCore$server_core_response_get[0])
	$write("Inexact ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25 &&
	  !positCore$server_core_response_get[0])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write(">");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write(">");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_posit_result && NOT_verbosity_ULE_1_4___d25)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkFBox_Core

