//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_core_request_put    O     1 reg
// server_core_response_get       O    71
// RDY_server_core_response_get   O     1 reg
// verbosity                      I     4
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_core_request_put        I   138
// EN_server_core_request_put     I     1
// EN_server_core_response_get    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPositCore(verbosity,
		   CLK,
		   RST_N,

		   server_core_request_put,
		   EN_server_core_request_put,
		   RDY_server_core_request_put,

		   EN_server_core_response_get,
		   server_core_response_get,
		   RDY_server_core_response_get);
  input  [3 : 0] verbosity;
  input  CLK;
  input  RST_N;

  // action method server_core_request_put
  input  [137 : 0] server_core_request_put;
  input  EN_server_core_request_put;
  output RDY_server_core_request_put;

  // actionvalue method server_core_response_get
  input  EN_server_core_response_get;
  output [70 : 0] server_core_response_get;
  output RDY_server_core_response_get;

  // signals for module outputs
  wire [70 : 0] server_core_response_get;
  wire RDY_server_core_request_put, RDY_server_core_response_get;

  // inlined wires
  wire [32 : 0] ffI_f_rv$port0__write_1,
		ffI_f_rv$port1__read,
		ffI_f_rv$port2__read;
  wire [3 : 0] opcode_in_rv$port0__write_1,
	       opcode_in_rv$port1__read,
	       opcode_in_rv$port2__read;
  wire ffI_f_rv$EN_port0__write, opcode_in_rv$EN_port1__write;

  // register ffI_f_rv
  reg [32 : 0] ffI_f_rv;
  wire [32 : 0] ffI_f_rv$D_IN;
  wire ffI_f_rv$EN;

  // register fma_check_quire
  reg fma_check_quire;
  wire fma_check_quire$D_IN, fma_check_quire$EN;

  // register opcode_in_rv
  reg [3 : 0] opcode_in_rv;
  wire [3 : 0] opcode_in_rv$D_IN;
  wire opcode_in_rv$EN;

  // register rg_quire
  reg [127 : 0] rg_quire;
  wire [127 : 0] rg_quire$D_IN;
  wire rg_quire$EN;

  // register rg_quire_busy
  reg rg_quire_busy;
  wire rg_quire_busy$D_IN, rg_quire_busy$EN;

  // ports of submodule extracter1_fifo_output_reg
  wire [20 : 0] extracter1_fifo_output_reg$D_IN,
		extracter1_fifo_output_reg$D_OUT;
  wire extracter1_fifo_output_reg$CLR,
       extracter1_fifo_output_reg$DEQ,
       extracter1_fifo_output_reg$EMPTY_N,
       extracter1_fifo_output_reg$ENQ,
       extracter1_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage0_reg
  wire [17 : 0] extracter1_fifo_stage0_reg$D_IN;
  wire extracter1_fifo_stage0_reg$CLR,
       extracter1_fifo_stage0_reg$DEQ,
       extracter1_fifo_stage0_reg$ENQ;

  // ports of submodule extracter1_fifo_stage1_reg
  wire [24 : 0] extracter1_fifo_stage1_reg$D_IN;
  wire extracter1_fifo_stage1_reg$CLR,
       extracter1_fifo_stage1_reg$DEQ,
       extracter1_fifo_stage1_reg$ENQ;

  // ports of submodule extracter1_fifo_stage2_reg
  wire [21 : 0] extracter1_fifo_stage2_reg$D_IN;
  wire extracter1_fifo_stage2_reg$CLR,
       extracter1_fifo_stage2_reg$DEQ,
       extracter1_fifo_stage2_reg$ENQ;

  // ports of submodule extracter2_fifo_output_reg
  wire [20 : 0] extracter2_fifo_output_reg$D_IN,
		extracter2_fifo_output_reg$D_OUT;
  wire extracter2_fifo_output_reg$CLR,
       extracter2_fifo_output_reg$DEQ,
       extracter2_fifo_output_reg$EMPTY_N,
       extracter2_fifo_output_reg$ENQ,
       extracter2_fifo_output_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage0_reg
  wire [17 : 0] extracter2_fifo_stage0_reg$D_IN;
  wire extracter2_fifo_stage0_reg$CLR,
       extracter2_fifo_stage0_reg$DEQ,
       extracter2_fifo_stage0_reg$ENQ;

  // ports of submodule extracter2_fifo_stage1_reg
  wire [24 : 0] extracter2_fifo_stage1_reg$D_IN;
  wire extracter2_fifo_stage1_reg$CLR,
       extracter2_fifo_stage1_reg$DEQ,
       extracter2_fifo_stage1_reg$ENQ;

  // ports of submodule extracter2_fifo_stage2_reg
  wire [21 : 0] extracter2_fifo_stage2_reg$D_IN;
  wire extracter2_fifo_stage2_reg$CLR,
       extracter2_fifo_stage2_reg$DEQ,
       extracter2_fifo_stage2_reg$ENQ;

  // ports of submodule ffI
  wire [137 : 0] ffI$D_IN, ffI$D_OUT;
  wire ffI$CLR, ffI$DEQ, ffI$EMPTY_N, ffI$ENQ, ffI$FULL_N;

  // ports of submodule ffO
  reg [70 : 0] ffO$D_IN;
  wire [70 : 0] ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule fma_adder_fifo_output_reg
  wire fma_adder_fifo_output_reg$CLR,
       fma_adder_fifo_output_reg$DEQ,
       fma_adder_fifo_output_reg$EMPTY_N,
       fma_adder_fifo_output_reg$ENQ,
       fma_adder_fifo_output_reg$FULL_N;

  // ports of submodule fma_adder_fifo_stage0_reg
  wire [134 : 0] fma_adder_fifo_stage0_reg$D_IN,
		 fma_adder_fifo_stage0_reg$D_OUT;
  wire fma_adder_fifo_stage0_reg$CLR,
       fma_adder_fifo_stage0_reg$DEQ,
       fma_adder_fifo_stage0_reg$EMPTY_N,
       fma_adder_fifo_stage0_reg$ENQ,
       fma_adder_fifo_stage0_reg$FULL_N;

  // ports of submodule fma_ffO
  wire fma_ffO$CLR, fma_ffO$DEQ, fma_ffO$EMPTY_N, fma_ffO$ENQ, fma_ffO$FULL_N;

  // ports of submodule fma_multiplier_fifo_output_reg
  wire [132 : 0] fma_multiplier_fifo_output_reg$D_IN,
		 fma_multiplier_fifo_output_reg$D_OUT;
  wire fma_multiplier_fifo_output_reg$CLR,
       fma_multiplier_fifo_output_reg$DEQ,
       fma_multiplier_fifo_output_reg$EMPTY_N,
       fma_multiplier_fifo_output_reg$ENQ,
       fma_multiplier_fifo_output_reg$FULL_N;

  // ports of submodule fma_multiplier_fifo_stage0_reg
  wire [36 : 0] fma_multiplier_fifo_stage0_reg$D_IN,
		fma_multiplier_fifo_stage0_reg$D_OUT;
  wire fma_multiplier_fifo_stage0_reg$CLR,
       fma_multiplier_fifo_stage0_reg$DEQ,
       fma_multiplier_fifo_stage0_reg$EMPTY_N,
       fma_multiplier_fifo_stage0_reg$ENQ,
       fma_multiplier_fifo_stage0_reg$FULL_N;

  // ports of submodule ftop_fToP_fifo_output_reg
  wire [23 : 0] ftop_fToP_fifo_output_reg$D_IN,
		ftop_fToP_fifo_output_reg$D_OUT;
  wire ftop_fToP_fifo_output_reg$CLR,
       ftop_fToP_fifo_output_reg$DEQ,
       ftop_fToP_fifo_output_reg$EMPTY_N,
       ftop_fToP_fifo_output_reg$ENQ,
       ftop_fToP_fifo_output_reg$FULL_N;

  // ports of submodule ftop_fToP_fifo_stage0_reg
  wire [28 : 0] ftop_fToP_fifo_stage0_reg$D_IN,
		ftop_fToP_fifo_stage0_reg$D_OUT;
  wire ftop_fToP_fifo_stage0_reg$CLR,
       ftop_fToP_fifo_stage0_reg$DEQ,
       ftop_fToP_fifo_stage0_reg$EMPTY_N,
       ftop_fToP_fifo_stage0_reg$ENQ,
       ftop_fToP_fifo_stage0_reg$FULL_N;

  // ports of submodule ftop_ffO
  wire [23 : 0] ftop_ffO$D_IN, ftop_ffO$D_OUT;
  wire ftop_ffO$CLR,
       ftop_ffO$DEQ,
       ftop_ffO$EMPTY_N,
       ftop_ffO$ENQ,
       ftop_ffO$FULL_N;

  // ports of submodule need_normalize
  wire need_normalize$CLR,
       need_normalize$DEQ,
       need_normalize$D_IN,
       need_normalize$ENQ;

  // ports of submodule normalizer_fifo_output_reg
  wire [19 : 0] normalizer_fifo_output_reg$D_IN,
		normalizer_fifo_output_reg$D_OUT;
  wire normalizer_fifo_output_reg$CLR,
       normalizer_fifo_output_reg$DEQ,
       normalizer_fifo_output_reg$EMPTY_N,
       normalizer_fifo_output_reg$ENQ,
       normalizer_fifo_output_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage0_reg
  wire [33 : 0] normalizer_fifo_stage0_reg$D_IN;
  wire normalizer_fifo_stage0_reg$CLR,
       normalizer_fifo_stage0_reg$DEQ,
       normalizer_fifo_stage0_reg$ENQ;

  // ports of submodule normalizer_fifo_stage1_reg
  wire [37 : 0] normalizer_fifo_stage1_reg$D_IN;
  wire normalizer_fifo_stage1_reg$CLR,
       normalizer_fifo_stage1_reg$DEQ,
       normalizer_fifo_stage1_reg$ENQ;

  // ports of submodule normalizer_fifo_stage2_reg
  wire [19 : 0] normalizer_fifo_stage2_reg$D_IN;
  wire normalizer_fifo_stage2_reg$CLR,
       normalizer_fifo_stage2_reg$DEQ,
       normalizer_fifo_stage2_reg$ENQ;

  // ports of submodule opcode_norm
  wire [2 : 0] opcode_norm$D_IN, opcode_norm$D_OUT;
  wire opcode_norm$CLR,
       opcode_norm$DEQ,
       opcode_norm$EMPTY_N,
       opcode_norm$ENQ,
       opcode_norm$FULL_N;

  // ports of submodule opcode_out
  wire [2 : 0] opcode_out$D_IN, opcode_out$D_OUT;
  wire opcode_out$CLR,
       opcode_out$DEQ,
       opcode_out$EMPTY_N,
       opcode_out$ENQ,
       opcode_out$FULL_N;

  // ports of submodule ptof_ffO
  wire [34 : 0] ptof_ffO$D_IN, ptof_ffO$D_OUT;
  wire ptof_ffO$CLR,
       ptof_ffO$DEQ,
       ptof_ffO$EMPTY_N,
       ptof_ffO$ENQ,
       ptof_ffO$FULL_N;

  // ports of submodule ptof_ptoF_fifo_output_reg
  wire [34 : 0] ptof_ptoF_fifo_output_reg$D_IN,
		ptof_ptoF_fifo_output_reg$D_OUT;
  wire ptof_ptoF_fifo_output_reg$CLR,
       ptof_ptoF_fifo_output_reg$DEQ,
       ptof_ptoF_fifo_output_reg$EMPTY_N,
       ptof_ptoF_fifo_output_reg$ENQ,
       ptof_ptoF_fifo_output_reg$FULL_N;

  // ports of submodule ptof_ptoF_fifo_stage0_reg
  wire [41 : 0] ptof_ptoF_fifo_stage0_reg$D_IN,
		ptof_ptoF_fifo_stage0_reg$D_OUT;
  wire ptof_ptoF_fifo_stage0_reg$CLR,
       ptof_ptoF_fifo_stage0_reg$DEQ,
       ptof_ptoF_fifo_stage0_reg$EMPTY_N,
       ptof_ptoF_fifo_stage0_reg$ENQ,
       ptof_ptoF_fifo_stage0_reg$FULL_N;

  // ports of submodule ptoq_ffO
  wire ptoq_ffO$CLR,
       ptoq_ffO$DEQ,
       ptoq_ffO$EMPTY_N,
       ptoq_ffO$ENQ,
       ptoq_ffO$FULL_N;

  // ports of submodule ptoq_positToquire_fifo_output_reg
  wire ptoq_positToquire_fifo_output_reg$CLR,
       ptoq_positToquire_fifo_output_reg$DEQ,
       ptoq_positToquire_fifo_output_reg$EMPTY_N,
       ptoq_positToquire_fifo_output_reg$ENQ,
       ptoq_positToquire_fifo_output_reg$FULL_N;

  // ports of submodule ptoq_positToquire_fifo_stage0_reg
  wire [20 : 0] ptoq_positToquire_fifo_stage0_reg$D_IN;
  wire ptoq_positToquire_fifo_stage0_reg$CLR,
       ptoq_positToquire_fifo_stage0_reg$DEQ,
       ptoq_positToquire_fifo_stage0_reg$ENQ;

  // ports of submodule ptoq_positToquire_fifo_stage1_reg
  wire [114 : 0] ptoq_positToquire_fifo_stage1_reg$D_IN,
		 ptoq_positToquire_fifo_stage1_reg$D_OUT;
  wire ptoq_positToquire_fifo_stage1_reg$CLR,
       ptoq_positToquire_fifo_stage1_reg$DEQ,
       ptoq_positToquire_fifo_stage1_reg$EMPTY_N,
       ptoq_positToquire_fifo_stage1_reg$ENQ,
       ptoq_positToquire_fifo_stage1_reg$FULL_N;

  // ports of submodule qtop_ffO
  wire [23 : 0] qtop_ffO$D_IN, qtop_ffO$D_OUT;
  wire qtop_ffO$CLR,
       qtop_ffO$DEQ,
       qtop_ffO$EMPTY_N,
       qtop_ffO$ENQ,
       qtop_ffO$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_output_reg
  wire [23 : 0] qtop_quireToPosit1_fifo_output_reg$D_IN,
		qtop_quireToPosit1_fifo_output_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_output_reg$CLR,
       qtop_quireToPosit1_fifo_output_reg$DEQ,
       qtop_quireToPosit1_fifo_output_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_output_reg$ENQ,
       qtop_quireToPosit1_fifo_output_reg$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_stage0_reg
  wire [136 : 0] qtop_quireToPosit1_fifo_stage0_reg$D_IN,
		 qtop_quireToPosit1_fifo_stage0_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_stage0_reg$CLR,
       qtop_quireToPosit1_fifo_stage0_reg$DEQ,
       qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_stage0_reg$ENQ,
       qtop_quireToPosit1_fifo_stage0_reg$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_stage1_reg
  wire [23 : 0] qtop_quireToPosit1_fifo_stage1_reg$D_IN,
		qtop_quireToPosit1_fifo_stage1_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_stage1_reg$CLR,
       qtop_quireToPosit1_fifo_stage1_reg$DEQ,
       qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_stage1_reg$ENQ,
       qtop_quireToPosit1_fifo_stage1_reg$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_extract_in,
       CAN_FIRE_RL_fma_adder_stage_1,
       CAN_FIRE_RL_fma_multiplier_stage_1,
       CAN_FIRE_RL_fma_rl_connect1,
       CAN_FIRE_RL_fma_rl_out,
       CAN_FIRE_RL_ftop_fToP_stage_1,
       CAN_FIRE_RL_ftop_rl_out,
       CAN_FIRE_RL_ptof_ptoF_stage_2,
       CAN_FIRE_RL_ptof_rl_out,
       CAN_FIRE_RL_ptoq_positToquire_stage_2,
       CAN_FIRE_RL_ptoq_rl_out,
       CAN_FIRE_RL_qtop_quireToPosit1_stage_1,
       CAN_FIRE_RL_qtop_quireToPosit1_stage_2,
       CAN_FIRE_RL_qtop_rl_out,
       CAN_FIRE_RL_rl_fma,
       CAN_FIRE_RL_rl_ftop,
       CAN_FIRE_RL_rl_norm,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_RL_rl_ptof,
       CAN_FIRE_RL_rl_ptoq,
       CAN_FIRE_RL_rl_qtop,
       CAN_FIRE_server_core_request_put,
       CAN_FIRE_server_core_response_get,
       WILL_FIRE_RL_extract_in,
       WILL_FIRE_RL_fma_adder_stage_1,
       WILL_FIRE_RL_fma_multiplier_stage_1,
       WILL_FIRE_RL_fma_rl_connect1,
       WILL_FIRE_RL_fma_rl_out,
       WILL_FIRE_RL_ftop_fToP_stage_1,
       WILL_FIRE_RL_ftop_rl_out,
       WILL_FIRE_RL_ptof_ptoF_stage_2,
       WILL_FIRE_RL_ptof_rl_out,
       WILL_FIRE_RL_ptoq_positToquire_stage_2,
       WILL_FIRE_RL_ptoq_rl_out,
       WILL_FIRE_RL_qtop_quireToPosit1_stage_1,
       WILL_FIRE_RL_qtop_quireToPosit1_stage_2,
       WILL_FIRE_RL_qtop_rl_out,
       WILL_FIRE_RL_rl_fma,
       WILL_FIRE_RL_rl_ftop,
       WILL_FIRE_RL_rl_norm,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_RL_rl_ptof,
       WILL_FIRE_RL_rl_ptoq,
       WILL_FIRE_RL_rl_qtop,
       WILL_FIRE_server_core_request_put,
       WILL_FIRE_server_core_response_get;

  // inputs to muxes for submodule ports
  wire [127 : 0] MUX_rg_quire$write_1__VAL_1, MUX_rg_quire$write_1__VAL_2;
  wire MUX_opcode_out$enq_1__SEL_1,
       MUX_rg_quire_busy$write_1__SEL_1,
       MUX_rg_quire_busy$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h35616;
  reg [31 : 0] v__h63543;
  reg [31 : 0] v__h67175;
  reg [31 : 0] v__h59961;
  reg [31 : 0] v__h68310;
  reg [31 : 0] v__h68452;
  reg [31 : 0] v__h35610;
  reg [31 : 0] v__h59955;
  reg [31 : 0] v__h63537;
  reg [31 : 0] v__h67169;
  reg [31 : 0] v__h68304;
  reg [31 : 0] v__h68446;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] float_no__h16601;
  reg [15 : 0] IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524,
	       output_regf_out_posit__h60033,
	       output_regf_out_posit__h63643;
  reg [11 : 0] x__h24570, x__h29915;
  reg [1 : 0] CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1,
	      CASE_float_no6601_0_2_4286578688_1_0__q31,
	      CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q29,
	      CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q30;
  reg CASE_shift_new00002_0_NOT_ftop_ffOD_OUT_BIT_0_ETC__q19,
      CASE_shift_new00002_0_ftop_ffOD_OUT_BIT_0_1_f_ETC__q18,
      CASE_shift_new03616_0_NOT_qtop_ffOD_OUT_BIT_0_ETC__q23,
      CASE_shift_new03616_0_qtop_ffOD_OUT_BIT_0_1_q_ETC__q22,
      IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329,
      IF_opcode_out_first__548_EQ_0_549_OR_opcode_ou_ETC___d1571;
  wire [133 : 0] rg_quire_15_BIT_127_16_AND_rg_quire_15_BITS_12_ETC___d1155;
  wire [127 : 0] IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d110,
		 IF_NOT_rg_quire_15_BIT_127_16_17_AND_NOT_fma_m_ETC___d130,
		 SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77,
		 fma_adder_fifo_stage0_reg_first__7_BITS_134_TO_ETC___d82,
		 rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123,
		 twos_complement_carry_int_frac__h14334,
		 twos_complement_carry_int_frac__h437,
		 x__h1243,
		 x__h7976;
  wire [126 : 0] carry_int_frac_shifted__h15124,
		 twos_complement_carry_int_frac__h37685,
		 x__h787;
  wire [111 : 0] IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d36,
		 f_new___1__h696,
		 f_new__h37536,
		 f_new__h487,
		 f_new__h643,
		 int_frac__h37519,
		 mask1__h698,
		 x__h879;
  wire [51 : 0] _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d786;
  wire [33 : 0] extracter1_fifo_output_reg_first__51_BIT_18_66_ETC___d788;
  wire [31 : 0] float_no__h16598;
  wire [25 : 0] fma_multiplier_fifo_stage0_regD_OUT_BITS_25_TO_0__q9, x__h656;
  wire [23 : 0] frac__h16591, x__h16679;
  wire [22 : 0] frac_f__h16597, stage0_regf_frac__h36587;
  wire [17 : 0] IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR__ETC___d705,
		IF_ffI_first__06_BITS_86_TO_72_38_EQ_0_39_AND__ETC___d518;
  wire [15 : 0] in_posit2___1_posit_inp__h24813;
  wire [14 : 0] IF_IF_NOT_IF_ftop_ffO_first__172_BIT_19_177_TH_ETC___d1297,
		IF_IF_NOT_IF_qtop_ffO_first__346_BIT_19_351_TH_ETC___d1471,
		IF_NOT_IF_ftop_ffO_first__172_BIT_19_177_THEN__ETC___d1293,
		IF_NOT_IF_qtop_ffO_first__346_BIT_19_351_THEN__ETC___d1467,
		IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d27,
		IF_ftop_ffO_first__172_BIT_19_177_THEN_1_SL_14_ETC___d1217,
		IF_qtop_ffO_first__346_BIT_19_351_THEN_1_SL_14_ETC___d1391,
		INV_new_inp4757__q12,
		INV_new_inp9483__q2,
		a__h60049,
		a__h63659,
		b__h60226,
		b__h60408,
		b__h61160,
		b__h62768,
		b__h63836,
		b__h64018,
		b__h64769,
		b__h66377,
		k__h60468,
		k__h60513,
		k__h64078,
		k__h64122,
		k_expo__h60005,
		k_expo__h63619,
		new_inp__h19483,
		new_inp__h24757,
		x__h60242,
		x__h60525,
		x__h63852,
		x__h64134,
		y__h60243,
		y__h60244,
		y__h63853,
		y__h63854;
  wire [12 : 0] IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173,
		f1__h36036,
		f2__h36037,
		frac__h15831,
		x__h15898,
		x__h62223,
		x__h65832;
  wire [11 : 0] frac__h19491,
		frac__h24765,
		ftop_ffOD_OUT_BITS_13_TO_2__q17,
		qtop_ffOD_OUT_BITS_13_TO_2__q21,
		stage1_regf_frac__h14955,
		x2223_BITS_11_TO_0__q16,
		x5832_BITS_11_TO_0__q20,
		x_frac__h15845;
  wire [8 : 0] _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d837,
	       x__h16649;
  wire [7 : 0] IF_0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_THEN__ETC___d1149,
	       IF_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_T_ETC__q27,
	       IF_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_T_ETC__q28,
	       IF_SEXT_extracter1_fifo_output_reg_first__51_B_ETC___d801,
	       IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12,
	       IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8,
	       SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d797,
	       SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC__q24,
	       SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC__q25,
	       SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8,
	       _0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_THEN_0_M_ETC___d1144,
	       _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d845,
	       _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d849,
	       _71_MINUS_0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_ETC___d1146,
	       ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3,
	       x__h15212,
	       x__h689,
	       x__h777;
  wire [6 : 0] SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d776,
	       fma_multiplier_fifo_stage0_regD_OUT_BITS_32_T_ETC__q7,
	       msbZeros__h37686,
	       x__h37580,
	       x__h855;
  wire [5 : 0] IF_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_T_ETC___d843,
	       IF_SEXT_extracter1_fifo_output_reg_first__51_B_ETC___d812,
	       IF_ptof_ptoF_fifo_stage0_reg_first__45_BIT_7_5_ETC___d259,
	       SEXT_IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ__ETC___d603,
	       SEXT_IF_IF_ffI_first__06_BIT_87_40_THEN_0_MINU_ETC___d416,
	       SEXT_IF_new_inp4757_BIT_14_THEN_b5361_ELSE_b53633__q14,
	       SEXT_IF_new_inp9483_BIT_14_THEN_b0016_ELSE_b00180__q11,
	       extracter1_fifo_output_regD_OUT_BITS_17_TO_12__q15,
	       extracter2_fifo_output_regD_OUT_BITS_17_TO_12__q26,
	       qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6,
	       x__h16739;
  wire [4 : 0] IF_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_T_ETC___d854,
	       IF_ftop_fToP_fifo_stage0_reg_first__06_BIT_6_0_ETC___d213,
	       IF_new_inp4757_BIT_14_THEN_b5361_ELSE_b5363__q13,
	       IF_new_inp9483_BIT_14_THEN_b0016_ELSE_b0018__q10,
	       _0_MINUS_ftop_ffOD_OUT_BITS_19_TO_15__q4,
	       _0_MINUS_qtop_ffOD_OUT_BITS_19_TO_15__q5,
	       b__h20016,
	       b__h20018,
	       b__h25361,
	       b__h25363,
	       x__h15958,
	       x__h22157,
	       x__h27502;
  wire [3 : 0] IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177__ETC___d1210,
	       IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351__ETC___d1384,
	       IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d664,
	       IF_IF_ffI_first__06_BIT_87_40_THEN_0_MINUS_ffI_ETC___d477,
	       IF_ftop_ffO_first__172_BIT_18_183_AND_NOT_ftop_ETC___d1189,
	       IF_qtop_ffO_first__346_BIT_18_357_AND_NOT_qtop_ETC___d1363,
	       _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234,
	       _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408,
	       _14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196,
	       _14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370,
	       ftop_ffO_first__172_BITS_18_TO_15_184_PLUS_1___d1185,
	       qtop_ffO_first__346_BITS_18_TO_15_358_PLUS_1___d1359,
	       x__h20026,
	       x__h22164,
	       x__h24521,
	       x__h25371,
	       x__h27509,
	       x__h29866,
	       x__h60511,
	       x__h62399,
	       x__h62560,
	       x__h64120,
	       x__h66008,
	       x__h66169;
  wire [1 : 0] IF_extracter1_fifo_output_reg_first__51_BITS_2_ETC___d770,
	       _theResult___snd_snd__h61341,
	       _theResult___snd_snd__h64950,
	       i1__h62450,
	       i1__h66059,
	       i__h62352,
	       i__h65961,
	       shift_new0__h60002,
	       shift_new0__h63616,
	       shift_new__h61288,
	       shift_new__h64897,
	       truncated_frac__h1190,
	       x__h61292,
	       x__h64901;
  wire IF_IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_1_ETC___d1269,
       IF_IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_3_ETC___d1443,
       IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15,
       IF_opcode_norm_first__158_EQ_4_159_THEN_ftop_f_ETC___d1168,
       NOT_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__17_ETC___d1285,
       NOT_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__17_ETC___d1329,
       NOT_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__34_ETC___d1459,
       NOT_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__34_ETC___d1503,
       NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1237,
       NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1246,
       NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1301,
       NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1307,
       NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1326,
       NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1330,
       NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1411,
       NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1420,
       NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1475,
       NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1481,
       NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1500,
       NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1504,
       NOT_IF_ftop_ffO_first__172_BIT_19_177_THEN_1_S_ETC___d1222,
       NOT_IF_qtop_ffO_first__346_BIT_19_351_THEN_1_S_ETC___d1396,
       NOT_NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_ETC___d1259,
       NOT_NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_ETC___d1433,
       NOT_verbosity_ULE_1_08___d709,
       SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d798,
       SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d799,
       _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d839,
       _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d840,
       _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1271,
       _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1445,
       _theResult____h60012,
       _theResult____h63626,
       _theResult___fst__h61192,
       _theResult___fst__h64801,
       add_round__h16599,
       all_bits_0__h1193,
       expo__h19490,
       expo__h24764,
       expo_new__h61258,
       expo_new__h61289,
       expo_new__h64867,
       expo_new__h64898,
       flag_prev_truncate__h60011,
       flag_prev_truncate__h63625,
       flag_truncated_frac__h1188,
       ftop_ffO_first__172_BITS_13_TO_2_225_BIT_IF_14_ETC___d1243,
       ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1252,
       ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1256,
       ftop_ffO_first__172_BIT_14_198_AND_1_MINUS_14__ETC___d1201,
       mask_e__h61190,
       mask_e__h64799,
       qtop_ffO_first__346_BITS_13_TO_2_399_BIT_IF_14_ETC___d1417,
       qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1426,
       qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1430,
       qtop_ffO_first__346_BIT_14_372_AND_1_MINUS_14__ETC___d1375,
       qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166,
       truncated_frac_msb__h16593,
       truncated_frac_msb__h60007,
       truncated_frac_msb__h63621,
       truncated_frac_zero__h15832,
       truncated_frac_zero__h16592,
       x__h1236,
       x__h1238,
       x__h13789,
       x__h13794,
       x__h15228,
       x__h15271,
       x__h15971,
       x__h16048,
       x__h16060,
       x__h16061,
       x__h16766,
       x__h16767,
       x__h16787,
       x__h3181,
       x__h35944,
       x__h36029,
       x__h36051,
       x__h36053,
       x__h37180,
       x__h37343,
       x__h39597,
       x__h61163,
       x__h62243,
       x__h64772,
       x__h65852,
       x__h818,
       x__h862,
       y__h1237,
       y__h13807,
       y__h16788,
       y__h62440,
       y__h62444,
       y__h66049,
       y__h66053,
       y__h7952;

  // action method server_core_request_put
  assign RDY_server_core_request_put = ffI$FULL_N ;
  assign CAN_FIRE_server_core_request_put = ffI$FULL_N ;
  assign WILL_FIRE_server_core_request_put = EN_server_core_request_put ;

  // actionvalue method server_core_response_get
  assign server_core_response_get =
	     { CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1,
	       ffO$D_OUT[68:0] } ;
  assign RDY_server_core_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_server_core_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_server_core_response_get = EN_server_core_response_get ;

  // submodule extracter1_fifo_output_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) extracter1_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_output_reg$D_IN),
						      .ENQ(extracter1_fifo_output_reg$ENQ),
						      .DEQ(extracter1_fifo_output_reg$DEQ),
						      .CLR(extracter1_fifo_output_reg$CLR),
						      .D_OUT(extracter1_fifo_output_reg$D_OUT),
						      .FULL_N(extracter1_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_stage0_reg
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) extracter1_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage0_reg$D_IN),
						      .ENQ(extracter1_fifo_stage0_reg$ENQ),
						      .DEQ(extracter1_fifo_stage0_reg$DEQ),
						      .CLR(extracter1_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage1_reg
  FIFO2 #(.width(32'd25),
	  .guarded(32'd1)) extracter1_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage1_reg$D_IN),
						      .ENQ(extracter1_fifo_stage1_reg$ENQ),
						      .DEQ(extracter1_fifo_stage1_reg$DEQ),
						      .CLR(extracter1_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage2_reg
  FIFO2 #(.width(32'd22),
	  .guarded(32'd1)) extracter1_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage2_reg$D_IN),
						      .ENQ(extracter1_fifo_stage2_reg$ENQ),
						      .DEQ(extracter1_fifo_stage2_reg$DEQ),
						      .CLR(extracter1_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_output_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) extracter2_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_output_reg$D_IN),
						      .ENQ(extracter2_fifo_output_reg$ENQ),
						      .DEQ(extracter2_fifo_output_reg$DEQ),
						      .CLR(extracter2_fifo_output_reg$CLR),
						      .D_OUT(extracter2_fifo_output_reg$D_OUT),
						      .FULL_N(extracter2_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_output_reg$EMPTY_N));

  // submodule extracter2_fifo_stage0_reg
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) extracter2_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage0_reg$D_IN),
						      .ENQ(extracter2_fifo_stage0_reg$ENQ),
						      .DEQ(extracter2_fifo_stage0_reg$DEQ),
						      .CLR(extracter2_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage1_reg
  FIFO2 #(.width(32'd25),
	  .guarded(32'd1)) extracter2_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage1_reg$D_IN),
						      .ENQ(extracter2_fifo_stage1_reg$ENQ),
						      .DEQ(extracter2_fifo_stage1_reg$DEQ),
						      .CLR(extracter2_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage2_reg
  FIFO2 #(.width(32'd22),
	  .guarded(32'd1)) extracter2_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage2_reg$D_IN),
						      .ENQ(extracter2_fifo_stage2_reg$ENQ),
						      .DEQ(extracter2_fifo_stage2_reg$DEQ),
						      .CLR(extracter2_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule ffI
  FIFO2 #(.width(32'd138), .guarded(32'd1)) ffI(.RST(RST_N),
						.CLK(CLK),
						.D_IN(ffI$D_IN),
						.ENQ(ffI$ENQ),
						.DEQ(ffI$DEQ),
						.CLR(ffI$CLR),
						.D_OUT(ffI$D_OUT),
						.FULL_N(ffI$FULL_N),
						.EMPTY_N(ffI$EMPTY_N));

  // submodule ffO
  FIFO2 #(.width(32'd71), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule fma_adder_fifo_output_reg
  FIFO20 #(.guarded(32'd1)) fma_adder_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .ENQ(fma_adder_fifo_output_reg$ENQ),
						      .DEQ(fma_adder_fifo_output_reg$DEQ),
						      .CLR(fma_adder_fifo_output_reg$CLR),
						      .FULL_N(fma_adder_fifo_output_reg$FULL_N),
						      .EMPTY_N(fma_adder_fifo_output_reg$EMPTY_N));

  // submodule fma_adder_fifo_stage0_reg
  FIFO2 #(.width(32'd135),
	  .guarded(32'd1)) fma_adder_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(fma_adder_fifo_stage0_reg$D_IN),
						     .ENQ(fma_adder_fifo_stage0_reg$ENQ),
						     .DEQ(fma_adder_fifo_stage0_reg$DEQ),
						     .CLR(fma_adder_fifo_stage0_reg$CLR),
						     .D_OUT(fma_adder_fifo_stage0_reg$D_OUT),
						     .FULL_N(fma_adder_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(fma_adder_fifo_stage0_reg$EMPTY_N));

  // submodule fma_ffO
  FIFO20 #(.guarded(32'd1)) fma_ffO(.RST(RST_N),
				    .CLK(CLK),
				    .ENQ(fma_ffO$ENQ),
				    .DEQ(fma_ffO$DEQ),
				    .CLR(fma_ffO$CLR),
				    .FULL_N(fma_ffO$FULL_N),
				    .EMPTY_N(fma_ffO$EMPTY_N));

  // submodule fma_multiplier_fifo_output_reg
  FIFO2 #(.width(32'd133),
	  .guarded(32'd1)) fma_multiplier_fifo_output_reg(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fma_multiplier_fifo_output_reg$D_IN),
							  .ENQ(fma_multiplier_fifo_output_reg$ENQ),
							  .DEQ(fma_multiplier_fifo_output_reg$DEQ),
							  .CLR(fma_multiplier_fifo_output_reg$CLR),
							  .D_OUT(fma_multiplier_fifo_output_reg$D_OUT),
							  .FULL_N(fma_multiplier_fifo_output_reg$FULL_N),
							  .EMPTY_N(fma_multiplier_fifo_output_reg$EMPTY_N));

  // submodule fma_multiplier_fifo_stage0_reg
  FIFO2 #(.width(32'd37),
	  .guarded(32'd1)) fma_multiplier_fifo_stage0_reg(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fma_multiplier_fifo_stage0_reg$D_IN),
							  .ENQ(fma_multiplier_fifo_stage0_reg$ENQ),
							  .DEQ(fma_multiplier_fifo_stage0_reg$DEQ),
							  .CLR(fma_multiplier_fifo_stage0_reg$CLR),
							  .D_OUT(fma_multiplier_fifo_stage0_reg$D_OUT),
							  .FULL_N(fma_multiplier_fifo_stage0_reg$FULL_N),
							  .EMPTY_N(fma_multiplier_fifo_stage0_reg$EMPTY_N));

  // submodule ftop_fToP_fifo_output_reg
  FIFO2 #(.width(32'd24),
	  .guarded(32'd1)) ftop_fToP_fifo_output_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ftop_fToP_fifo_output_reg$D_IN),
						     .ENQ(ftop_fToP_fifo_output_reg$ENQ),
						     .DEQ(ftop_fToP_fifo_output_reg$DEQ),
						     .CLR(ftop_fToP_fifo_output_reg$CLR),
						     .D_OUT(ftop_fToP_fifo_output_reg$D_OUT),
						     .FULL_N(ftop_fToP_fifo_output_reg$FULL_N),
						     .EMPTY_N(ftop_fToP_fifo_output_reg$EMPTY_N));

  // submodule ftop_fToP_fifo_stage0_reg
  FIFO2 #(.width(32'd29),
	  .guarded(32'd1)) ftop_fToP_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ftop_fToP_fifo_stage0_reg$D_IN),
						     .ENQ(ftop_fToP_fifo_stage0_reg$ENQ),
						     .DEQ(ftop_fToP_fifo_stage0_reg$DEQ),
						     .CLR(ftop_fToP_fifo_stage0_reg$CLR),
						     .D_OUT(ftop_fToP_fifo_stage0_reg$D_OUT),
						     .FULL_N(ftop_fToP_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(ftop_fToP_fifo_stage0_reg$EMPTY_N));

  // submodule ftop_ffO
  FIFO2 #(.width(32'd24), .guarded(32'd1)) ftop_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ftop_ffO$D_IN),
						    .ENQ(ftop_ffO$ENQ),
						    .DEQ(ftop_ffO$DEQ),
						    .CLR(ftop_ffO$CLR),
						    .D_OUT(ftop_ffO$D_OUT),
						    .FULL_N(ftop_ffO$FULL_N),
						    .EMPTY_N(ftop_ffO$EMPTY_N));

  // submodule need_normalize
  FIFO1 #(.width(32'd1), .guarded(32'd1)) need_normalize(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(need_normalize$D_IN),
							 .ENQ(need_normalize$ENQ),
							 .DEQ(need_normalize$DEQ),
							 .CLR(need_normalize$CLR),
							 .D_OUT(),
							 .FULL_N(),
							 .EMPTY_N());

  // submodule normalizer_fifo_output_reg
  FIFO2 #(.width(32'd20),
	  .guarded(32'd1)) normalizer_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_output_reg$D_IN),
						      .ENQ(normalizer_fifo_output_reg$ENQ),
						      .DEQ(normalizer_fifo_output_reg$DEQ),
						      .CLR(normalizer_fifo_output_reg$CLR),
						      .D_OUT(normalizer_fifo_output_reg$D_OUT),
						      .FULL_N(normalizer_fifo_output_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_output_reg$EMPTY_N));

  // submodule normalizer_fifo_stage0_reg
  FIFO2 #(.width(32'd34),
	  .guarded(32'd1)) normalizer_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage0_reg$D_IN),
						      .ENQ(normalizer_fifo_stage0_reg$ENQ),
						      .DEQ(normalizer_fifo_stage0_reg$DEQ),
						      .CLR(normalizer_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage1_reg
  FIFO2 #(.width(32'd38),
	  .guarded(32'd1)) normalizer_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage1_reg$D_IN),
						      .ENQ(normalizer_fifo_stage1_reg$ENQ),
						      .DEQ(normalizer_fifo_stage1_reg$DEQ),
						      .CLR(normalizer_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage2_reg
  FIFO2 #(.width(32'd20),
	  .guarded(32'd1)) normalizer_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage2_reg$D_IN),
						      .ENQ(normalizer_fifo_stage2_reg$ENQ),
						      .DEQ(normalizer_fifo_stage2_reg$DEQ),
						      .CLR(normalizer_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule opcode_norm
  FIFO1 #(.width(32'd3), .guarded(32'd1)) opcode_norm(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(opcode_norm$D_IN),
						      .ENQ(opcode_norm$ENQ),
						      .DEQ(opcode_norm$DEQ),
						      .CLR(opcode_norm$CLR),
						      .D_OUT(opcode_norm$D_OUT),
						      .FULL_N(opcode_norm$FULL_N),
						      .EMPTY_N(opcode_norm$EMPTY_N));

  // submodule opcode_out
  FIFO1 #(.width(32'd3), .guarded(32'd1)) opcode_out(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(opcode_out$D_IN),
						     .ENQ(opcode_out$ENQ),
						     .DEQ(opcode_out$DEQ),
						     .CLR(opcode_out$CLR),
						     .D_OUT(opcode_out$D_OUT),
						     .FULL_N(opcode_out$FULL_N),
						     .EMPTY_N(opcode_out$EMPTY_N));

  // submodule ptof_ffO
  FIFO2 #(.width(32'd35), .guarded(32'd1)) ptof_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ptof_ffO$D_IN),
						    .ENQ(ptof_ffO$ENQ),
						    .DEQ(ptof_ffO$DEQ),
						    .CLR(ptof_ffO$CLR),
						    .D_OUT(ptof_ffO$D_OUT),
						    .FULL_N(ptof_ffO$FULL_N),
						    .EMPTY_N(ptof_ffO$EMPTY_N));

  // submodule ptof_ptoF_fifo_output_reg
  FIFO2 #(.width(32'd35),
	  .guarded(32'd1)) ptof_ptoF_fifo_output_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ptof_ptoF_fifo_output_reg$D_IN),
						     .ENQ(ptof_ptoF_fifo_output_reg$ENQ),
						     .DEQ(ptof_ptoF_fifo_output_reg$DEQ),
						     .CLR(ptof_ptoF_fifo_output_reg$CLR),
						     .D_OUT(ptof_ptoF_fifo_output_reg$D_OUT),
						     .FULL_N(ptof_ptoF_fifo_output_reg$FULL_N),
						     .EMPTY_N(ptof_ptoF_fifo_output_reg$EMPTY_N));

  // submodule ptof_ptoF_fifo_stage0_reg
  FIFO2 #(.width(32'd42),
	  .guarded(32'd1)) ptof_ptoF_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ptof_ptoF_fifo_stage0_reg$D_IN),
						     .ENQ(ptof_ptoF_fifo_stage0_reg$ENQ),
						     .DEQ(ptof_ptoF_fifo_stage0_reg$DEQ),
						     .CLR(ptof_ptoF_fifo_stage0_reg$CLR),
						     .D_OUT(ptof_ptoF_fifo_stage0_reg$D_OUT),
						     .FULL_N(ptof_ptoF_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(ptof_ptoF_fifo_stage0_reg$EMPTY_N));

  // submodule ptoq_ffO
  FIFO20 #(.guarded(32'd1)) ptoq_ffO(.RST(RST_N),
				     .CLK(CLK),
				     .ENQ(ptoq_ffO$ENQ),
				     .DEQ(ptoq_ffO$DEQ),
				     .CLR(ptoq_ffO$CLR),
				     .FULL_N(ptoq_ffO$FULL_N),
				     .EMPTY_N(ptoq_ffO$EMPTY_N));

  // submodule ptoq_positToquire_fifo_output_reg
  FIFO20 #(.guarded(32'd1)) ptoq_positToquire_fifo_output_reg(.RST(RST_N),
							      .CLK(CLK),
							      .ENQ(ptoq_positToquire_fifo_output_reg$ENQ),
							      .DEQ(ptoq_positToquire_fifo_output_reg$DEQ),
							      .CLR(ptoq_positToquire_fifo_output_reg$CLR),
							      .FULL_N(ptoq_positToquire_fifo_output_reg$FULL_N),
							      .EMPTY_N(ptoq_positToquire_fifo_output_reg$EMPTY_N));

  // submodule ptoq_positToquire_fifo_stage0_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) ptoq_positToquire_fifo_stage0_reg(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ptoq_positToquire_fifo_stage0_reg$D_IN),
							     .ENQ(ptoq_positToquire_fifo_stage0_reg$ENQ),
							     .DEQ(ptoq_positToquire_fifo_stage0_reg$DEQ),
							     .CLR(ptoq_positToquire_fifo_stage0_reg$CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N());

  // submodule ptoq_positToquire_fifo_stage1_reg
  FIFO2 #(.width(32'd115),
	  .guarded(32'd1)) ptoq_positToquire_fifo_stage1_reg(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ptoq_positToquire_fifo_stage1_reg$D_IN),
							     .ENQ(ptoq_positToquire_fifo_stage1_reg$ENQ),
							     .DEQ(ptoq_positToquire_fifo_stage1_reg$DEQ),
							     .CLR(ptoq_positToquire_fifo_stage1_reg$CLR),
							     .D_OUT(ptoq_positToquire_fifo_stage1_reg$D_OUT),
							     .FULL_N(ptoq_positToquire_fifo_stage1_reg$FULL_N),
							     .EMPTY_N(ptoq_positToquire_fifo_stage1_reg$EMPTY_N));

  // submodule qtop_ffO
  FIFO2 #(.width(32'd24), .guarded(32'd1)) qtop_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(qtop_ffO$D_IN),
						    .ENQ(qtop_ffO$ENQ),
						    .DEQ(qtop_ffO$DEQ),
						    .CLR(qtop_ffO$CLR),
						    .D_OUT(qtop_ffO$D_OUT),
						    .FULL_N(qtop_ffO$FULL_N),
						    .EMPTY_N(qtop_ffO$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_output_reg
  FIFO2 #(.width(32'd24),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_output_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_output_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_output_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_output_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_output_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_output_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_output_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_output_reg$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_stage0_reg
  FIFO2 #(.width(32'd137),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_stage0_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_stage0_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_stage0_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_stage0_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_stage0_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_stage0_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_stage0_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_stage1_reg
  FIFO2 #(.width(32'd24),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_stage1_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_stage1_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_stage1_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_stage1_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_stage1_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_stage1_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_stage1_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N));

  // rule RL_extract_in
  assign CAN_FIRE_RL_extract_in =
	     ffI$EMPTY_N && !opcode_in_rv[3] &&
	     IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329 ;
  assign WILL_FIRE_RL_extract_in = CAN_FIRE_RL_extract_in ;

  // rule RL_rl_fma
  assign CAN_FIRE_RL_rl_fma =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     fma_multiplier_fifo_stage0_reg$FULL_N &&
	     opcode_out$FULL_N &&
	     (opcode_in_rv$port1__read[2:0] == 3'd0 ||
	      opcode_in_rv$port1__read[2:0] == 3'd2) &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_fma = CAN_FIRE_RL_rl_fma ;

  // rule RL_rl_ptof
  assign CAN_FIRE_RL_rl_ptof =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     opcode_out$FULL_N &&
	     ptof_ptoF_fifo_stage0_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd5 ;
  assign WILL_FIRE_RL_rl_ptof = CAN_FIRE_RL_rl_ptof ;

  // rule RL_rl_ftop
  assign CAN_FIRE_RL_rl_ftop =
	     opcode_in_rv$port1__read[3] && ffI_f_rv$port1__read[32] &&
	     ftop_fToP_fifo_stage0_reg$FULL_N &&
	     opcode_norm$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd4 ;
  assign WILL_FIRE_RL_rl_ftop = CAN_FIRE_RL_rl_ftop ;

  // rule RL_rl_ptoq
  assign CAN_FIRE_RL_rl_ptoq =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     opcode_out$FULL_N &&
	     ptoq_positToquire_fifo_stage1_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd7 &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_ptoq = CAN_FIRE_RL_rl_ptoq ;

  // rule RL_rl_qtop
  assign CAN_FIRE_RL_rl_qtop =
	     opcode_in_rv$port1__read[3] && opcode_norm$FULL_N &&
	     qtop_quireToPosit1_fifo_stage0_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd6 &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_qtop = CAN_FIRE_RL_rl_qtop ;

  // rule RL_rl_norm
  assign CAN_FIRE_RL_rl_norm =
	     opcode_out$FULL_N && opcode_norm$EMPTY_N &&
	     IF_opcode_norm_first__158_EQ_4_159_THEN_ftop_f_ETC___d1168 ;
  assign WILL_FIRE_RL_rl_norm =
	     CAN_FIRE_RL_rl_norm && !WILL_FIRE_RL_rl_ptoq &&
	     !WILL_FIRE_RL_rl_ptof &&
	     !WILL_FIRE_RL_rl_fma ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out =
	     opcode_out$EMPTY_N &&
	     IF_opcode_out_first__548_EQ_0_549_OR_opcode_ou_ETC___d1571 ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_fma_rl_connect1
  assign CAN_FIRE_RL_fma_rl_connect1 =
	     fma_multiplier_fifo_output_reg$EMPTY_N &&
	     fma_adder_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_rl_connect1 = CAN_FIRE_RL_fma_rl_connect1 ;

  // rule RL_fma_rl_out
  assign CAN_FIRE_RL_fma_rl_out =
	     fma_adder_fifo_output_reg$EMPTY_N && fma_ffO$FULL_N ;
  assign WILL_FIRE_RL_fma_rl_out = CAN_FIRE_RL_fma_rl_out ;

  // rule RL_fma_multiplier_stage_1
  assign CAN_FIRE_RL_fma_multiplier_stage_1 =
	     fma_multiplier_fifo_stage0_reg$EMPTY_N &&
	     fma_multiplier_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_multiplier_stage_1 =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;

  // rule RL_fma_adder_stage_1
  assign CAN_FIRE_RL_fma_adder_stage_1 =
	     fma_adder_fifo_stage0_reg$EMPTY_N &&
	     fma_adder_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_adder_stage_1 = CAN_FIRE_RL_fma_adder_stage_1 ;

  // rule RL_ptoq_rl_out
  assign CAN_FIRE_RL_ptoq_rl_out =
	     ptoq_positToquire_fifo_output_reg$EMPTY_N && ptoq_ffO$FULL_N ;
  assign WILL_FIRE_RL_ptoq_rl_out = CAN_FIRE_RL_ptoq_rl_out ;

  // rule RL_ptoq_positToquire_stage_2
  assign CAN_FIRE_RL_ptoq_positToquire_stage_2 =
	     ptoq_positToquire_fifo_stage1_reg$EMPTY_N &&
	     ptoq_positToquire_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ptoq_positToquire_stage_2 =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;

  // rule RL_qtop_rl_out
  assign CAN_FIRE_RL_qtop_rl_out =
	     qtop_quireToPosit1_fifo_output_reg$EMPTY_N && qtop_ffO$FULL_N ;
  assign WILL_FIRE_RL_qtop_rl_out = CAN_FIRE_RL_qtop_rl_out ;

  // rule RL_qtop_quireToPosit1_stage_1
  assign CAN_FIRE_RL_qtop_quireToPosit1_stage_1 =
	     qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N &&
	     qtop_quireToPosit1_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_qtop_quireToPosit1_stage_1 =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;

  // rule RL_qtop_quireToPosit1_stage_2
  assign CAN_FIRE_RL_qtop_quireToPosit1_stage_2 =
	     qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N &&
	     qtop_quireToPosit1_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_qtop_quireToPosit1_stage_2 =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;

  // rule RL_ftop_rl_out
  assign CAN_FIRE_RL_ftop_rl_out =
	     ftop_fToP_fifo_output_reg$EMPTY_N && ftop_ffO$FULL_N ;
  assign WILL_FIRE_RL_ftop_rl_out = CAN_FIRE_RL_ftop_rl_out ;

  // rule RL_ftop_fToP_stage_1
  assign CAN_FIRE_RL_ftop_fToP_stage_1 =
	     ftop_fToP_fifo_stage0_reg$EMPTY_N &&
	     ftop_fToP_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ftop_fToP_stage_1 = CAN_FIRE_RL_ftop_fToP_stage_1 ;

  // rule RL_ptof_rl_out
  assign CAN_FIRE_RL_ptof_rl_out =
	     ptof_ptoF_fifo_output_reg$EMPTY_N && ptof_ffO$FULL_N ;
  assign WILL_FIRE_RL_ptof_rl_out = CAN_FIRE_RL_ptof_rl_out ;

  // rule RL_ptof_ptoF_stage_2
  assign CAN_FIRE_RL_ptof_ptoF_stage_2 =
	     ptof_ptoF_fifo_stage0_reg$EMPTY_N &&
	     ptof_ptoF_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ptof_ptoF_stage_2 = CAN_FIRE_RL_ptof_ptoF_stage_2 ;

  // inputs to muxes for submodule ports
  assign MUX_opcode_out$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptoq || WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fma ;
  assign MUX_rg_quire_busy$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd7) ;
  assign MUX_rg_quire_busy$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 ;
  assign MUX_rg_quire$write_1__VAL_1 =
	     (ptoq_positToquire_fifo_stage1_reg$D_OUT[1:0] == 2'd2) ?
	       128'd0 :
	       twos_complement_carry_int_frac__h14334 ;
  assign MUX_rg_quire$write_1__VAL_2 =
	     (x__h1236 | y__h1237) ?
	       128'h80000000000000000000000000000000 :
	       IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d110 ;

  // inlined wires
  assign opcode_in_rv$port0__write_1 = { 1'd1, ffI$D_OUT[2:0] } ;
  assign opcode_in_rv$port1__read =
	     CAN_FIRE_RL_extract_in ?
	       opcode_in_rv$port0__write_1 :
	       opcode_in_rv ;
  assign opcode_in_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_qtop || WILL_FIRE_RL_rl_ptoq ||
	     WILL_FIRE_RL_rl_ftop ||
	     WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fma ;
  assign opcode_in_rv$port2__read =
	     opcode_in_rv$EN_port1__write ? 4'd2 : opcode_in_rv$port1__read ;
  assign ffI_f_rv$EN_port0__write =
	     WILL_FIRE_RL_extract_in && ffI$D_OUT[2:0] == 3'd4 ;
  assign ffI_f_rv$port0__write_1 = { 1'd1, ffI$D_OUT[103:72] } ;
  assign ffI_f_rv$port1__read =
	     ffI_f_rv$EN_port0__write ? ffI_f_rv$port0__write_1 : ffI_f_rv ;
  assign ffI_f_rv$port2__read =
	     CAN_FIRE_RL_rl_ftop ? 33'h0AAAAAAAA : ffI_f_rv$port1__read ;

  // register ffI_f_rv
  assign ffI_f_rv$D_IN = ffI_f_rv$port2__read ;
  assign ffI_f_rv$EN = 1'b1 ;

  // register fma_check_quire
  assign fma_check_quire$D_IN = 1'b0 ;
  assign fma_check_quire$EN = 1'b0 ;

  // register opcode_in_rv
  assign opcode_in_rv$D_IN = opcode_in_rv$port2__read ;
  assign opcode_in_rv$EN = 1'b1 ;

  // register rg_quire
  assign rg_quire$D_IN =
	     WILL_FIRE_RL_ptoq_positToquire_stage_2 ?
	       MUX_rg_quire$write_1__VAL_1 :
	       MUX_rg_quire$write_1__VAL_2 ;
  assign rg_quire$EN =
	     WILL_FIRE_RL_fma_adder_stage_1 ||
	     WILL_FIRE_RL_ptoq_positToquire_stage_2 ;

  // register rg_quire_busy
  assign rg_quire_busy$D_IN =
	     !MUX_rg_quire_busy$write_1__SEL_1 &&
	     !MUX_rg_quire_busy$write_1__SEL_2 ;
  assign rg_quire_busy$EN =
	     WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 ||
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd7) ||
	     WILL_FIRE_RL_rl_qtop ||
	     WILL_FIRE_RL_rl_ptoq ||
	     WILL_FIRE_RL_rl_fma ;

  // submodule extracter1_fifo_output_reg
  assign extracter1_fifo_output_reg$D_IN =
	     { (ffI$D_OUT[86:72] == 15'd0 && !ffI$D_OUT[87]) ?
		 2'd2 :
		 ((ffI$D_OUT[86:72] == 15'd0 && ffI$D_OUT[87]) ? 2'd1 : 2'd0),
	       ffI$D_OUT[87],
	       IF_ffI_first__06_BITS_86_TO_72_38_EQ_0_39_AND__ETC___d518 } ;
  assign extracter1_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_extract_in &&
	     (ffI$D_OUT[2:0] == 3'd1 || ffI$D_OUT[2:0] == 3'd3 ||
	      ffI$D_OUT[2:0] == 3'd2 ||
	      ffI$D_OUT[2:0] == 3'd0 ||
	      ffI$D_OUT[2:0] == 3'd5 ||
	      ffI$D_OUT[2:0] == 3'd7) ;
  assign extracter1_fifo_output_reg$DEQ = MUX_opcode_out$enq_1__SEL_1 ;
  assign extracter1_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage0_reg
  assign extracter1_fifo_stage0_reg$D_IN = 18'h0 ;
  assign extracter1_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage1_reg
  assign extracter1_fifo_stage1_reg$D_IN = 25'h0 ;
  assign extracter1_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage2_reg
  assign extracter1_fifo_stage2_reg$D_IN = 22'h0 ;
  assign extracter1_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_output_reg
  assign extracter2_fifo_output_reg$D_IN =
	     { (IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524[14:0] ==
		15'd0 &&
		!IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524[15]) ?
		 2'd2 :
		 ((IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524[14:0] ==
		   15'd0 &&
		   IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524[15]) ?
		    2'd1 :
		    2'd0),
	       IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524[15],
	       IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR__ETC___d705 } ;
  assign extracter2_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_extract_in &&
	     (ffI$D_OUT[2:0] == 3'd1 || ffI$D_OUT[2:0] == 3'd3 ||
	      ffI$D_OUT[2:0] == 3'd2 ||
	      ffI$D_OUT[2:0] == 3'd0) ;
  assign extracter2_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_fma ;
  assign extracter2_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage0_reg
  assign extracter2_fifo_stage0_reg$D_IN = 18'h0 ;
  assign extracter2_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage1_reg
  assign extracter2_fifo_stage1_reg$D_IN = 25'h0 ;
  assign extracter2_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage2_reg
  assign extracter2_fifo_stage2_reg$D_IN = 22'h0 ;
  assign extracter2_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule ffI
  assign ffI$D_IN =
	     { CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q29,
	       server_core_request_put[135:72],
	       CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q30,
	       server_core_request_put[69:0] } ;
  assign ffI$ENQ = EN_server_core_request_put ;
  assign ffI$DEQ = CAN_FIRE_RL_extract_in ;
  assign ffI$CLR = 1'b0 ;

  // submodule ffO
  always@(opcode_out$D_OUT or
	  normalizer_fifo_output_reg$D_OUT or ptof_ffO$D_OUT)
  begin
    case (opcode_out$D_OUT)
      3'd0, 3'd2, 3'd7: ffO$D_IN = 71'h555555555555400000;
      3'd5:
	  ffO$D_IN =
	      { 34'h1AAAAAAAA,
		ptof_ffO$D_OUT[34:3],
		2'd0,
		ptof_ffO$D_OUT[2:1] == 2'd1,
		ptof_ffO$D_OUT[2:1] == 2'd2 && ptof_ffO$D_OUT[0],
		ptof_ffO$D_OUT[0] };
      default: ffO$D_IN =
		   { 49'h12AAAAAAAAAAA,
		     normalizer_fifo_output_reg$D_OUT[19:3],
		     normalizer_fifo_output_reg$D_OUT[19],
		     1'd0,
		     normalizer_fifo_output_reg$D_OUT[2:1] == 2'd1,
		     normalizer_fifo_output_reg$D_OUT[2:1] == 2'd2 &&
		     normalizer_fifo_output_reg$D_OUT[0],
		     normalizer_fifo_output_reg$D_OUT[0] };
    endcase
  end
  assign ffO$ENQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd7 ||
	      opcode_out$D_OUT == 3'd5 ||
	      opcode_out$D_OUT == 3'd4 ||
	      opcode_out$D_OUT == 3'd6) ;
  assign ffO$DEQ = EN_server_core_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule fma_adder_fifo_output_reg
  assign fma_adder_fifo_output_reg$ENQ = CAN_FIRE_RL_fma_adder_stage_1 ;
  assign fma_adder_fifo_output_reg$DEQ = CAN_FIRE_RL_fma_rl_out ;
  assign fma_adder_fifo_output_reg$CLR = 1'b0 ;

  // submodule fma_adder_fifo_stage0_reg
  assign fma_adder_fifo_stage0_reg$D_IN =
	     { IF_NOT_rg_quire_15_BIT_127_16_17_AND_NOT_fma_m_ETC___d130,
	       x__h13789,
	       x__h13794,
	       (rg_quire == 128'd0) ? 2'd2 : 2'd0,
	       fma_multiplier_fifo_output_reg$D_OUT[132:130] } ;
  assign fma_adder_fifo_stage0_reg$ENQ = CAN_FIRE_RL_fma_rl_connect1 ;
  assign fma_adder_fifo_stage0_reg$DEQ = CAN_FIRE_RL_fma_adder_stage_1 ;
  assign fma_adder_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule fma_ffO
  assign fma_ffO$ENQ = CAN_FIRE_RL_fma_rl_out ;
  assign fma_ffO$DEQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2) ;
  assign fma_ffO$CLR = 1'b0 ;

  // submodule fma_multiplier_fifo_output_reg
  assign fma_multiplier_fifo_output_reg$D_IN =
	     { (twos_complement_carry_int_frac__h437 == 128'd0 &&
		fma_multiplier_fifo_stage0_reg$D_OUT[35:34] == 2'd0) ?
		 2'd2 :
		 fma_multiplier_fifo_stage0_reg$D_OUT[35:34],
	       fma_multiplier_fifo_stage0_reg$D_OUT[36],
	       twos_complement_carry_int_frac__h437,
	       x__h818,
	       x__h862 } ;
  assign fma_multiplier_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;
  assign fma_multiplier_fifo_output_reg$DEQ = CAN_FIRE_RL_fma_rl_connect1 ;
  assign fma_multiplier_fifo_output_reg$CLR = 1'b0 ;

  // submodule fma_multiplier_fifo_stage0_reg
  assign fma_multiplier_fifo_stage0_reg$D_IN =
	     { x__h35944,
	       (extracter1_fifo_output_reg$D_OUT[20:19] == 2'd2 &&
		extracter2_fifo_output_reg$D_OUT[20:19] == 2'd2) ?
		 2'd2 :
		 ((extracter1_fifo_output_reg$D_OUT[20:19] == 2'd1 ||
		   extracter2_fifo_output_reg$D_OUT[20:19] == 2'd1) ?
		    2'd1 :
		    2'd0),
	       extracter1_fifo_output_reg_first__51_BIT_18_66_ETC___d788 } ;
  assign fma_multiplier_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_fma ;
  assign fma_multiplier_fifo_stage0_reg$DEQ =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;
  assign fma_multiplier_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ftop_fToP_fifo_output_reg
  assign ftop_fToP_fifo_output_reg$D_IN =
	     { ftop_fToP_fifo_stage0_reg$D_OUT[28:19],
	       x_frac__h15845,
	       x__h15971,
	       x__h16048 } ;
  assign ftop_fToP_fifo_output_reg$ENQ = CAN_FIRE_RL_ftop_fToP_stage_1 ;
  assign ftop_fToP_fifo_output_reg$DEQ = CAN_FIRE_RL_ftop_rl_out ;
  assign ftop_fToP_fifo_output_reg$CLR = 1'b0 ;

  // submodule ftop_fToP_fifo_stage0_reg
  assign ftop_fToP_fifo_stage0_reg$D_IN =
	     { ffI_f_rv$port1__read[31],
	       (ffI_f_rv$port1__read[30:23] == 8'd255 &&
		ffI_f_rv$port1__read[22:0] == 23'd0) ?
		 2'd1 :
		 ((ffI_f_rv$port1__read[30:23] == 8'd0 &&
		   ffI_f_rv$port1__read[22:0] == 23'd0) ?
		    2'd2 :
		    2'd0),
	       x__h37180,
	       IF_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_T_ETC___d843,
	       ffI_f_rv$port1__read[22:11],
	       IF_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_T_ETC___d854,
	       ffI_f_rv$port1__read[10],
	       x__h37343 } ;
  assign ftop_fToP_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_ftop ;
  assign ftop_fToP_fifo_stage0_reg$DEQ = CAN_FIRE_RL_ftop_fToP_stage_1 ;
  assign ftop_fToP_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ftop_ffO
  assign ftop_ffO$D_IN = ftop_fToP_fifo_output_reg$D_OUT ;
  assign ftop_ffO$ENQ = CAN_FIRE_RL_ftop_rl_out ;
  assign ftop_ffO$DEQ = WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 ;
  assign ftop_ffO$CLR = 1'b0 ;

  // submodule need_normalize
  assign need_normalize$D_IN = 1'b0 ;
  assign need_normalize$ENQ = 1'b0 ;
  assign need_normalize$DEQ = 1'b0 ;
  assign need_normalize$CLR = 1'b0 ;

  // submodule normalizer_fifo_output_reg
  assign normalizer_fifo_output_reg$D_IN =
	     (opcode_norm$D_OUT == 3'd4) ?
	       { ftop_ffO$D_OUT[20],
		 output_regf_out_posit__h60033,
		 ftop_ffO$D_OUT[22:21],
		 flag_prev_truncate__h60011 - _theResult____h60012 ||
		 a__h60049 == 15'd0 &&
		 NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1330 } :
	       { qtop_ffO$D_OUT[20],
		 output_regf_out_posit__h63643,
		 qtop_ffO$D_OUT[22:21],
		 flag_prev_truncate__h63625 - _theResult____h63626 ||
		 a__h63659 == 15'd0 &&
		 NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1504 } ;
  assign normalizer_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_rl_norm &&
	     (opcode_norm$D_OUT == 3'd4 || opcode_norm$D_OUT == 3'd6) ;
  assign normalizer_fifo_output_reg$DEQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd4 || opcode_out$D_OUT == 3'd6) ;
  assign normalizer_fifo_output_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage0_reg
  assign normalizer_fifo_stage0_reg$D_IN = 34'h0 ;
  assign normalizer_fifo_stage0_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage1_reg
  assign normalizer_fifo_stage1_reg$D_IN = 38'h0 ;
  assign normalizer_fifo_stage1_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage2_reg
  assign normalizer_fifo_stage2_reg$D_IN = 20'h0 ;
  assign normalizer_fifo_stage2_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule opcode_norm
  assign opcode_norm$D_IN = opcode_in_rv$port1__read[2:0] ;
  assign opcode_norm$ENQ = WILL_FIRE_RL_rl_qtop || WILL_FIRE_RL_rl_ftop ;
  assign opcode_norm$DEQ = WILL_FIRE_RL_rl_norm ;
  assign opcode_norm$CLR = 1'b0 ;

  // submodule opcode_out
  assign opcode_out$D_IN =
	     MUX_opcode_out$enq_1__SEL_1 ?
	       opcode_in_rv$port1__read[2:0] :
	       opcode_norm$D_OUT ;
  assign opcode_out$ENQ =
	     WILL_FIRE_RL_rl_ptoq || WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fma ||
	     WILL_FIRE_RL_rl_norm ;
  assign opcode_out$DEQ = CAN_FIRE_RL_rl_out ;
  assign opcode_out$CLR = 1'b0 ;

  // submodule ptof_ffO
  assign ptof_ffO$D_IN = ptof_ptoF_fifo_output_reg$D_OUT ;
  assign ptof_ffO$ENQ = CAN_FIRE_RL_ptof_rl_out ;
  assign ptof_ffO$DEQ = WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd5 ;
  assign ptof_ffO$CLR = 1'b0 ;

  // submodule ptof_ptoF_fifo_output_reg
  assign ptof_ptoF_fifo_output_reg$D_IN =
	     { float_no__h16601,
	       (ptof_ptoF_fifo_stage0_reg$D_OUT[40:39] == 2'd0) ?
		 CASE_float_no6601_0_2_4286578688_1_0__q31 :
		 ptof_ptoF_fifo_stage0_reg$D_OUT[40:39],
	       add_round__h16599 } ;
  assign ptof_ptoF_fifo_output_reg$ENQ = CAN_FIRE_RL_ptof_ptoF_stage_2 ;
  assign ptof_ptoF_fifo_output_reg$DEQ = CAN_FIRE_RL_ptof_rl_out ;
  assign ptof_ptoF_fifo_output_reg$CLR = 1'b0 ;

  // submodule ptof_ptoF_fifo_stage0_reg
  assign ptof_ptoF_fifo_stage0_reg$D_IN =
	     { extracter1_fifo_output_reg$D_OUT[18],
	       extracter1_fifo_output_reg$D_OUT[20:19],
	       IF_SEXT_extracter1_fifo_output_reg_first__51_B_ETC___d801,
	       stage0_regf_frac__h36587,
	       IF_SEXT_extracter1_fifo_output_reg_first__51_B_ETC___d812,
	       2'd1 } ;
  assign ptof_ptoF_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_ptof ;
  assign ptof_ptoF_fifo_stage0_reg$DEQ = CAN_FIRE_RL_ptof_ptoF_stage_2 ;
  assign ptof_ptoF_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ptoq_ffO
  assign ptoq_ffO$ENQ = CAN_FIRE_RL_ptoq_rl_out ;
  assign ptoq_ffO$DEQ = WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd7 ;
  assign ptoq_ffO$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_output_reg
  assign ptoq_positToquire_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;
  assign ptoq_positToquire_fifo_output_reg$DEQ = CAN_FIRE_RL_ptoq_rl_out ;
  assign ptoq_positToquire_fifo_output_reg$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_stage0_reg
  assign ptoq_positToquire_fifo_stage0_reg$D_IN = 21'h0 ;
  assign ptoq_positToquire_fifo_stage0_reg$ENQ = 1'b0 ;
  assign ptoq_positToquire_fifo_stage0_reg$DEQ = 1'b0 ;
  assign ptoq_positToquire_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_stage1_reg
  assign ptoq_positToquire_fifo_stage1_reg$D_IN =
	     { extracter1_fifo_output_reg$D_OUT[18],
	       int_frac__h37519,
	       extracter1_fifo_output_reg$D_OUT[20:19] } ;
  assign ptoq_positToquire_fifo_stage1_reg$ENQ = CAN_FIRE_RL_rl_ptoq ;
  assign ptoq_positToquire_fifo_stage1_reg$DEQ =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;
  assign ptoq_positToquire_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule qtop_ffO
  assign qtop_ffO$D_IN = qtop_quireToPosit1_fifo_output_reg$D_OUT ;
  assign qtop_ffO$ENQ = CAN_FIRE_RL_qtop_rl_out ;
  assign qtop_ffO$DEQ = MUX_rg_quire_busy$write_1__SEL_2 ;
  assign qtop_ffO$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_output_reg
  assign qtop_quireToPosit1_fifo_output_reg$D_IN =
	     qtop_quireToPosit1_fifo_stage1_reg$D_OUT ;
  assign qtop_quireToPosit1_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;
  assign qtop_quireToPosit1_fifo_output_reg$DEQ = CAN_FIRE_RL_qtop_rl_out ;
  assign qtop_quireToPosit1_fifo_output_reg$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_stage0_reg
  assign qtop_quireToPosit1_fifo_stage0_reg$D_IN =
	     { rg_quire[127],
	       (!rg_quire[127] && rg_quire[126:0] == 127'd0) ? 2'd2 : 2'd0,
	       rg_quire_15_BIT_127_16_AND_rg_quire_15_BITS_12_ETC___d1155 } ;
  assign qtop_quireToPosit1_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_qtop ;
  assign qtop_quireToPosit1_fifo_stage0_reg$DEQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;
  assign qtop_quireToPosit1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_stage1_reg
  assign qtop_quireToPosit1_fifo_stage1_reg$D_IN =
	     { qtop_quireToPosit1_fifo_stage0_reg$D_OUT[136:127],
	       stage1_regf_frac__h14955,
	       x__h15228,
	       x__h15271 } ;
  assign qtop_quireToPosit1_fifo_stage1_reg$ENQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;
  assign qtop_quireToPosit1_fifo_stage1_reg$DEQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;
  assign qtop_quireToPosit1_fifo_stage1_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_THEN__ETC___d1149 =
	     (_0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_THEN_0_M_ETC___d1144[7] &&
	      _71_MINUS_0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_ETC___d1146[7]) ?
	       8'd127 :
	       _71_MINUS_0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_ETC___d1146 ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_T_ETC___d843 =
	     _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d839 ?
	       6'd36 :
	       (_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d840 ?
		  _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d837[5:0] :
		  6'd28) ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_T_ETC___d854 =
	     _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d839 ?
	       IF_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_T_ETC__q27[4:0] :
	       (_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d840 ?
		  5'd0 :
		  IF_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_T_ETC__q28[4:0]) ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_T_ETC__q27 =
	     ((_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d845 ^
	       8'h80) <=
	      8'd113) ?
	       8'd241 :
	       _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d845 ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_T_ETC__q28 =
	     ((_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d849 ^
	       8'h80) <=
	      8'd143) ?
	       _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d849 :
	       8'd15 ;
  assign IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177__ETC___d1210 =
	     (_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196 ==
	      4'd0) ?
	       _14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196 :
	       _14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196 -
	       4'd1 ;
  assign IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351__ETC___d1384 =
	     (_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370 ==
	      4'd0) ?
	       _14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370 :
	       _14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370 -
	       4'd1 ;
  assign IF_IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_1_ETC___d1269 =
	     (shift_new0__h60002 == 2'd0) ?
	       !ftop_ffO$D_OUT[1] :
	       !ftop_ffO_first__172_BITS_13_TO_2_225_BIT_IF_14_ETC___d1243 ;
  assign IF_IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_3_ETC___d1443 =
	     (shift_new0__h63616 == 2'd0) ?
	       !qtop_ffO$D_OUT[1] :
	       !qtop_ffO_first__346_BITS_13_TO_2_399_BIT_IF_14_ETC___d1417 ;
  assign IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d664 =
	     new_inp__h24757[14] ?
	       ((!INV_new_inp4757__q12[14] && !INV_new_inp4757__q12[13] &&
		 !INV_new_inp4757__q12[12] &&
		 !INV_new_inp4757__q12[11] &&
		 !INV_new_inp4757__q12[10] &&
		 !INV_new_inp4757__q12[9] &&
		 !INV_new_inp4757__q12[8] &&
		 !INV_new_inp4757__q12[7] &&
		 !INV_new_inp4757__q12[6] &&
		 !INV_new_inp4757__q12[5] &&
		 !INV_new_inp4757__q12[4] &&
		 !INV_new_inp4757__q12[3] &&
		 !INV_new_inp4757__q12[2] &&
		 !INV_new_inp4757__q12[1] &&
		 !INV_new_inp4757__q12[0]) ?
		  4'd15 :
		  4'd14) -
	       x__h25371 :
	       ((!new_inp__h24757[13] && !new_inp__h24757[12] &&
		 !new_inp__h24757[11] &&
		 !new_inp__h24757[10] &&
		 !new_inp__h24757[9] &&
		 !new_inp__h24757[8] &&
		 !new_inp__h24757[7] &&
		 !new_inp__h24757[6] &&
		 !new_inp__h24757[5] &&
		 !new_inp__h24757[4] &&
		 !new_inp__h24757[3] &&
		 !new_inp__h24757[2] &&
		 !new_inp__h24757[1] &&
		 !new_inp__h24757[0]) ?
		  4'd15 :
		  4'd14) -
	       x__h27509 ;
  assign IF_IF_NOT_IF_ftop_ffO_first__172_BIT_19_177_TH_ETC___d1297 =
	     (b__h60226[14] &&
	      !IF_NOT_IF_ftop_ffO_first__172_BIT_19_177_THEN__ETC___d1293[14]) ?
	       15'd32767 :
	       IF_NOT_IF_ftop_ffO_first__172_BIT_19_177_THEN__ETC___d1293 ;
  assign IF_IF_NOT_IF_qtop_ffO_first__346_BIT_19_351_TH_ETC___d1471 =
	     (b__h63836[14] &&
	      !IF_NOT_IF_qtop_ffO_first__346_BIT_19_351_THEN__ETC___d1467[14]) ?
	       15'd32767 :
	       IF_NOT_IF_qtop_ffO_first__346_BIT_19_351_THEN__ETC___d1467 ;
  assign IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR__ETC___d705 =
	     (IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524[14:0] ==
	      15'd0 &&
	      !IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524[15]) ?
	       18'd0 :
	       { SEXT_IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ__ETC___d603 +
		 { 5'd0, expo__h24764 },
		 frac__h24765 } ;
  assign IF_IF_ffI_first__06_BIT_87_40_THEN_0_MINUS_ffI_ETC___d477 =
	     new_inp__h19483[14] ?
	       ((!INV_new_inp9483__q2[14] && !INV_new_inp9483__q2[13] &&
		 !INV_new_inp9483__q2[12] &&
		 !INV_new_inp9483__q2[11] &&
		 !INV_new_inp9483__q2[10] &&
		 !INV_new_inp9483__q2[9] &&
		 !INV_new_inp9483__q2[8] &&
		 !INV_new_inp9483__q2[7] &&
		 !INV_new_inp9483__q2[6] &&
		 !INV_new_inp9483__q2[5] &&
		 !INV_new_inp9483__q2[4] &&
		 !INV_new_inp9483__q2[3] &&
		 !INV_new_inp9483__q2[2] &&
		 !INV_new_inp9483__q2[1] &&
		 !INV_new_inp9483__q2[0]) ?
		  4'd15 :
		  4'd14) -
	       x__h20026 :
	       ((!new_inp__h19483[13] && !new_inp__h19483[12] &&
		 !new_inp__h19483[11] &&
		 !new_inp__h19483[10] &&
		 !new_inp__h19483[9] &&
		 !new_inp__h19483[8] &&
		 !new_inp__h19483[7] &&
		 !new_inp__h19483[6] &&
		 !new_inp__h19483[5] &&
		 !new_inp__h19483[4] &&
		 !new_inp__h19483[3] &&
		 !new_inp__h19483[2] &&
		 !new_inp__h19483[1] &&
		 !new_inp__h19483[0]) ?
		  4'd15 :
		  4'd14) -
	       x__h22164 ;
  assign IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d110 =
	     (all_bits_0__h1193 & y__h7952 &&
	      fma_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd0 &&
	      fma_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd0) ?
	       128'd0 :
	       x__h7976 ;
  assign IF_NOT_IF_ftop_ffO_first__172_BIT_19_177_THEN__ETC___d1293 =
	     b__h60226 + b__h62768 ;
  assign IF_NOT_IF_qtop_ffO_first__346_BIT_19_351_THEN__ETC___d1467 =
	     b__h63836 + b__h66377 ;
  assign IF_NOT_rg_quire_15_BIT_127_16_17_AND_NOT_fma_m_ETC___d130 =
	     (!rg_quire[127] && !fma_multiplier_fifo_output_reg$D_OUT[129] &&
	      rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123[127]) ?
	       128'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       ((rg_quire[127] && fma_multiplier_fifo_output_reg$D_OUT[129] &&
		 !rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123[127]) ?
		  128'h80000000000000000000000000000000 :
		  rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123) ;
  assign IF_SEXT_extracter1_fifo_output_reg_first__51_B_ETC___d801 =
	     SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d798 ?
	       8'd129 :
	       (SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d799 ?
		  SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d797 :
		  8'd127) ;
  assign IF_SEXT_extracter1_fifo_output_reg_first__51_B_ETC___d812 =
	     SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d798 ?
	       (((SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC__q24[5:0] ^
		  6'h20) <=
		 6'd1) ?
		  6'd33 :
		  SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC__q24[5:0]) :
	       (SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d799 ?
		  6'd0 :
		  (((SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC__q25[5:0] ^
		     6'h20) <=
		    6'd63) ?
		     SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC__q25[5:0] :
		     6'd31)) ;
  assign IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12 =
	     (SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8[7] ?
		-SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8 :
		SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8) -
	     8'd56 ;
  assign IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15 =
	     (IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8[6:0] ^
	      7'h40) <=
	     7'd64 ;
  assign IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8 =
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12 +
	     8'd24 ;
  assign IF_extracter1_fifo_output_reg_first__51_BITS_2_ETC___d770 =
	     (extracter1_fifo_output_reg$D_OUT[20:19] == 2'd2) ?
	       2'b01 :
	       ((extracter2_fifo_output_reg$D_OUT[20:19] == 2'd2) ?
		  extracter2_fifo_output_reg$D_OUT[20:19] :
		  2'b11) ;
  assign IF_ffI_first__06_BITS_86_TO_72_38_EQ_0_39_AND__ETC___d518 =
	     (ffI$D_OUT[86:72] == 15'd0 && !ffI$D_OUT[87]) ?
	       18'd0 :
	       { SEXT_IF_IF_ffI_first__06_BIT_87_40_THEN_0_MINU_ETC___d416 +
		 { 5'd0, expo__h19490 },
		 frac__h19491 } ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d27 =
	     (fma_multiplier_fifo_stage0_reg$D_OUT[32] &&
	      !IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15 ||
	      (IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12 +
	       8'd2 ^
	       8'h80) <=
	      8'd128) ?
	       15'd0 :
	       x__h656[14:0] ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d36 =
	     (fma_multiplier_fifo_stage0_reg$D_OUT[32] &&
	      !IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15) ?
	       f_new___1__h696 :
	       f_new__h643 ;
  assign IF_ftop_fToP_fifo_stage0_reg_first__06_BIT_6_0_ETC___d213 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[6] ?
	       -ftop_fToP_fifo_stage0_reg$D_OUT[6:2] :
	       ftop_fToP_fifo_stage0_reg$D_OUT[6:2] ;
  assign IF_ftop_ffO_first__172_BIT_18_183_AND_NOT_ftop_ETC___d1189 =
	     (ftop_ffO$D_OUT[18] &&
	      !ftop_ffO_first__172_BITS_18_TO_15_184_PLUS_1___d1185[3]) ?
	       4'd15 :
	       ftop_ffO_first__172_BITS_18_TO_15_184_PLUS_1___d1185 ;
  assign IF_ftop_ffO_first__172_BIT_19_177_THEN_1_SL_14_ETC___d1217 =
	     b__h60408 + b__h61160 ;
  assign IF_new_inp4757_BIT_14_THEN_b5361_ELSE_b5363__q13 =
	     new_inp__h24757[14] ? b__h25361 : b__h25363 ;
  assign IF_new_inp9483_BIT_14_THEN_b0016_ELSE_b0018__q10 =
	     new_inp__h19483[14] ? b__h20016 : b__h20018 ;
  assign IF_opcode_norm_first__158_EQ_4_159_THEN_ftop_f_ETC___d1168 =
	     (opcode_norm$D_OUT == 3'd4) ?
	       ftop_ffO$EMPTY_N && normalizer_fifo_output_reg$FULL_N :
	       opcode_norm$D_OUT != 3'd6 ||
	       qtop_ffO$EMPTY_N && normalizer_fifo_output_reg$FULL_N ;
  assign IF_ptof_ptoF_fifo_stage0_reg_first__45_BIT_7_5_ETC___d259 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       -ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] ;
  assign IF_qtop_ffO_first__346_BIT_18_357_AND_NOT_qtop_ETC___d1363 =
	     (qtop_ffO$D_OUT[18] &&
	      !qtop_ffO_first__346_BITS_18_TO_15_358_PLUS_1___d1359[3]) ?
	       4'd15 :
	       qtop_ffO_first__346_BITS_18_TO_15_358_PLUS_1___d1359 ;
  assign IF_qtop_ffO_first__346_BIT_19_351_THEN_1_SL_14_ETC___d1391 =
	     b__h64018 + b__h64769 ;
  assign IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173 =
	     qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166 ?
	       carry_int_frac_shifted__h15124[126:114] :
	       13'd8191 ;
  assign INV_new_inp4757__q12 = ~new_inp__h24757 ;
  assign INV_new_inp9483__q2 = ~new_inp__h19483 ;
  assign NOT_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__17_ETC___d1285 =
	     !_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1271 &&
	     { 20'd0, (x__h62223[11:0] & ~(12'hFFE << x__h62560)) >> 0 } ==
	     32'd0 &&
	     IF_IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_1_ETC___d1269 ||
	     _14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196 ==
	     4'd0 &&
	     shift_new0__h60002 == 2'd0 ||
	     k_expo__h60005 == 15'd32767 &&
	     IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177__ETC___d1210 ==
	     4'd0 &&
	     x__h62223[11:0] == 12'd0 &&
	     IF_IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_1_ETC___d1269 ;
  assign NOT_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__17_ETC___d1329 =
	     _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234 !=
	     4'd0 &&
	     (_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234 !=
	      4'd1 ||
	      truncated_frac_msb__h60007) &&
	     (_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1271 ||
	      { 20'd0, (x__h62223[11:0] & ~(12'hFFE << x__h62560)) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h60007) &&
	     NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1326 ;
  assign NOT_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__34_ETC___d1459 =
	     !_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1445 &&
	     { 20'd0, (x__h65832[11:0] & ~(12'hFFE << x__h66169)) >> 0 } ==
	     32'd0 &&
	     IF_IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_3_ETC___d1443 ||
	     _14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370 ==
	     4'd0 &&
	     shift_new0__h63616 == 2'd0 ||
	     k_expo__h63619 == 15'd32767 &&
	     IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351__ETC___d1384 ==
	     4'd0 &&
	     x__h65832[11:0] == 12'd0 &&
	     IF_IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_3_ETC___d1443 ;
  assign NOT_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__34_ETC___d1503 =
	     _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408 !=
	     4'd0 &&
	     (_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408 !=
	      4'd1 ||
	      truncated_frac_msb__h63621) &&
	     (_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1445 ||
	      { 20'd0, (x__h65832[11:0] & ~(12'hFFE << x__h66169)) >> 0 } !=
	      32'd0 ||
	      truncated_frac_msb__h63621) &&
	     NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1500 ;
  assign NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1237 =
	     x2223_BITS_11_TO_0__q16[_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234] ;
  assign NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1246 =
	     x2223_BITS_11_TO_0__q16[x__h62399] ;
  assign NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1301 =
	     NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1237 ||
	     ((_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234 ==
	       4'd0) ?
		IF_IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_1_ETC___d1269 :
		!NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1246) ;
  assign NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1307 =
	     NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1301 ||
	     CASE_shift_new00002_0_NOT_ftop_ffOD_OUT_BIT_0_ETC__q19 ;
  assign NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1326 =
	     (_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196 !=
	      4'd0 ||
	      shift_new0__h60002 != 2'd0 ||
	      !NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1246) &&
	     (k_expo__h60005 != 15'd32767 ||
	      IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177__ETC___d1210 !=
	      4'd0 ||
	      x__h62223[11:0] != 12'd0 ||
	      truncated_frac_msb__h60007) ;
  assign NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1330 =
	     NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1307 ||
	     IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177__ETC___d1210 ==
	     4'd0 &&
	     !(~k_expo__h60005[0]) ||
	     NOT_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__17_ETC___d1329 ;
  assign NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1411 =
	     x5832_BITS_11_TO_0__q20[_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408] ;
  assign NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1420 =
	     x5832_BITS_11_TO_0__q20[x__h66008] ;
  assign NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1475 =
	     NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1411 ||
	     ((_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408 ==
	       4'd0) ?
		IF_IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_3_ETC___d1443 :
		!NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1420) ;
  assign NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1481 =
	     NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1475 ||
	     CASE_shift_new03616_0_NOT_qtop_ffOD_OUT_BIT_0_ETC__q23 ;
  assign NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1500 =
	     (_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370 !=
	      4'd0 ||
	      shift_new0__h63616 != 2'd0 ||
	      !NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1420) &&
	     (k_expo__h63619 != 15'd32767 ||
	      IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351__ETC___d1384 !=
	      4'd0 ||
	      x__h65832[11:0] != 12'd0 ||
	      truncated_frac_msb__h63621) ;
  assign NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1504 =
	     NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1481 ||
	     IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351__ETC___d1384 ==
	     4'd0 &&
	     !(~k_expo__h63619[0]) ||
	     NOT_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__34_ETC___d1503 ;
  assign NOT_IF_ftop_ffO_first__172_BIT_19_177_THEN_1_S_ETC___d1222 =
	     (!b__h60408[14] && b__h61160[14] ||
	      b__h60408[14] && !b__h61160[14]) &&
	     !IF_ftop_ffO_first__172_BIT_19_177_THEN_1_SL_14_ETC___d1217[14] ||
	     b__h60408[14] && b__h61160[14] ;
  assign NOT_IF_qtop_ffO_first__346_BIT_19_351_THEN_1_S_ETC___d1396 =
	     (!b__h64018[14] && b__h64769[14] ||
	      b__h64018[14] && !b__h64769[14]) &&
	     !IF_qtop_ffO_first__346_BIT_19_351_THEN_1_SL_14_ETC___d1391[14] ||
	     b__h64018[14] && b__h64769[14] ;
  assign NOT_NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_ETC___d1259 =
	     !NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1237 &&
	     flag_prev_truncate__h60011 &&
	     CASE_shift_new00002_0_ftop_ffOD_OUT_BIT_0_1_f_ETC__q18 ;
  assign NOT_NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_ETC___d1433 =
	     !NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1411 &&
	     flag_prev_truncate__h63625 &&
	     CASE_shift_new03616_0_qtop_ffOD_OUT_BIT_0_1_q_ETC__q22 ;
  assign NOT_verbosity_ULE_1_08___d709 = verbosity > 4'd1 ;
  assign SEXT_IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ__ETC___d603 =
	     { SEXT_IF_new_inp4757_BIT_14_THEN_b5361_ELSE_b53633__q14[4:0],
	       1'd0 } ;
  assign SEXT_IF_IF_ffI_first__06_BIT_87_40_THEN_0_MINU_ETC___d416 =
	     { SEXT_IF_new_inp9483_BIT_14_THEN_b0016_ELSE_b00180__q11[4:0],
	       1'd0 } ;
  assign SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77 =
	     { {126{truncated_frac__h1190[1]}}, truncated_frac__h1190 } ;
  assign SEXT_IF_new_inp4757_BIT_14_THEN_b5361_ELSE_b53633__q14 =
	     { IF_new_inp4757_BIT_14_THEN_b5361_ELSE_b5363__q13[4],
	       IF_new_inp4757_BIT_14_THEN_b5361_ELSE_b5363__q13 } ;
  assign SEXT_IF_new_inp9483_BIT_14_THEN_b0016_ELSE_b00180__q11 =
	     { IF_new_inp9483_BIT_14_THEN_b0016_ELSE_b0018__q10[4],
	       IF_new_inp9483_BIT_14_THEN_b0016_ELSE_b0018__q10 } ;
  assign SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d776 =
	     { extracter1_fifo_output_regD_OUT_BITS_17_TO_12__q15[5],
	       extracter1_fifo_output_regD_OUT_BITS_17_TO_12__q15 } ;
  assign SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d797 =
	     { {2{extracter1_fifo_output_regD_OUT_BITS_17_TO_12__q15[5]}},
	       extracter1_fifo_output_regD_OUT_BITS_17_TO_12__q15 } ;
  assign SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d798 =
	     (SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d797 ^
	      8'h80) <
	     8'd1 ;
  assign SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d799 =
	     (SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d797 ^
	      8'h80) <=
	     8'd255 ;
  assign SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC__q24 =
	     SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d797 -
	     8'd129 ;
  assign SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC__q25 =
	     SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d797 -
	     8'd127 ;
  assign SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8 =
	     { fma_multiplier_fifo_stage0_regD_OUT_BITS_32_T_ETC__q7[6],
	       fma_multiplier_fifo_stage0_regD_OUT_BITS_32_T_ETC__q7 } ;
  assign _0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_THEN_0_M_ETC___d1144 =
	     { 1'd0, msbZeros__h37686 } + 8'd1 ;
  assign _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d786 =
	     { 13'd0, f1__h36036 } * { 13'd0, f2__h36037 } ;
  assign _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d837 =
	     { 1'd0, ffI_f_rv$port1__read[30:23] } - 9'd127 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d839 =
	     (_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d837[7:0] ^
	      8'h80) <
	     8'd100 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d840 =
	     (_0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d837[7:0] ^
	      8'h80) <=
	     8'd156 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d845 =
	     _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d837[7:0] -
	     8'd228 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d849 =
	     _0_CONCAT_ffI_f_rv_port1__read__15_BITS_30_TO_2_ETC___d837[7:0] -
	     8'd28 ;
  assign _0_MINUS_ftop_ffOD_OUT_BITS_19_TO_15__q4 =
	     5'd0 - ftop_ffO$D_OUT[19:15] ;
  assign _0_MINUS_qtop_ffOD_OUT_BITS_19_TO_15__q5 =
	     5'd0 - qtop_ffO$D_OUT[19:15] ;
  assign _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234 =
	     4'd12 -
	     IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177__ETC___d1210 ;
  assign _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1271 =
	     _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234 <
	     4'd2 ;
  assign _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408 =
	     4'd12 -
	     IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351__ETC___d1384 ;
  assign _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1445 =
	     _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408 <
	     4'd2 ;
  assign _14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196 =
	     4'd14 -
	     (ftop_ffO$D_OUT[19] ?
		_0_MINUS_ftop_ffOD_OUT_BITS_19_TO_15__q4[3:0] :
		IF_ftop_ffO_first__172_BIT_18_183_AND_NOT_ftop_ETC___d1189) ;
  assign _14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370 =
	     4'd14 -
	     (qtop_ffO$D_OUT[19] ?
		_0_MINUS_qtop_ffOD_OUT_BITS_19_TO_15__q5[3:0] :
		IF_qtop_ffO_first__346_BIT_18_357_AND_NOT_qtop_ETC___d1363) ;
  assign _71_MINUS_0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_ETC___d1146 =
	     8'd71 -
	     _0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_THEN_0_M_ETC___d1144 ;
  assign _theResult____h60012 =
	     NOT_NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_ETC___d1259 &&
	     (IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177__ETC___d1210 !=
	      4'd0 ||
	      ~k_expo__h60005[0]) &&
	     (_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234 ==
	      4'd0 ||
	      _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234 ==
	      4'd1 &&
	      IF_IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_1_ETC___d1269 ||
	      NOT_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__17_ETC___d1285) ;
  assign _theResult____h63626 =
	     NOT_NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_ETC___d1433 &&
	     (IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351__ETC___d1384 !=
	      4'd0 ||
	      ~k_expo__h63619[0]) &&
	     (_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408 ==
	      4'd0 ||
	      _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408 ==
	      4'd1 &&
	      IF_IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_3_ETC___d1443 ||
	      NOT_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__34_ETC___d1459) ;
  assign _theResult___fst__h61192 =
	     ftop_ffO_first__172_BIT_14_198_AND_1_MINUS_14__ETC___d1201 ?
	       expo_new__h61289 :
	       expo_new__h61258 ;
  assign _theResult___fst__h64801 =
	     qtop_ffO_first__346_BIT_14_372_AND_1_MINUS_14__ETC___d1375 ?
	       expo_new__h64898 :
	       expo_new__h64867 ;
  assign _theResult___snd_snd__h61341 =
	     ftop_ffO_first__172_BIT_14_198_AND_1_MINUS_14__ETC___d1201 ?
	       shift_new__h61288 :
	       2'd0 ;
  assign _theResult___snd_snd__h64950 =
	     qtop_ffO_first__346_BIT_14_372_AND_1_MINUS_14__ETC___d1375 ?
	       shift_new__h64897 :
	       2'd0 ;
  assign a__h60049 =
	     IF_IF_NOT_IF_ftop_ffO_first__172_BIT_19_177_TH_ETC___d1297 +
	     { 14'd0,
	       IF_IF_NOT_IF_ftop_ffO_first__172_BIT_19_177_TH_ETC___d1297 ==
	       15'd0 &&
	       NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1330 } ;
  assign a__h63659 =
	     IF_IF_NOT_IF_qtop_ffO_first__346_BIT_19_351_TH_ETC___d1471 +
	     { 14'd0,
	       IF_IF_NOT_IF_qtop_ffO_first__346_BIT_19_351_TH_ETC___d1471 ==
	       15'd0 &&
	       NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1504 } ;
  assign add_round__h16599 = x__h16766 & truncated_frac_msb__h16593 ;
  assign all_bits_0__h1193 = ~(x__h1243[126:0] != 127'd0) ;
  assign b__h20016 = { 1'd0, x__h20026 } - 5'd1 ;
  assign b__h20018 = 5'd0 - x__h22157 ;
  assign b__h25361 = { 1'd0, x__h25371 } - 5'd1 ;
  assign b__h25363 = 5'd0 - x__h27502 ;
  assign b__h60226 = x__h60242 - y__h60243 ;
  assign b__h60408 = ftop_ffO$D_OUT[19] ? k__h60468 : k__h60513 ;
  assign b__h61160 =
	     { 14'd0, x__h61163 } <<
	     IF_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177__ETC___d1210 ;
  assign b__h62768 = { 14'd0, flag_prev_truncate__h60011 } ;
  assign b__h63836 = x__h63852 - y__h63853 ;
  assign b__h64018 = qtop_ffO$D_OUT[19] ? k__h64078 : k__h64122 ;
  assign b__h64769 =
	     { 14'd0, x__h64772 } <<
	     IF_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351__ETC___d1384 ;
  assign b__h66377 = { 14'd0, flag_prev_truncate__h63625 } ;
  assign carry_int_frac_shifted__h15124 =
	     qtop_quireToPosit1_fifo_stage0_reg$D_OUT[126:0] << x__h15212 ;
  assign expo__h19490 =
	     (IF_IF_ffI_first__06_BIT_87_40_THEN_0_MINUS_ffI_ETC___d477 ==
	      4'd0) ?
	       4'd1 -
	       IF_IF_ffI_first__06_BIT_87_40_THEN_0_MINUS_ffI_ETC___d477 ==
	       4'd0 &&
	       new_inp__h19483[0] :
	       new_inp__h19483[x__h24521] ;
  assign expo__h24764 =
	     (IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d664 ==
	      4'd0) ?
	       4'd1 -
	       IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d664 ==
	       4'd0 &&
	       new_inp__h24757[0] :
	       new_inp__h24757[x__h29866] ;
  assign expo_new__h61258 =
	     _14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196 ==
	     4'd0 &&
	     ftop_ffO$D_OUT[14] ;
  assign expo_new__h61289 = x__h61292[0] & ftop_ffO$D_OUT[14] ;
  assign expo_new__h64867 =
	     _14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370 ==
	     4'd0 &&
	     qtop_ffO$D_OUT[14] ;
  assign expo_new__h64898 = x__h64901[0] & qtop_ffO$D_OUT[14] ;
  assign extracter1_fifo_output_regD_OUT_BITS_17_TO_12__q15 =
	     extracter1_fifo_output_reg$D_OUT[17:12] ;
  assign extracter1_fifo_output_reg_first__51_BIT_18_66_ETC___d788 =
	     { x__h36029,
	       SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d776 +
	       { extracter2_fifo_output_regD_OUT_BITS_17_TO_12__q26[5],
		 extracter2_fifo_output_regD_OUT_BITS_17_TO_12__q26 },
	       _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d786[25:0] } ;
  assign extracter2_fifo_output_regD_OUT_BITS_17_TO_12__q26 =
	     extracter2_fifo_output_reg$D_OUT[17:12] ;
  assign f1__h36036 =
	     { IF_extracter1_fifo_output_reg_first__51_BITS_2_ETC___d770[1],
	       extracter1_fifo_output_reg$D_OUT[11:0] } ;
  assign f2__h36037 =
	     { IF_extracter1_fifo_output_reg_first__51_BITS_2_ETC___d770[0],
	       extracter2_fifo_output_reg$D_OUT[11:0] } ;
  assign f_new___1__h696 =
	     f_new__h487 >>
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8[6:0] ;
  assign f_new__h37536 = { 100'd1, extracter1_fifo_output_reg$D_OUT[11:0] } ;
  assign f_new__h487 = { 86'd0, fma_multiplier_fifo_stage0_reg$D_OUT[25:0] } ;
  assign f_new__h643 = f_new__h487 << x__h777 ;
  assign flag_prev_truncate__h60011 =
	     (_12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234 ==
	      4'd0) ?
	       truncated_frac_msb__h60007 :
	       NOT_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_ETC___d1246 ;
  assign flag_prev_truncate__h63625 =
	     (_12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408 ==
	      4'd0) ?
	       truncated_frac_msb__h63621 :
	       NOT_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_ETC___d1420 ;
  assign flag_truncated_frac__h1188 =
	     x__h3181 | fma_adder_fifo_stage0_reg$D_OUT[5] ;
  assign float_no__h16598 =
	     { ptof_ptoF_fifo_stage0_reg$D_OUT[41],
	       x__h16649[7:0],
	       frac_f__h16597 } ;
  assign fma_adder_fifo_stage0_reg_first__7_BITS_134_TO_ETC___d82 =
	     fma_adder_fifo_stage0_reg$D_OUT[134:7] +
	     SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77 ;
  assign fma_multiplier_fifo_stage0_regD_OUT_BITS_25_TO_0__q9 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[25:0] ;
  assign fma_multiplier_fifo_stage0_regD_OUT_BITS_32_T_ETC__q7 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[32:26] ;
  assign frac__h15831 = { 1'd1, ftop_fToP_fifo_stage0_reg$D_OUT[18:7] } ;
  assign frac__h16591 = { 1'd1, ptof_ptoF_fifo_stage0_reg$D_OUT[30:8] } ;
  assign frac__h19491 = new_inp__h19483[11:0] << x__h24570 ;
  assign frac__h24765 = new_inp__h24757[11:0] << x__h29915 ;
  assign frac_f__h16597 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       x__h16679[22:0] :
	       ((ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] == 6'd0) ?
		  ptof_ptoF_fifo_stage0_reg$D_OUT[30:8] :
		  23'd8388607) ;
  assign ftop_ffOD_OUT_BITS_13_TO_2__q17 = ftop_ffO$D_OUT[13:2] ;
  assign ftop_ffO_first__172_BITS_13_TO_2_225_BIT_IF_14_ETC___d1243 =
	     ftop_ffOD_OUT_BITS_13_TO_2__q17[i__h62352] ;
  assign ftop_ffO_first__172_BITS_18_TO_15_184_PLUS_1___d1185 =
	     ftop_ffO$D_OUT[18:15] + 4'd1 ;
  assign ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1252 =
	     ftop_ffO$D_OUT[0] & y__h62440 ;
  assign ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1256 =
	     ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1252 &
	     y__h62444 ;
  assign ftop_ffO_first__172_BIT_14_198_AND_1_MINUS_14__ETC___d1201 =
	     ftop_ffO$D_OUT[14] & mask_e__h61190 ;
  assign i1__h62450 = shift_new0__h60002 - 2'd2 ;
  assign i1__h66059 = shift_new0__h63616 - 2'd2 ;
  assign i__h62352 = shift_new0__h60002 - 2'd1 ;
  assign i__h65961 = shift_new0__h63616 - 2'd1 ;
  assign in_posit2___1_posit_inp__h24813 = 16'd0 - ffI$D_OUT[21:6] ;
  assign int_frac__h37519 = f_new__h37536 << x__h37580 ;
  assign k__h60468 = 15'd1 << x__h60511 ;
  assign k__h60513 = ~x__h60525 ;
  assign k__h64078 = 15'd1 << x__h64120 ;
  assign k__h64122 = ~x__h64134 ;
  assign k_expo__h60005 =
	     NOT_IF_ftop_ffO_first__172_BIT_19_177_THEN_1_S_ETC___d1222 ?
	       15'd32767 :
	       IF_ftop_ffO_first__172_BIT_19_177_THEN_1_SL_14_ETC___d1217 ;
  assign k_expo__h63619 =
	     NOT_IF_qtop_ffO_first__346_BIT_19_351_THEN_1_S_ETC___d1396 ?
	       15'd32767 :
	       IF_qtop_ffO_first__346_BIT_19_351_THEN_1_SL_14_ETC___d1391 ;
  assign mask1__h698 = ~x__h879 ;
  assign mask_e__h61190 =
	     4'd1 -
	     _14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196 ==
	     4'd0 ;
  assign mask_e__h64799 =
	     4'd1 -
	     _14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370 ==
	     4'd0 ;
  assign msbZeros__h37686 =
	     twos_complement_carry_int_frac__h37685[126] ?
	       7'd0 :
	       (twos_complement_carry_int_frac__h37685[125] ?
		  7'd1 :
		  (twos_complement_carry_int_frac__h37685[124] ?
		     7'd2 :
		     (twos_complement_carry_int_frac__h37685[123] ?
			7'd3 :
			(twos_complement_carry_int_frac__h37685[122] ?
			   7'd4 :
			   (twos_complement_carry_int_frac__h37685[121] ?
			      7'd5 :
			      (twos_complement_carry_int_frac__h37685[120] ?
				 7'd6 :
				 (twos_complement_carry_int_frac__h37685[119] ?
				    7'd7 :
				    (twos_complement_carry_int_frac__h37685[118] ?
				       7'd8 :
				       (twos_complement_carry_int_frac__h37685[117] ?
					  7'd9 :
					  (twos_complement_carry_int_frac__h37685[116] ?
					     7'd10 :
					     (twos_complement_carry_int_frac__h37685[115] ?
						7'd11 :
						(twos_complement_carry_int_frac__h37685[114] ?
						   7'd12 :
						   (twos_complement_carry_int_frac__h37685[113] ?
						      7'd13 :
						      (twos_complement_carry_int_frac__h37685[112] ?
							 7'd14 :
							 (twos_complement_carry_int_frac__h37685[111] ?
							    7'd15 :
							    (twos_complement_carry_int_frac__h37685[110] ?
							       7'd16 :
							       (twos_complement_carry_int_frac__h37685[109] ?
								  7'd17 :
								  (twos_complement_carry_int_frac__h37685[108] ?
								     7'd18 :
								     (twos_complement_carry_int_frac__h37685[107] ?
									7'd19 :
									(twos_complement_carry_int_frac__h37685[106] ?
									   7'd20 :
									   (twos_complement_carry_int_frac__h37685[105] ?
									      7'd21 :
									      (twos_complement_carry_int_frac__h37685[104] ?
										 7'd22 :
										 (twos_complement_carry_int_frac__h37685[103] ?
										    7'd23 :
										    (twos_complement_carry_int_frac__h37685[102] ?
										       7'd24 :
										       (twos_complement_carry_int_frac__h37685[101] ?
											  7'd25 :
											  (twos_complement_carry_int_frac__h37685[100] ?
											     7'd26 :
											     (twos_complement_carry_int_frac__h37685[99] ?
												7'd27 :
												(twos_complement_carry_int_frac__h37685[98] ?
												   7'd28 :
												   (twos_complement_carry_int_frac__h37685[97] ?
												      7'd29 :
												      (twos_complement_carry_int_frac__h37685[96] ?
													 7'd30 :
													 (twos_complement_carry_int_frac__h37685[95] ?
													    7'd31 :
													    (twos_complement_carry_int_frac__h37685[94] ?
													       7'd32 :
													       (twos_complement_carry_int_frac__h37685[93] ?
														  7'd33 :
														  (twos_complement_carry_int_frac__h37685[92] ?
														     7'd34 :
														     (twos_complement_carry_int_frac__h37685[91] ?
															7'd35 :
															(twos_complement_carry_int_frac__h37685[90] ?
															   7'd36 :
															   (twos_complement_carry_int_frac__h37685[89] ?
															      7'd37 :
															      (twos_complement_carry_int_frac__h37685[88] ?
																 7'd38 :
																 (twos_complement_carry_int_frac__h37685[87] ?
																    7'd39 :
																    (twos_complement_carry_int_frac__h37685[86] ?
																       7'd40 :
																       (twos_complement_carry_int_frac__h37685[85] ?
																	  7'd41 :
																	  (twos_complement_carry_int_frac__h37685[84] ?
																	     7'd42 :
																	     (twos_complement_carry_int_frac__h37685[83] ?
																		7'd43 :
																		(twos_complement_carry_int_frac__h37685[82] ?
																		   7'd44 :
																		   (twos_complement_carry_int_frac__h37685[81] ?
																		      7'd45 :
																		      (twos_complement_carry_int_frac__h37685[80] ?
																			 7'd46 :
																			 (twos_complement_carry_int_frac__h37685[79] ?
																			    7'd47 :
																			    (twos_complement_carry_int_frac__h37685[78] ?
																			       7'd48 :
																			       (twos_complement_carry_int_frac__h37685[77] ?
																				  7'd49 :
																				  (twos_complement_carry_int_frac__h37685[76] ?
																				     7'd50 :
																				     (twos_complement_carry_int_frac__h37685[75] ?
																					7'd51 :
																					(twos_complement_carry_int_frac__h37685[74] ?
																					   7'd52 :
																					   (twos_complement_carry_int_frac__h37685[73] ?
																					      7'd53 :
																					      (twos_complement_carry_int_frac__h37685[72] ?
																						 7'd54 :
																						 (twos_complement_carry_int_frac__h37685[71] ?
																						    7'd55 :
																						    (twos_complement_carry_int_frac__h37685[70] ?
																						       7'd56 :
																						       (twos_complement_carry_int_frac__h37685[69] ?
																							  7'd57 :
																							  (twos_complement_carry_int_frac__h37685[68] ?
																							     7'd58 :
																							     (twos_complement_carry_int_frac__h37685[67] ?
																								7'd59 :
																								(twos_complement_carry_int_frac__h37685[66] ?
																								   7'd60 :
																								   (twos_complement_carry_int_frac__h37685[65] ?
																								      7'd61 :
																								      (twos_complement_carry_int_frac__h37685[64] ?
																									 7'd62 :
																									 (twos_complement_carry_int_frac__h37685[63] ?
																									    7'd63 :
																									    (twos_complement_carry_int_frac__h37685[62] ?
																									       7'd64 :
																									       (twos_complement_carry_int_frac__h37685[61] ?
																										  7'd65 :
																										  (twos_complement_carry_int_frac__h37685[60] ?
																										     7'd66 :
																										     (twos_complement_carry_int_frac__h37685[59] ?
																											7'd67 :
																											(twos_complement_carry_int_frac__h37685[58] ?
																											   7'd68 :
																											   (twos_complement_carry_int_frac__h37685[57] ?
																											      7'd69 :
																											      (twos_complement_carry_int_frac__h37685[56] ?
																												 7'd70 :
																												 (twos_complement_carry_int_frac__h37685[55] ?
																												    7'd71 :
																												    (twos_complement_carry_int_frac__h37685[54] ?
																												       7'd72 :
																												       (twos_complement_carry_int_frac__h37685[53] ?
																													  7'd73 :
																													  (twos_complement_carry_int_frac__h37685[52] ?
																													     7'd74 :
																													     (twos_complement_carry_int_frac__h37685[51] ?
																														7'd75 :
																														(twos_complement_carry_int_frac__h37685[50] ?
																														   7'd76 :
																														   (twos_complement_carry_int_frac__h37685[49] ?
																														      7'd77 :
																														      (twos_complement_carry_int_frac__h37685[48] ?
																															 7'd78 :
																															 (twos_complement_carry_int_frac__h37685[47] ?
																															    7'd79 :
																															    (twos_complement_carry_int_frac__h37685[46] ?
																															       7'd80 :
																															       (twos_complement_carry_int_frac__h37685[45] ?
																																  7'd81 :
																																  (twos_complement_carry_int_frac__h37685[44] ?
																																     7'd82 :
																																     (twos_complement_carry_int_frac__h37685[43] ?
																																	7'd83 :
																																	(twos_complement_carry_int_frac__h37685[42] ?
																																	   7'd84 :
																																	   (twos_complement_carry_int_frac__h37685[41] ?
																																	      7'd85 :
																																	      (twos_complement_carry_int_frac__h37685[40] ?
																																		 7'd86 :
																																		 (twos_complement_carry_int_frac__h37685[39] ?
																																		    7'd87 :
																																		    (twos_complement_carry_int_frac__h37685[38] ?
																																		       7'd88 :
																																		       (twos_complement_carry_int_frac__h37685[37] ?
																																			  7'd89 :
																																			  (twos_complement_carry_int_frac__h37685[36] ?
																																			     7'd90 :
																																			     (twos_complement_carry_int_frac__h37685[35] ?
																																				7'd91 :
																																				(twos_complement_carry_int_frac__h37685[34] ?
																																				   7'd92 :
																																				   (twos_complement_carry_int_frac__h37685[33] ?
																																				      7'd93 :
																																				      (twos_complement_carry_int_frac__h37685[32] ?
																																					 7'd94 :
																																					 (twos_complement_carry_int_frac__h37685[31] ?
																																					    7'd95 :
																																					    (twos_complement_carry_int_frac__h37685[30] ?
																																					       7'd96 :
																																					       (twos_complement_carry_int_frac__h37685[29] ?
																																						  7'd97 :
																																						  (twos_complement_carry_int_frac__h37685[28] ?
																																						     7'd98 :
																																						     (twos_complement_carry_int_frac__h37685[27] ?
																																							7'd99 :
																																							(twos_complement_carry_int_frac__h37685[26] ?
																																							   7'd100 :
																																							   (twos_complement_carry_int_frac__h37685[25] ?
																																							      7'd101 :
																																							      (twos_complement_carry_int_frac__h37685[24] ?
																																								 7'd102 :
																																								 (twos_complement_carry_int_frac__h37685[23] ?
																																								    7'd103 :
																																								    (twos_complement_carry_int_frac__h37685[22] ?
																																								       7'd104 :
																																								       (twos_complement_carry_int_frac__h37685[21] ?
																																									  7'd105 :
																																									  (twos_complement_carry_int_frac__h37685[20] ?
																																									     7'd106 :
																																									     (twos_complement_carry_int_frac__h37685[19] ?
																																										7'd107 :
																																										(twos_complement_carry_int_frac__h37685[18] ?
																																										   7'd108 :
																																										   (twos_complement_carry_int_frac__h37685[17] ?
																																										      7'd109 :
																																										      (twos_complement_carry_int_frac__h37685[16] ?
																																											 7'd110 :
																																											 (twos_complement_carry_int_frac__h37685[15] ?
																																											    7'd111 :
																																											    (twos_complement_carry_int_frac__h37685[14] ?
																																											       7'd112 :
																																											       (twos_complement_carry_int_frac__h37685[13] ?
																																												  7'd113 :
																																												  (twos_complement_carry_int_frac__h37685[12] ?
																																												     7'd114 :
																																												     (twos_complement_carry_int_frac__h37685[11] ?
																																													7'd115 :
																																													(twos_complement_carry_int_frac__h37685[10] ?
																																													   7'd116 :
																																													   (twos_complement_carry_int_frac__h37685[9] ?
																																													      7'd117 :
																																													      (twos_complement_carry_int_frac__h37685[8] ?
																																														 7'd118 :
																																														 (twos_complement_carry_int_frac__h37685[7] ?
																																														    7'd119 :
																																														    (twos_complement_carry_int_frac__h37685[6] ?
																																														       7'd120 :
																																														       (twos_complement_carry_int_frac__h37685[5] ?
																																															  7'd121 :
																																															  (twos_complement_carry_int_frac__h37685[4] ?
																																															     7'd122 :
																																															     (twos_complement_carry_int_frac__h37685[3] ?
																																																7'd123 :
																																																(twos_complement_carry_int_frac__h37685[2] ?
																																																   7'd124 :
																																																   (twos_complement_carry_int_frac__h37685[1] ?
																																																      7'd125 :
																																																      (twos_complement_carry_int_frac__h37685[0] ?
																																																	 7'd126 :
																																																	 7'd127)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign new_inp__h19483 =
	     ffI$D_OUT[87] ? 15'd0 - ffI$D_OUT[86:72] : ffI$D_OUT[86:72] ;
  assign new_inp__h24757 =
	     IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524[15] ?
	       15'd0 -
	       IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524[14:0] :
	       IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524[14:0] ;
  assign ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[38:31] ;
  assign qtop_ffOD_OUT_BITS_13_TO_2__q21 = qtop_ffO$D_OUT[13:2] ;
  assign qtop_ffO_first__346_BITS_13_TO_2_399_BIT_IF_14_ETC___d1417 =
	     qtop_ffOD_OUT_BITS_13_TO_2__q21[i__h65961] ;
  assign qtop_ffO_first__346_BITS_18_TO_15_358_PLUS_1___d1359 =
	     qtop_ffO$D_OUT[18:15] + 4'd1 ;
  assign qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1426 =
	     qtop_ffO$D_OUT[0] & y__h66049 ;
  assign qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1430 =
	     qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1426 &
	     y__h66053 ;
  assign qtop_ffO_first__346_BIT_14_372_AND_1_MINUS_14__ETC___d1375 =
	     qtop_ffO$D_OUT[14] & mask_e__h64799 ;
  assign qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6 =
	     qtop_quireToPosit1_fifo_stage0_reg$D_OUT[132:127] ;
  assign qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166 =
	     (qtop_quireToPosit1_fifo_stage0_reg$D_OUT[132:127] ^ 6'h20) <
	     6'd60 ;
  assign rg_quire_15_BIT_127_16_AND_rg_quire_15_BITS_12_ETC___d1155 =
	     { x__h39597,
	       ((IF_0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_THEN__ETC___d1149 ^
		 8'h80) <
		8'd100) ?
		 6'd36 :
		 (((IF_0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_THEN__ETC___d1149 ^
		    8'h80) <=
		   8'd156) ?
		    IF_0_CONCAT_IF_IF_rg_quire_15_BIT_127_16_THEN__ETC___d1149[5:0] :
		    6'd28),
	       twos_complement_carry_int_frac__h37685 } ;
  assign rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123 =
	     rg_quire + fma_multiplier_fifo_output_reg$D_OUT[129:2] ;
  assign shift_new0__h60002 =
	     (_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196 ==
	      4'd0) ?
	       _theResult___snd_snd__h61341 :
	       2'd0 ;
  assign shift_new0__h63616 =
	     (_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370 ==
	      4'd0) ?
	       _theResult___snd_snd__h64950 :
	       2'd0 ;
  assign shift_new__h61288 = { 1'd0, x__h62243 } ;
  assign shift_new__h64897 = { 1'd0, x__h65852 } ;
  assign stage0_regf_frac__h36587 =
	     { extracter1_fifo_output_reg$D_OUT[11:0], 11'd0 } ;
  assign stage1_regf_frac__h14955 =
	     IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173[12] ?
	       IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173[11:0] :
	       IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173[12:1] ;
  assign truncated_frac__h1190 =
	     flag_truncated_frac__h1188 ?
	       { fma_adder_fifo_stage0_reg$D_OUT[134],
		 flag_truncated_frac__h1188 } :
	       2'b0 ;
  assign truncated_frac_msb__h16593 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       frac__h16591[x__h16739[4:0]] :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] != 6'd0 ||
	       ptof_ptoF_fifo_stage0_reg$D_OUT[1] ;
  assign truncated_frac_msb__h60007 =
	     (shift_new0__h60002 == 2'd0) ?
	       ftop_ffO$D_OUT[1] :
	       ftop_ffO_first__172_BITS_13_TO_2_225_BIT_IF_14_ETC___d1243 ;
  assign truncated_frac_msb__h63621 =
	     (shift_new0__h63616 == 2'd0) ?
	       qtop_ffO$D_OUT[1] :
	       qtop_ffO_first__346_BITS_13_TO_2_399_BIT_IF_14_ETC___d1417 ;
  assign truncated_frac_zero__h15832 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[6] ?
	       { 19'd0,
		 (frac__h15831 &
		  ~(13'h1FFE <<
		    IF_ftop_fToP_fifo_stage0_reg_first__06_BIT_6_0_ETC___d213[3:0])) >>
		 0 } ==
	       32'd0 :
	       ftop_fToP_fifo_stage0_reg$D_OUT[6:2] == 5'd0 ;
  assign truncated_frac_zero__h16592 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       x__h16787 & y__h16788 :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] == 6'd0 &&
	       ptof_ptoF_fifo_stage0_reg$D_OUT[0] ;
  assign twos_complement_carry_int_frac__h14334 =
	     { ptoq_positToquire_fifo_stage1_reg$D_OUT[114],
	       ptoq_positToquire_fifo_stage1_reg$D_OUT[114] ?
		 127'd0 -
		 { 15'd0, ptoq_positToquire_fifo_stage1_reg$D_OUT[113:2] } :
		 { 15'd0, ptoq_positToquire_fifo_stage1_reg$D_OUT[113:2] } } ;
  assign twos_complement_carry_int_frac__h37685 =
	     rg_quire[127] ? 127'd0 - rg_quire[126:0] : rg_quire[126:0] ;
  assign twos_complement_carry_int_frac__h437 =
	     { fma_multiplier_fifo_stage0_reg$D_OUT[33],
	       fma_multiplier_fifo_stage0_reg$D_OUT[33] ?
		 127'd0 - x__h787 :
		 x__h787 } ;
  assign x2223_BITS_11_TO_0__q16 = x__h62223[11:0] ;
  assign x5832_BITS_11_TO_0__q20 = x__h65832[11:0] ;
  assign x__h1236 = x__h1238 | fma_adder_fifo_stage0_reg$D_OUT[0] ;
  assign x__h1238 = all_bits_0__h1193 & fma_adder_fifo_stage0_reg$D_OUT[134] ;
  assign x__h1243 =
	     (!fma_adder_fifo_stage0_reg$D_OUT[134] &&
	      !SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77[127] &&
	      fma_adder_fifo_stage0_reg_first__7_BITS_134_TO_ETC___d82[127]) ?
	       128'h7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF :
	       ((fma_adder_fifo_stage0_reg$D_OUT[134] &&
		 SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77[127] &&
		 !fma_adder_fifo_stage0_reg_first__7_BITS_134_TO_ETC___d82[127]) ?
		  128'h80000000000000000000000000000000 :
		  fma_adder_fifo_stage0_reg_first__7_BITS_134_TO_ETC___d82) ;
  assign x__h13789 =
	     fma_multiplier_fifo_output_reg$D_OUT[1] &
	     fma_multiplier_fifo_output_reg$D_OUT[0] ;
  assign x__h13794 = fma_multiplier_fifo_output_reg$D_OUT[1] & y__h13807 ;
  assign x__h15212 =
	     (8'd71 -
	      { {2{qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6[5]}},
		qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q6 }) -
	     8'd1 ;
  assign x__h15228 =
	     ((qtop_quireToPosit1_fifo_stage0_reg$D_OUT[126:0] == 127'd0 &&
	       qtop_quireToPosit1_fifo_stage0_reg$D_OUT[135:134] == 2'd0) ?
		2'd2 :
		qtop_quireToPosit1_fifo_stage0_reg$D_OUT[135:134]) !=
	     2'd2 &&
	     (!qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166 ||
	      carry_int_frac_shifted__h15124[113]) ;
  assign x__h15271 =
	     ((qtop_quireToPosit1_fifo_stage0_reg$D_OUT[126:0] == 127'd0 &&
	       qtop_quireToPosit1_fifo_stage0_reg$D_OUT[135:134] == 2'd0) ?
		2'd2 :
		qtop_quireToPosit1_fifo_stage0_reg$D_OUT[135:134]) ==
	     2'd2 ||
	     qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166 &&
	     carry_int_frac_shifted__h15124[112:0] == 113'd0 ;
  assign x__h15898 = frac__h15831 >> x__h15958 ;
  assign x__h15958 =
	     IF_ftop_fToP_fifo_stage0_reg_first__06_BIT_6_0_ETC___d213 +
	     5'd1 ;
  assign x__h15971 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[6] ?
	       frac__h15831[x__h15958[3:0]] :
	       ftop_fToP_fifo_stage0_reg$D_OUT[6:2] != 5'd0 ||
	       ftop_fToP_fifo_stage0_reg$D_OUT[1] ;
  assign x__h16048 = x__h16060 & truncated_frac_zero__h15832 ;
  assign x__h16060 = x__h16061 & ftop_fToP_fifo_stage0_reg$D_OUT[0] ;
  assign x__h16061 = ~ftop_fToP_fifo_stage0_reg$D_OUT[1] ;
  assign x__h16649 =
	     { ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3[7],
	       ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q3 } +
	     9'd127 ;
  assign x__h16679 = frac__h16591 >> x__h16739 ;
  assign x__h16739 =
	     IF_ptof_ptoF_fifo_stage0_reg_first__45_BIT_7_5_ETC___d259 +
	     6'd1 ;
  assign x__h16766 = x__h16767 | frac_f__h16597[0] ;
  assign x__h16767 = ~truncated_frac_zero__h16592 ;
  assign x__h16787 = ~ptof_ptoF_fifo_stage0_reg$D_OUT[1] ;
  assign x__h20026 =
	     INV_new_inp9483__q2[14] ?
	       4'd0 :
	       (INV_new_inp9483__q2[13] ?
		  4'd1 :
		  (INV_new_inp9483__q2[12] ?
		     4'd2 :
		     (INV_new_inp9483__q2[11] ?
			4'd3 :
			(INV_new_inp9483__q2[10] ?
			   4'd4 :
			   (INV_new_inp9483__q2[9] ?
			      4'd5 :
			      (INV_new_inp9483__q2[8] ?
				 4'd6 :
				 (INV_new_inp9483__q2[7] ?
				    4'd7 :
				    (INV_new_inp9483__q2[6] ?
				       4'd8 :
				       (INV_new_inp9483__q2[5] ?
					  4'd9 :
					  (INV_new_inp9483__q2[4] ?
					     4'd10 :
					     (INV_new_inp9483__q2[3] ?
						4'd11 :
						(INV_new_inp9483__q2[2] ?
						   4'd12 :
						   (INV_new_inp9483__q2[1] ?
						      4'd13 :
						      (INV_new_inp9483__q2[0] ?
							 4'd14 :
							 4'd15)))))))))))))) ;
  assign x__h22157 = { 1'd0, x__h22164 } ;
  assign x__h22164 =
	     new_inp__h19483[14] ?
	       4'd0 :
	       (new_inp__h19483[13] ?
		  4'd1 :
		  (new_inp__h19483[12] ?
		     4'd2 :
		     (new_inp__h19483[11] ?
			4'd3 :
			(new_inp__h19483[10] ?
			   4'd4 :
			   (new_inp__h19483[9] ?
			      4'd5 :
			      (new_inp__h19483[8] ?
				 4'd6 :
				 (new_inp__h19483[7] ?
				    4'd7 :
				    (new_inp__h19483[6] ?
				       4'd8 :
				       (new_inp__h19483[5] ?
					  4'd9 :
					  (new_inp__h19483[4] ?
					     4'd10 :
					     (new_inp__h19483[3] ?
						4'd11 :
						(new_inp__h19483[2] ?
						   4'd12 :
						   (new_inp__h19483[1] ?
						      4'd13 :
						      (new_inp__h19483[0] ?
							 4'd14 :
							 4'd15)))))))))))))) ;
  assign x__h24521 =
	     IF_IF_ffI_first__06_BIT_87_40_THEN_0_MINUS_ffI_ETC___d477 -
	     4'd1 ;
  assign x__h25371 =
	     INV_new_inp4757__q12[14] ?
	       4'd0 :
	       (INV_new_inp4757__q12[13] ?
		  4'd1 :
		  (INV_new_inp4757__q12[12] ?
		     4'd2 :
		     (INV_new_inp4757__q12[11] ?
			4'd3 :
			(INV_new_inp4757__q12[10] ?
			   4'd4 :
			   (INV_new_inp4757__q12[9] ?
			      4'd5 :
			      (INV_new_inp4757__q12[8] ?
				 4'd6 :
				 (INV_new_inp4757__q12[7] ?
				    4'd7 :
				    (INV_new_inp4757__q12[6] ?
				       4'd8 :
				       (INV_new_inp4757__q12[5] ?
					  4'd9 :
					  (INV_new_inp4757__q12[4] ?
					     4'd10 :
					     (INV_new_inp4757__q12[3] ?
						4'd11 :
						(INV_new_inp4757__q12[2] ?
						   4'd12 :
						   (INV_new_inp4757__q12[1] ?
						      4'd13 :
						      (INV_new_inp4757__q12[0] ?
							 4'd14 :
							 4'd15)))))))))))))) ;
  assign x__h27502 = { 1'd0, x__h27509 } ;
  assign x__h27509 =
	     new_inp__h24757[14] ?
	       4'd0 :
	       (new_inp__h24757[13] ?
		  4'd1 :
		  (new_inp__h24757[12] ?
		     4'd2 :
		     (new_inp__h24757[11] ?
			4'd3 :
			(new_inp__h24757[10] ?
			   4'd4 :
			   (new_inp__h24757[9] ?
			      4'd5 :
			      (new_inp__h24757[8] ?
				 4'd6 :
				 (new_inp__h24757[7] ?
				    4'd7 :
				    (new_inp__h24757[6] ?
				       4'd8 :
				       (new_inp__h24757[5] ?
					  4'd9 :
					  (new_inp__h24757[4] ?
					     4'd10 :
					     (new_inp__h24757[3] ?
						4'd11 :
						(new_inp__h24757[2] ?
						   4'd12 :
						   (new_inp__h24757[1] ?
						      4'd13 :
						      (new_inp__h24757[0] ?
							 4'd14 :
							 4'd15)))))))))))))) ;
  assign x__h29866 =
	     IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d664 -
	     4'd1 ;
  assign x__h3181 =
	     fma_adder_fifo_stage0_reg$D_OUT[7] &
	     fma_adder_fifo_stage0_reg$D_OUT[6] ;
  assign x__h35944 =
	     extracter1_fifo_output_reg$D_OUT[20:19] == 2'd1 &&
	     extracter2_fifo_output_reg$D_OUT[20:19] == 2'd2 ||
	     extracter2_fifo_output_reg$D_OUT[20:19] == 2'd1 &&
	     extracter1_fifo_output_reg$D_OUT[20:19] == 2'd2 ;
  assign x__h36029 =
	     x__h36051 &
	     IF_extracter1_fifo_output_reg_first__51_BITS_2_ETC___d770[0] ;
  assign x__h36051 =
	     x__h36053 &
	     IF_extracter1_fifo_output_reg_first__51_BITS_2_ETC___d770[1] ;
  assign x__h36053 =
	     extracter1_fifo_output_reg$D_OUT[18] ^
	     extracter2_fifo_output_reg$D_OUT[18] ;
  assign x__h37180 =
	     ffI_f_rv$port1__read[30:23] == 8'd255 &&
	     ffI_f_rv$port1__read[22:0] != 23'd0 ;
  assign x__h37343 = ffI_f_rv$port1__read[9:0] == 10'd0 ;
  assign x__h37580 =
	     SEXT_extracter1_fifo_output_reg_first__51_BITS_ETC___d776 +
	     7'd44 ;
  assign x__h39597 = rg_quire[127] && rg_quire[126:0] == 127'd0 ;
  assign x__h60242 = k_expo__h60005 + y__h60244 ;
  assign x__h60511 = 4'd14 - _0_MINUS_ftop_ffOD_OUT_BITS_19_TO_15__q4[3:0] ;
  assign x__h60525 =
	     15'd32767 >>
	     IF_ftop_ffO_first__172_BIT_18_183_AND_NOT_ftop_ETC___d1189 ;
  assign x__h61163 =
	     (_14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196 ==
	      4'd0) ?
	       _theResult___fst__h61192 :
	       ftop_ffO$D_OUT[14] ;
  assign x__h61292 =
	     2'd1 <<
	     _14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196 ;
  assign x__h62223 =
	     { _14_MINUS_IF_ftop_ffO_first__172_BIT_19_177_THE_ETC___d1196 !=
	       4'd0,
	       ftop_ffO$D_OUT[13:2] } >>
	     shift_new0__h60002 ;
  assign x__h62243 = 1'd0 - ftop_ffO$D_OUT[14] ;
  assign x__h62399 =
	     _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234 -
	     4'd1 ;
  assign x__h62560 =
	     _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234 -
	     4'd2 ;
  assign x__h63852 = k_expo__h63619 + y__h63854 ;
  assign x__h64120 = 4'd14 - _0_MINUS_qtop_ffOD_OUT_BITS_19_TO_15__q5[3:0] ;
  assign x__h64134 =
	     15'd32767 >>
	     IF_qtop_ffO_first__346_BIT_18_357_AND_NOT_qtop_ETC___d1363 ;
  assign x__h64772 =
	     (_14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370 ==
	      4'd0) ?
	       _theResult___fst__h64801 :
	       qtop_ffO$D_OUT[14] ;
  assign x__h64901 =
	     2'd1 <<
	     _14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370 ;
  assign x__h656 = fma_multiplier_fifo_stage0_reg$D_OUT[25:0] >> x__h689 ;
  assign x__h65832 =
	     { _14_MINUS_IF_qtop_ffO_first__346_BIT_19_351_THE_ETC___d1370 !=
	       4'd0,
	       qtop_ffO$D_OUT[13:2] } >>
	     shift_new0__h63616 ;
  assign x__h65852 = 1'd0 - qtop_ffO$D_OUT[14] ;
  assign x__h66008 =
	     _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408 -
	     4'd1 ;
  assign x__h66169 =
	     _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408 -
	     4'd2 ;
  assign x__h689 =
	     8'd24 -
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12 ;
  assign x__h777 =
	     SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8 + 8'd32 ;
  assign x__h787 =
	     { IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d27,
	       IF_fma_multiplier_fifo_stage0_reg_first_BIT_32_ETC___d36 } ;
  assign x__h7976 =
	     { fma_adder_fifo_stage0_reg$D_OUT[134], x__h1243[126:0] } ;
  assign x__h818 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[32] &&
	     !IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15 &&
	     fma_multiplier_fifo_stage0_regD_OUT_BITS_25_TO_0__q9[x__h855[4:0]] ;
  assign x__h855 =
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8[6:0] -
	     7'd1 ;
  assign x__h862 =
	     !fma_multiplier_fifo_stage0_reg$D_OUT[32] ||
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15 ||
	     (IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8[6:0] ^
	      7'h40) <=
	     7'd65 ||
	     (f_new__h487 & mask1__h698) == 112'd0 ;
  assign x__h879 = 112'hFFFFFFFFFFFFFFFFFFFFFFFFFFFF >> x__h855 ;
  assign x_frac__h15845 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[6] ?
	       x__h15898[11:0] :
	       ((ftop_fToP_fifo_stage0_reg$D_OUT[6:2] == 5'd0) ?
		  ftop_fToP_fifo_stage0_reg$D_OUT[18:7] :
		  12'd4095) ;
  assign y__h1237 =
	     fma_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd1 ||
	     fma_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd1 ;
  assign y__h13807 = ~fma_multiplier_fifo_output_reg$D_OUT[0] ;
  assign y__h16788 =
	     { 8'd0,
	       (frac__h16591 &
		~(24'hFFFFFE <<
		  IF_ptof_ptoF_fifo_stage0_reg_first__45_BIT_7_5_ETC___d259[4:0])) >>
	       0 } ==
	     32'd0 ;
  assign y__h60243 = { 14'd0, _theResult____h60012 } ;
  assign y__h60244 =
	     { 3'd0, x__h62223[11:0] } >>
	     _12_MINUS_IF_14_MINUS_IF_ftop_ffO_first__172_BI_ETC___d1234 ;
  assign y__h62440 = ~ftop_ffO$D_OUT[1] ;
  assign y__h62444 =
	     { 20'd0,
	       (ftop_ffO$D_OUT[13:2] & ~(12'hFFE << i1__h62450)) >> 0 } ==
	     32'd0 ;
  assign y__h63853 = { 14'd0, _theResult____h63626 } ;
  assign y__h63854 =
	     { 3'd0, x__h65832[11:0] } >>
	     _12_MINUS_IF_14_MINUS_IF_qtop_ffO_first__346_BI_ETC___d1408 ;
  assign y__h66049 = ~qtop_ffO$D_OUT[1] ;
  assign y__h66053 =
	     { 20'd0,
	       (qtop_ffO$D_OUT[13:2] & ~(12'hFFE << i1__h66059)) >> 0 } ==
	     32'd0 ;
  assign y__h7952 = ~fma_adder_fifo_stage0_reg$D_OUT[134] ;
  always@(ffO$D_OUT)
  begin
    case (ffO$D_OUT[70:69])
      2'd0, 2'd1:
	  CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1 =
	      ffO$D_OUT[70:69];
      default: CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q1 = 2'd2;
    endcase
  end
  always@(ptof_ptoF_fifo_stage0_reg$D_OUT or
	  float_no__h16598 or add_round__h16599)
  begin
    case (ptof_ptoF_fifo_stage0_reg$D_OUT[40:39])
      2'd1: float_no__h16601 = 32'hFF800000;
      2'd2: float_no__h16601 = 32'd0;
      default: float_no__h16601 =
		   float_no__h16598 + { 31'd0, add_round__h16599 };
    endcase
  end
  always@(IF_IF_ffI_first__06_BIT_87_40_THEN_0_MINUS_ffI_ETC___d477)
  begin
    case (IF_IF_ffI_first__06_BIT_87_40_THEN_0_MINUS_ffI_ETC___d477)
      4'd2: x__h24570 = 12'd11;
      4'd3: x__h24570 = 12'd10;
      4'd4: x__h24570 = 12'd9;
      4'd5: x__h24570 = 12'd8;
      4'd6: x__h24570 = 12'd7;
      4'd7: x__h24570 = 12'd6;
      4'd8: x__h24570 = 12'd5;
      4'd9: x__h24570 = 12'd4;
      4'd10: x__h24570 = 12'd3;
      4'd11: x__h24570 = 12'd2;
      4'd12: x__h24570 = 12'd1;
      4'd13: x__h24570 = 12'd0;
      default: x__h24570 =
		   (IF_IF_ffI_first__06_BIT_87_40_THEN_0_MINUS_ffI_ETC___d477 <=
		    4'd1) ?
		     12'd12 :
		     12'd0;
    endcase
  end
  always@(ffI$D_OUT or in_posit2___1_posit_inp__h24813)
  begin
    case (ffI$D_OUT[2:0])
      3'd2, 3'd3:
	  IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524 =
	      in_posit2___1_posit_inp__h24813;
      default: IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d524 =
		   ffI$D_OUT[21:6];
    endcase
  end
  always@(IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d664)
  begin
    case (IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d664)
      4'd2: x__h29915 = 12'd11;
      4'd3: x__h29915 = 12'd10;
      4'd4: x__h29915 = 12'd9;
      4'd5: x__h29915 = 12'd8;
      4'd6: x__h29915 = 12'd7;
      4'd7: x__h29915 = 12'd6;
      4'd8: x__h29915 = 12'd5;
      4'd9: x__h29915 = 12'd4;
      4'd10: x__h29915 = 12'd3;
      4'd11: x__h29915 = 12'd2;
      4'd12: x__h29915 = 12'd1;
      4'd13: x__h29915 = 12'd0;
      default: x__h29915 =
		   (IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d664 <=
		    4'd1) ?
		     12'd12 :
		     12'd0;
    endcase
  end
  always@(shift_new0__h60002 or
	  ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1256 or
	  ftop_ffO$D_OUT or
	  ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1252)
  begin
    case (shift_new0__h60002)
      2'd0:
	  CASE_shift_new00002_0_ftop_ffOD_OUT_BIT_0_1_f_ETC__q18 =
	      ftop_ffO$D_OUT[0];
      2'd1:
	  CASE_shift_new00002_0_ftop_ffOD_OUT_BIT_0_1_f_ETC__q18 =
	      ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1252;
      default: CASE_shift_new00002_0_ftop_ffOD_OUT_BIT_0_1_f_ETC__q18 =
		   ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1256;
    endcase
  end
  always@(shift_new0__h60002 or
	  ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1256 or
	  ftop_ffO$D_OUT or
	  ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1252)
  begin
    case (shift_new0__h60002)
      2'd0:
	  CASE_shift_new00002_0_NOT_ftop_ffOD_OUT_BIT_0_ETC__q19 =
	      !ftop_ffO$D_OUT[0];
      2'd1:
	  CASE_shift_new00002_0_NOT_ftop_ffOD_OUT_BIT_0_ETC__q19 =
	      !ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1252;
      default: CASE_shift_new00002_0_NOT_ftop_ffOD_OUT_BIT_0_ETC__q19 =
		   !ftop_ffO_first__172_BIT_0_249_AND_INV_ftop_ffO_ETC___d1256;
    endcase
  end
  always@(ftop_ffO$D_OUT or a__h60049)
  begin
    case (ftop_ffO$D_OUT[22:21])
      2'd0:
	  output_regf_out_posit__h60033 =
	      { ftop_ffO$D_OUT[23],
		ftop_ffO$D_OUT[23] ? 15'd0 - a__h60049 : a__h60049 };
      2'd1: output_regf_out_posit__h60033 = 16'd32768;
      default: output_regf_out_posit__h60033 = 16'd0;
    endcase
  end
  always@(shift_new0__h63616 or
	  qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1430 or
	  qtop_ffO$D_OUT or
	  qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1426)
  begin
    case (shift_new0__h63616)
      2'd0:
	  CASE_shift_new03616_0_qtop_ffOD_OUT_BIT_0_1_q_ETC__q22 =
	      qtop_ffO$D_OUT[0];
      2'd1:
	  CASE_shift_new03616_0_qtop_ffOD_OUT_BIT_0_1_q_ETC__q22 =
	      qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1426;
      default: CASE_shift_new03616_0_qtop_ffOD_OUT_BIT_0_1_q_ETC__q22 =
		   qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1430;
    endcase
  end
  always@(shift_new0__h63616 or
	  qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1430 or
	  qtop_ffO$D_OUT or
	  qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1426)
  begin
    case (shift_new0__h63616)
      2'd0:
	  CASE_shift_new03616_0_NOT_qtop_ffOD_OUT_BIT_0_ETC__q23 =
	      !qtop_ffO$D_OUT[0];
      2'd1:
	  CASE_shift_new03616_0_NOT_qtop_ffOD_OUT_BIT_0_ETC__q23 =
	      !qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1426;
      default: CASE_shift_new03616_0_NOT_qtop_ffOD_OUT_BIT_0_ETC__q23 =
		   !qtop_ffO_first__346_BIT_0_423_AND_INV_qtop_ffO_ETC___d1430;
    endcase
  end
  always@(qtop_ffO$D_OUT or a__h63659)
  begin
    case (qtop_ffO$D_OUT[22:21])
      2'd0:
	  output_regf_out_posit__h63643 =
	      { qtop_ffO$D_OUT[23],
		qtop_ffO$D_OUT[23] ? 15'd0 - a__h63659 : a__h63659 };
      2'd1: output_regf_out_posit__h63643 = 16'd32768;
      default: output_regf_out_posit__h63643 = 16'd0;
    endcase
  end
  always@(ffI$D_OUT or
	  extracter1_fifo_output_reg$FULL_N or
	  extracter2_fifo_output_reg$FULL_N or ffI_f_rv)
  begin
    case (ffI$D_OUT[2:0])
      3'd0, 3'd1, 3'd2, 3'd3:
	  IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329 =
	      extracter1_fifo_output_reg$FULL_N &&
	      extracter2_fifo_output_reg$FULL_N;
      3'd4:
	  IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329 =
	      !ffI_f_rv[32];
      default: IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329 =
		   ffI$D_OUT[2:0] != 3'd5 && ffI$D_OUT[2:0] != 3'd7 ||
		   extracter1_fifo_output_reg$FULL_N;
    endcase
  end
  always@(opcode_out$D_OUT or
	  ffO$FULL_N or
	  normalizer_fifo_output_reg$EMPTY_N or
	  fma_ffO$EMPTY_N or ptof_ffO$EMPTY_N or ptoq_ffO$EMPTY_N)
  begin
    case (opcode_out$D_OUT)
      3'd0, 3'd2:
	  IF_opcode_out_first__548_EQ_0_549_OR_opcode_ou_ETC___d1571 =
	      fma_ffO$EMPTY_N && ffO$FULL_N;
      3'd5:
	  IF_opcode_out_first__548_EQ_0_549_OR_opcode_ou_ETC___d1571 =
	      ffO$FULL_N && ptof_ffO$EMPTY_N;
      3'd7:
	  IF_opcode_out_first__548_EQ_0_549_OR_opcode_ou_ETC___d1571 =
	      ffO$FULL_N && ptoq_ffO$EMPTY_N;
      default: IF_opcode_out_first__548_EQ_0_549_OR_opcode_ou_ETC___d1571 =
		   opcode_out$D_OUT != 3'd4 && opcode_out$D_OUT != 3'd6 ||
		   ffO$FULL_N && normalizer_fifo_output_reg$EMPTY_N;
    endcase
  end
  always@(server_core_request_put)
  begin
    case (server_core_request_put[137:136])
      2'd0, 2'd1:
	  CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q29 =
	      server_core_request_put[137:136];
      default: CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q29 = 2'd2;
    endcase
  end
  always@(server_core_request_put)
  begin
    case (server_core_request_put[71:70])
      2'd0, 2'd1:
	  CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q30 =
	      server_core_request_put[71:70];
      default: CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q30 = 2'd2;
    endcase
  end
  always@(float_no__h16601)
  begin
    case (float_no__h16601)
      32'd0: CASE_float_no6601_0_2_4286578688_1_0__q31 = 2'd2;
      32'hFF800000: CASE_float_no6601_0_2_4286578688_1_0__q31 = 2'd1;
      default: CASE_float_no6601_0_2_4286578688_1_0__q31 = 2'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ffI_f_rv <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	fma_check_quire <= `BSV_ASSIGNMENT_DELAY 1'd0;
	opcode_in_rv <= `BSV_ASSIGNMENT_DELAY 4'd2;
	rg_quire <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_quire_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (ffI_f_rv$EN) ffI_f_rv <= `BSV_ASSIGNMENT_DELAY ffI_f_rv$D_IN;
	if (fma_check_quire$EN)
	  fma_check_quire <= `BSV_ASSIGNMENT_DELAY fma_check_quire$D_IN;
	if (opcode_in_rv$EN)
	  opcode_in_rv <= `BSV_ASSIGNMENT_DELAY opcode_in_rv$D_IN;
	if (rg_quire$EN) rg_quire <= `BSV_ASSIGNMENT_DELAY rg_quire$D_IN;
	if (rg_quire_busy$EN)
	  rg_quire_busy <= `BSV_ASSIGNMENT_DELAY rg_quire_busy$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ffI_f_rv = 33'h0AAAAAAAA;
    fma_check_quire = 1'h0;
    opcode_in_rv = 4'hA;
    rg_quire = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_quire_busy = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709)
	begin
	  v__h35616 = $stime;
	  #0;
	end
    v__h35610 = v__h35616 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709)
	$write("%0d: %m: rl_extract_in: ", v__h35610);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709 &&
	  ffI$D_OUT[2:0] == 3'd0)
	$write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709 &&
	  ffI$D_OUT[2:0] == 3'd1)
	$write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709 &&
	  ffI$D_OUT[2:0] == 3'd2)
	$write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709 &&
	  ffI$D_OUT[2:0] == 3'd3)
	$write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709 &&
	  ffI$D_OUT[2:0] == 3'd4)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709 &&
	  ffI$D_OUT[2:0] == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709 &&
	  ffI$D_OUT[2:0] == 3'd6)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709 &&
	  ffI$D_OUT[2:0] != 3'd0 &&
	  ffI$D_OUT[2:0] != 3'd1 &&
	  ffI$D_OUT[2:0] != 3'd2 &&
	  ffI$D_OUT[2:0] != 3'd3 &&
	  ffI$D_OUT[2:0] != 3'd4 &&
	  ffI$D_OUT[2:0] != 3'd5 &&
	  ffI$D_OUT[2:0] != 3'd6)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709)
	$write("'h%h", ffI$D_OUT[87:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709)
	$write("'h%h", ffI$D_OUT[21:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_08___d709)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_08___d709)
	begin
	  v__h63543 = $stime;
	  #0;
	end
    v__h63537 = v__h63543 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_08___d709)
	$write("%0d: %m: rl_norm: ", v__h63537);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_08___d709)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_08___d709)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_08___d709)
	begin
	  v__h67175 = $stime;
	  #0;
	end
    v__h67169 = v__h67175 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_08___d709)
	$write("%0d: %m: rl_norm: ", v__h67169);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_08___d709)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_08___d709)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	begin
	  v__h59961 = $stime;
	  #0;
	end
    v__h59955 = v__h59961 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	$write("%0d: %m: rl_norm: Error Illegal Opcode", v__h59955);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd0) $write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd1) $write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd2) $write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd3) $write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6 &&
	  opcode_norm$D_OUT != 3'd0 &&
	  opcode_norm$D_OUT != 3'd1 &&
	  opcode_norm$D_OUT != 3'd2 &&
	  opcode_norm$D_OUT != 3'd3 &&
	  opcode_norm$D_OUT != 3'd5)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd7 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd6)
	begin
	  v__h68310 = $stime;
	  #0;
	end
    v__h68304 = v__h68310 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd7 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd6)
	$write("%0d: %m: rl_out: Error Illegal Opcode", v__h68304);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd1) $write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd3) $write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd7 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd6)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_08___d709)
	begin
	  v__h68452 = $stime;
	  #0;
	end
    v__h68446 = v__h68452 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_08___d709)
	$write("%0d: %m: rl_out: ", v__h68446);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_08___d709 &&
	  opcode_out$D_OUT == 3'd0)
	$write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_08___d709 &&
	  opcode_out$D_OUT == 3'd1)
	$write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_08___d709 &&
	  opcode_out$D_OUT == 3'd2)
	$write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_08___d709 &&
	  opcode_out$D_OUT == 3'd3)
	$write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_08___d709 &&
	  opcode_out$D_OUT == 3'd4)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_08___d709 &&
	  opcode_out$D_OUT == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_08___d709 &&
	  opcode_out$D_OUT == 3'd6)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_08___d709 &&
	  opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd1 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd3 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd6)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_08___d709) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_08___d709)
	$display("  QUIRE: %h", rg_quire);
  end
  // synopsys translate_on
endmodule  // mkPositCore

