//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_core_request_put    O     1 reg
// server_core_response_get       O    71
// RDY_server_core_response_get   O     1 reg
// verbosity                      I     4
// CLK                            I     1 clock
// RST_N                          I     1 reset
// server_core_request_put        I   138
// EN_server_core_request_put     I     1
// EN_server_core_response_get    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPositCore(verbosity,
		   CLK,
		   RST_N,

		   server_core_request_put,
		   EN_server_core_request_put,
		   RDY_server_core_request_put,

		   EN_server_core_response_get,
		   server_core_response_get,
		   RDY_server_core_response_get);
  input  [3 : 0] verbosity;
  input  CLK;
  input  RST_N;

  // action method server_core_request_put
  input  [137 : 0] server_core_request_put;
  input  EN_server_core_request_put;
  output RDY_server_core_request_put;

  // actionvalue method server_core_response_get
  input  EN_server_core_response_get;
  output [70 : 0] server_core_response_get;
  output RDY_server_core_response_get;

  // signals for module outputs
  wire [70 : 0] server_core_response_get;
  wire RDY_server_core_request_put, RDY_server_core_response_get;

  // inlined wires
  wire [32 : 0] ffI_f_rv$port0__write_1,
		ffI_f_rv$port1__read,
		ffI_f_rv$port2__read;
  wire [3 : 0] opcode_in_rv$port0__write_1,
	       opcode_in_rv$port1__read,
	       opcode_in_rv$port2__read;
  wire ffI_f_rv$EN_port0__write, opcode_in_rv$EN_port1__write;

  // register ffI_f_rv
  reg [32 : 0] ffI_f_rv;
  wire [32 : 0] ffI_f_rv$D_IN;
  wire ffI_f_rv$EN;

  // register fma_check_quire
  reg fma_check_quire;
  wire fma_check_quire$D_IN, fma_check_quire$EN;

  // register opcode_in_rv
  reg [3 : 0] opcode_in_rv;
  wire [3 : 0] opcode_in_rv$D_IN;
  wire opcode_in_rv$EN;

  // register rg_quire
  reg [31 : 0] rg_quire;
  wire [31 : 0] rg_quire$D_IN;
  wire rg_quire$EN;

  // register rg_quire_busy
  reg rg_quire_busy;
  wire rg_quire_busy$D_IN, rg_quire_busy$EN;

  // ports of submodule extracter1_fifo_output_reg
  wire [11 : 0] extracter1_fifo_output_reg$D_IN,
		extracter1_fifo_output_reg$D_OUT;
  wire extracter1_fifo_output_reg$CLR,
       extracter1_fifo_output_reg$DEQ,
       extracter1_fifo_output_reg$EMPTY_N,
       extracter1_fifo_output_reg$ENQ,
       extracter1_fifo_output_reg$FULL_N;

  // ports of submodule extracter1_fifo_stage0_reg
  wire [9 : 0] extracter1_fifo_stage0_reg$D_IN;
  wire extracter1_fifo_stage0_reg$CLR,
       extracter1_fifo_stage0_reg$DEQ,
       extracter1_fifo_stage0_reg$ENQ;

  // ports of submodule extracter1_fifo_stage1_reg
  wire [14 : 0] extracter1_fifo_stage1_reg$D_IN;
  wire extracter1_fifo_stage1_reg$CLR,
       extracter1_fifo_stage1_reg$DEQ,
       extracter1_fifo_stage1_reg$ENQ;

  // ports of submodule extracter1_fifo_stage2_reg
  wire [11 : 0] extracter1_fifo_stage2_reg$D_IN;
  wire extracter1_fifo_stage2_reg$CLR,
       extracter1_fifo_stage2_reg$DEQ,
       extracter1_fifo_stage2_reg$ENQ;

  // ports of submodule extracter2_fifo_output_reg
  wire [11 : 0] extracter2_fifo_output_reg$D_IN,
		extracter2_fifo_output_reg$D_OUT;
  wire extracter2_fifo_output_reg$CLR,
       extracter2_fifo_output_reg$DEQ,
       extracter2_fifo_output_reg$EMPTY_N,
       extracter2_fifo_output_reg$ENQ,
       extracter2_fifo_output_reg$FULL_N;

  // ports of submodule extracter2_fifo_stage0_reg
  wire [9 : 0] extracter2_fifo_stage0_reg$D_IN;
  wire extracter2_fifo_stage0_reg$CLR,
       extracter2_fifo_stage0_reg$DEQ,
       extracter2_fifo_stage0_reg$ENQ;

  // ports of submodule extracter2_fifo_stage1_reg
  wire [14 : 0] extracter2_fifo_stage1_reg$D_IN;
  wire extracter2_fifo_stage1_reg$CLR,
       extracter2_fifo_stage1_reg$DEQ,
       extracter2_fifo_stage1_reg$ENQ;

  // ports of submodule extracter2_fifo_stage2_reg
  wire [11 : 0] extracter2_fifo_stage2_reg$D_IN;
  wire extracter2_fifo_stage2_reg$CLR,
       extracter2_fifo_stage2_reg$DEQ,
       extracter2_fifo_stage2_reg$ENQ;

  // ports of submodule ffI
  wire [137 : 0] ffI$D_IN, ffI$D_OUT;
  wire ffI$CLR, ffI$DEQ, ffI$EMPTY_N, ffI$ENQ, ffI$FULL_N;

  // ports of submodule ffO
  reg [70 : 0] ffO$D_IN;
  wire [70 : 0] ffO$D_OUT;
  wire ffO$CLR, ffO$DEQ, ffO$EMPTY_N, ffO$ENQ, ffO$FULL_N;

  // ports of submodule fma_adder_fifo_output_reg
  wire fma_adder_fifo_output_reg$CLR,
       fma_adder_fifo_output_reg$DEQ,
       fma_adder_fifo_output_reg$EMPTY_N,
       fma_adder_fifo_output_reg$ENQ,
       fma_adder_fifo_output_reg$FULL_N;

  // ports of submodule fma_adder_fifo_stage0_reg
  wire [38 : 0] fma_adder_fifo_stage0_reg$D_IN,
		fma_adder_fifo_stage0_reg$D_OUT;
  wire fma_adder_fifo_stage0_reg$CLR,
       fma_adder_fifo_stage0_reg$DEQ,
       fma_adder_fifo_stage0_reg$EMPTY_N,
       fma_adder_fifo_stage0_reg$ENQ,
       fma_adder_fifo_stage0_reg$FULL_N;

  // ports of submodule fma_ffO
  wire fma_ffO$CLR, fma_ffO$DEQ, fma_ffO$EMPTY_N, fma_ffO$ENQ, fma_ffO$FULL_N;

  // ports of submodule fma_multiplier_fifo_output_reg
  wire [36 : 0] fma_multiplier_fifo_output_reg$D_IN,
		fma_multiplier_fifo_output_reg$D_OUT;
  wire fma_multiplier_fifo_output_reg$CLR,
       fma_multiplier_fifo_output_reg$DEQ,
       fma_multiplier_fifo_output_reg$EMPTY_N,
       fma_multiplier_fifo_output_reg$ENQ,
       fma_multiplier_fifo_output_reg$FULL_N;

  // ports of submodule fma_multiplier_fifo_stage0_reg
  wire [20 : 0] fma_multiplier_fifo_stage0_reg$D_IN,
		fma_multiplier_fifo_stage0_reg$D_OUT;
  wire fma_multiplier_fifo_stage0_reg$CLR,
       fma_multiplier_fifo_stage0_reg$DEQ,
       fma_multiplier_fifo_stage0_reg$EMPTY_N,
       fma_multiplier_fifo_stage0_reg$ENQ,
       fma_multiplier_fifo_stage0_reg$FULL_N;

  // ports of submodule ftop_fToP_fifo_output_reg
  wire [14 : 0] ftop_fToP_fifo_output_reg$D_IN,
		ftop_fToP_fifo_output_reg$D_OUT;
  wire ftop_fToP_fifo_output_reg$CLR,
       ftop_fToP_fifo_output_reg$DEQ,
       ftop_fToP_fifo_output_reg$EMPTY_N,
       ftop_fToP_fifo_output_reg$ENQ,
       ftop_fToP_fifo_output_reg$FULL_N;

  // ports of submodule ftop_fToP_fifo_stage0_reg
  wire [18 : 0] ftop_fToP_fifo_stage0_reg$D_IN,
		ftop_fToP_fifo_stage0_reg$D_OUT;
  wire ftop_fToP_fifo_stage0_reg$CLR,
       ftop_fToP_fifo_stage0_reg$DEQ,
       ftop_fToP_fifo_stage0_reg$EMPTY_N,
       ftop_fToP_fifo_stage0_reg$ENQ,
       ftop_fToP_fifo_stage0_reg$FULL_N;

  // ports of submodule ftop_ffO
  wire [14 : 0] ftop_ffO$D_IN, ftop_ffO$D_OUT;
  wire ftop_ffO$CLR,
       ftop_ffO$DEQ,
       ftop_ffO$EMPTY_N,
       ftop_ffO$ENQ,
       ftop_ffO$FULL_N;

  // ports of submodule need_normalize
  wire need_normalize$CLR,
       need_normalize$DEQ,
       need_normalize$D_IN,
       need_normalize$ENQ;

  // ports of submodule normalizer_fifo_output_reg
  wire [11 : 0] normalizer_fifo_output_reg$D_IN,
		normalizer_fifo_output_reg$D_OUT;
  wire normalizer_fifo_output_reg$CLR,
       normalizer_fifo_output_reg$DEQ,
       normalizer_fifo_output_reg$EMPTY_N,
       normalizer_fifo_output_reg$ENQ,
       normalizer_fifo_output_reg$FULL_N;

  // ports of submodule normalizer_fifo_stage0_reg
  wire [17 : 0] normalizer_fifo_stage0_reg$D_IN;
  wire normalizer_fifo_stage0_reg$CLR,
       normalizer_fifo_stage0_reg$DEQ,
       normalizer_fifo_stage0_reg$ENQ;

  // ports of submodule normalizer_fifo_stage1_reg
  wire [21 : 0] normalizer_fifo_stage1_reg$D_IN;
  wire normalizer_fifo_stage1_reg$CLR,
       normalizer_fifo_stage1_reg$DEQ,
       normalizer_fifo_stage1_reg$ENQ;

  // ports of submodule normalizer_fifo_stage2_reg
  wire [11 : 0] normalizer_fifo_stage2_reg$D_IN;
  wire normalizer_fifo_stage2_reg$CLR,
       normalizer_fifo_stage2_reg$DEQ,
       normalizer_fifo_stage2_reg$ENQ;

  // ports of submodule opcode_norm
  wire [2 : 0] opcode_norm$D_IN, opcode_norm$D_OUT;
  wire opcode_norm$CLR,
       opcode_norm$DEQ,
       opcode_norm$EMPTY_N,
       opcode_norm$ENQ,
       opcode_norm$FULL_N;

  // ports of submodule opcode_out
  wire [2 : 0] opcode_out$D_IN, opcode_out$D_OUT;
  wire opcode_out$CLR,
       opcode_out$DEQ,
       opcode_out$EMPTY_N,
       opcode_out$ENQ,
       opcode_out$FULL_N;

  // ports of submodule ptof_ffO
  wire [34 : 0] ptof_ffO$D_IN, ptof_ffO$D_OUT;
  wire ptof_ffO$CLR,
       ptof_ffO$DEQ,
       ptof_ffO$EMPTY_N,
       ptof_ffO$ENQ,
       ptof_ffO$FULL_N;

  // ports of submodule ptof_ptoF_fifo_output_reg
  wire [34 : 0] ptof_ptoF_fifo_output_reg$D_IN,
		ptof_ptoF_fifo_output_reg$D_OUT;
  wire ptof_ptoF_fifo_output_reg$CLR,
       ptof_ptoF_fifo_output_reg$DEQ,
       ptof_ptoF_fifo_output_reg$EMPTY_N,
       ptof_ptoF_fifo_output_reg$ENQ,
       ptof_ptoF_fifo_output_reg$FULL_N;

  // ports of submodule ptof_ptoF_fifo_stage0_reg
  wire [41 : 0] ptof_ptoF_fifo_stage0_reg$D_IN,
		ptof_ptoF_fifo_stage0_reg$D_OUT;
  wire ptof_ptoF_fifo_stage0_reg$CLR,
       ptof_ptoF_fifo_stage0_reg$DEQ,
       ptof_ptoF_fifo_stage0_reg$EMPTY_N,
       ptof_ptoF_fifo_stage0_reg$ENQ,
       ptof_ptoF_fifo_stage0_reg$FULL_N;

  // ports of submodule ptoq_ffO
  wire ptoq_ffO$CLR,
       ptoq_ffO$DEQ,
       ptoq_ffO$EMPTY_N,
       ptoq_ffO$ENQ,
       ptoq_ffO$FULL_N;

  // ports of submodule ptoq_positToquire_fifo_output_reg
  wire ptoq_positToquire_fifo_output_reg$CLR,
       ptoq_positToquire_fifo_output_reg$DEQ,
       ptoq_positToquire_fifo_output_reg$EMPTY_N,
       ptoq_positToquire_fifo_output_reg$ENQ,
       ptoq_positToquire_fifo_output_reg$FULL_N;

  // ports of submodule ptoq_positToquire_fifo_stage0_reg
  wire [11 : 0] ptoq_positToquire_fifo_stage0_reg$D_IN;
  wire ptoq_positToquire_fifo_stage0_reg$CLR,
       ptoq_positToquire_fifo_stage0_reg$DEQ,
       ptoq_positToquire_fifo_stage0_reg$ENQ;

  // ports of submodule ptoq_positToquire_fifo_stage1_reg
  wire [26 : 0] ptoq_positToquire_fifo_stage1_reg$D_IN,
		ptoq_positToquire_fifo_stage1_reg$D_OUT;
  wire ptoq_positToquire_fifo_stage1_reg$CLR,
       ptoq_positToquire_fifo_stage1_reg$DEQ,
       ptoq_positToquire_fifo_stage1_reg$EMPTY_N,
       ptoq_positToquire_fifo_stage1_reg$ENQ,
       ptoq_positToquire_fifo_stage1_reg$FULL_N;

  // ports of submodule qtop_ffO
  wire [14 : 0] qtop_ffO$D_IN, qtop_ffO$D_OUT;
  wire qtop_ffO$CLR,
       qtop_ffO$DEQ,
       qtop_ffO$EMPTY_N,
       qtop_ffO$ENQ,
       qtop_ffO$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_output_reg
  wire [14 : 0] qtop_quireToPosit1_fifo_output_reg$D_IN,
		qtop_quireToPosit1_fifo_output_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_output_reg$CLR,
       qtop_quireToPosit1_fifo_output_reg$DEQ,
       qtop_quireToPosit1_fifo_output_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_output_reg$ENQ,
       qtop_quireToPosit1_fifo_output_reg$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_stage0_reg
  wire [38 : 0] qtop_quireToPosit1_fifo_stage0_reg$D_IN,
		qtop_quireToPosit1_fifo_stage0_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_stage0_reg$CLR,
       qtop_quireToPosit1_fifo_stage0_reg$DEQ,
       qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_stage0_reg$ENQ,
       qtop_quireToPosit1_fifo_stage0_reg$FULL_N;

  // ports of submodule qtop_quireToPosit1_fifo_stage1_reg
  wire [14 : 0] qtop_quireToPosit1_fifo_stage1_reg$D_IN,
		qtop_quireToPosit1_fifo_stage1_reg$D_OUT;
  wire qtop_quireToPosit1_fifo_stage1_reg$CLR,
       qtop_quireToPosit1_fifo_stage1_reg$DEQ,
       qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N,
       qtop_quireToPosit1_fifo_stage1_reg$ENQ,
       qtop_quireToPosit1_fifo_stage1_reg$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_extract_in,
       CAN_FIRE_RL_fma_adder_stage_1,
       CAN_FIRE_RL_fma_multiplier_stage_1,
       CAN_FIRE_RL_fma_rl_connect1,
       CAN_FIRE_RL_fma_rl_out,
       CAN_FIRE_RL_ftop_fToP_stage_1,
       CAN_FIRE_RL_ftop_rl_out,
       CAN_FIRE_RL_ptof_ptoF_stage_2,
       CAN_FIRE_RL_ptof_rl_out,
       CAN_FIRE_RL_ptoq_positToquire_stage_2,
       CAN_FIRE_RL_ptoq_rl_out,
       CAN_FIRE_RL_qtop_quireToPosit1_stage_1,
       CAN_FIRE_RL_qtop_quireToPosit1_stage_2,
       CAN_FIRE_RL_qtop_rl_out,
       CAN_FIRE_RL_rl_fma,
       CAN_FIRE_RL_rl_ftop,
       CAN_FIRE_RL_rl_norm,
       CAN_FIRE_RL_rl_out,
       CAN_FIRE_RL_rl_ptof,
       CAN_FIRE_RL_rl_ptoq,
       CAN_FIRE_RL_rl_qtop,
       CAN_FIRE_server_core_request_put,
       CAN_FIRE_server_core_response_get,
       WILL_FIRE_RL_extract_in,
       WILL_FIRE_RL_fma_adder_stage_1,
       WILL_FIRE_RL_fma_multiplier_stage_1,
       WILL_FIRE_RL_fma_rl_connect1,
       WILL_FIRE_RL_fma_rl_out,
       WILL_FIRE_RL_ftop_fToP_stage_1,
       WILL_FIRE_RL_ftop_rl_out,
       WILL_FIRE_RL_ptof_ptoF_stage_2,
       WILL_FIRE_RL_ptof_rl_out,
       WILL_FIRE_RL_ptoq_positToquire_stage_2,
       WILL_FIRE_RL_ptoq_rl_out,
       WILL_FIRE_RL_qtop_quireToPosit1_stage_1,
       WILL_FIRE_RL_qtop_quireToPosit1_stage_2,
       WILL_FIRE_RL_qtop_rl_out,
       WILL_FIRE_RL_rl_fma,
       WILL_FIRE_RL_rl_ftop,
       WILL_FIRE_RL_rl_norm,
       WILL_FIRE_RL_rl_out,
       WILL_FIRE_RL_rl_ptof,
       WILL_FIRE_RL_rl_ptoq,
       WILL_FIRE_RL_rl_qtop,
       WILL_FIRE_server_core_request_put,
       WILL_FIRE_server_core_response_get;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_rg_quire$write_1__VAL_1, MUX_rg_quire$write_1__VAL_2;
  wire MUX_opcode_out$enq_1__SEL_1,
       MUX_rg_quire_busy$write_1__SEL_1,
       MUX_rg_quire_busy$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h19095;
  reg [31 : 0] v__h29608;
  reg [31 : 0] v__h32103;
  reg [31 : 0] v__h27163;
  reg [31 : 0] v__h33202;
  reg [31 : 0] v__h33344;
  reg [31 : 0] v__h19089;
  reg [31 : 0] v__h27157;
  reg [31 : 0] v__h29602;
  reg [31 : 0] v__h32097;
  reg [31 : 0] v__h33196;
  reg [31 : 0] v__h33338;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] float_no__h7802;
  reg [7 : 0] IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432,
	      output_regf_out_posit__h27235,
	      output_regf_out_posit__h29708;
  reg [4 : 0] x__h13265, x__h16037;
  reg [1 : 0] CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q2,
	      CASE_float_no802_0_2_4286578688_1_0__q22,
	      CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q20,
	      CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q21;
  reg IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329,
      IF_opcode_out_first__054_EQ_0_055_OR_opcode_ou_ETC___d1077;
  wire [35 : 0] rg_quire_15_BIT_31_16_AND_rg_quire_15_BITS_30__ETC___d781;
  wire [31 : 0] IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d110,
		IF_NOT_rg_quire_15_BIT_31_16_17_AND_NOT_fma_mu_ETC___d130,
		SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77,
		float_no__h7799,
		fma_adder_fifo_stage0_reg_first__7_BITS_38_TO__ETC___d82,
		rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123,
		twos_complement_carry_int_frac__h437,
		twos_complement_carry_int_frac__h5584,
		x__h1229,
		x__h3258;
  wire [30 : 0] carry_int_frac_shifted__h6325,
		twos_complement_carry_int_frac__h21071,
		x__h773;
  wire [23 : 0] IF_fma_multiplier_fifo_stage0_reg_first_BIT_16_ETC___d36,
		_0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d602,
		f_new___1__h682,
		f_new__h20922,
		f_new__h487,
		f_new__h629,
		frac__h7792,
		int_frac__h20905,
		mask1__h684,
		x__h7880,
		x__h865;
  wire [22 : 0] frac_f__h7798, stage0_regf_frac__h19968;
  wire [17 : 0] extracter1_fifo_output_reg_first__67_BIT_9_82__ETC___d604;
  wire [11 : 0] fma_multiplier_fifo_stage0_regD_OUT_BITS_11_TO_0__q9, x__h642;
  wire [8 : 0] IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d520,
	       IF_IF_ffI_first__06_BIT_79_40_THEN_0_MINUS_ffI_ETC___d425,
	       _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d655,
	       x__h7850;
  wire [7 : 0] IF_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_T_ETC__q18,
	       IF_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_T_ETC__q19,
	       IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC___d617,
	       SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d613,
	       SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d624,
	       SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC__q15,
	       _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d663,
	       _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d667,
	       in_posit2___1_posit_inp__h13438,
	       ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q4;
  wire [6 : 0] IF_IF_NOT_IF_ftop_ffO_first__98_BIT_10_03_THEN_ETC___d878,
	       IF_IF_NOT_IF_qtop_ffO_first__12_BIT_10_17_THEN_ETC___d992,
	       IF_NOT_IF_ftop_ffO_first__98_BIT_10_03_THEN_1__ETC___d874,
	       IF_NOT_IF_qtop_ffO_first__12_BIT_10_17_THEN_1__ETC___d988,
	       IF_fma_multiplier_fifo_stage0_reg_first_BIT_16_ETC___d27,
	       IF_ftop_ffO_first__98_BIT_10_03_THEN_1_SL_6_MI_ETC___d829,
	       IF_qtop_ffO_first__12_BIT_10_17_THEN_1_SL_6_MI_ETC___d943,
	       INV_new_inp0681__q3,
	       INV_new_inp3382__q10,
	       a__h27251,
	       a__h29724,
	       b__h27372,
	       b__h27498,
	       b__h28145,
	       b__h29113,
	       b__h29845,
	       b__h29971,
	       b__h30617,
	       b__h31585,
	       k__h27558,
	       k__h27603,
	       k__h30031,
	       k__h30075,
	       k_expo__h27207,
	       k_expo__h29684,
	       new_inp__h10681,
	       new_inp__h13382,
	       x__h27388,
	       x__h27615,
	       x__h29861,
	       x__h30087,
	       y__h27389,
	       y__h27390,
	       y__h29862,
	       y__h29863;
  wire [5 : 0] IF_0_CONCAT_IF_IF_rg_quire_15_BIT_31_16_THEN_0_ETC___d775,
	       IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC___d630,
	       IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12,
	       IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8,
	       IF_ptof_ptoF_fifo_stage0_reg_first__45_BIT_7_5_ETC___d259,
	       IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173,
	       SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8,
	       _0_CONCAT_IF_IF_rg_quire_15_BIT_31_16_THEN_0_MI_ETC___d770,
	       _19_MINUS_0_CONCAT_IF_IF_rg_quire_15_BIT_31_16__ETC___d772,
	       f1__h19515,
	       f2__h19516,
	       frac__h7032,
	       x__h6413,
	       x__h675,
	       x__h7099,
	       x__h763,
	       x__h7940;
  wire [4 : 0] SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d592,
	       fma_multiplier_fifo_stage0_regD_OUT_BITS_16_T_ETC__q7,
	       frac__h10689,
	       frac__h13390,
	       ftop_ffOD_OUT_BITS_6_TO_2__q12,
	       msbZeros__h21072,
	       qtop_ffOD_OUT_BITS_6_TO_2__q13,
	       stage1_regf_frac__h6205,
	       x__h20966,
	       x__h841,
	       x_frac__h7046;
  wire [3 : 0] IF_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_T_ETC___d661,
	       IF_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_T_ETC___d672,
	       IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC__q16,
	       IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC__q17,
	       IF_ftop_fToP_fifo_stage0_reg_first__06_BIT_5_0_ETC___d213,
	       _0_MINUS_ftop_ffOD_OUT_BITS_10_TO_7__q5,
	       _0_MINUS_qtop_ffOD_OUT_BITS_10_TO_7__q6,
	       b__h11046,
	       b__h11048,
	       b__h13818,
	       b__h13820,
	       extracter1_fifo_output_regD_OUT_BITS_8_TO_5__q11,
	       extracter2_fifo_output_regD_OUT_BITS_8_TO_5__q14,
	       qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q1,
	       x__h12067,
	       x__h14839,
	       x__h7159;
  wire [2 : 0] IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d506,
	       IF_IF_ffI_first__06_BIT_79_40_THEN_0_MINUS_ffI_ETC___d411,
	       IF_ftop_ffO_first__98_BIT_9_09_AND_NOT_ftop_ff_ETC___d815,
	       IF_qtop_ffO_first__12_BIT_9_23_AND_NOT_qtop_ff_ETC___d929,
	       _5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838,
	       _5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952,
	       _6_MINUS_IF_ftop_ffO_first__98_BIT_10_03_THEN_0_ETC___d822,
	       _6_MINUS_IF_qtop_ffO_first__12_BIT_10_17_THEN_0_ETC___d936,
	       ftop_ffO_first__98_BITS_9_TO_7_10_PLUS_1___d811,
	       qtop_ffO_first__12_BITS_9_TO_7_24_PLUS_1___d925,
	       x__h11056,
	       x__h12074,
	       x__h13828,
	       x__h14846,
	       x__h27601,
	       x__h28871,
	       x__h28975,
	       x__h30073,
	       x__h31343,
	       x__h31447;
  wire [1 : 0] IF_extracter1_fifo_output_reg_first__67_BITS_1_ETC___d586,
	       truncated_frac__h1176;
  wire IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15,
       IF_opcode_norm_first__84_EQ_4_85_THEN_ftop_ffO_ETC___d794,
       NOT_IF_ftop_ffO_first__98_BIT_10_03_THEN_1_SL__ETC___d834,
       NOT_IF_qtop_ffO_first__12_BIT_10_17_THEN_1_SL__ETC___d948,
       NOT_ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MI_ETC___d856,
       NOT_qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MI_ETC___d970,
       NOT_verbosity_ULE_1_24___d525,
       SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d614,
       SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d615,
       _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d657,
       _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d658,
       _5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d860,
       _5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d974,
       _theResult____h27214,
       _theResult____h29691,
       add_round__h7800,
       all_bits_0__h1179,
       flag_prev_truncate__h27213,
       flag_prev_truncate__h29690,
       flag_truncated_frac__h1174,
       ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d841,
       ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d846,
       ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d882,
       ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d896,
       qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d1010,
       qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d955,
       qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d960,
       qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d996,
       qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166,
       truncated_frac_msb__h7794,
       truncated_frac_zero__h7033,
       truncated_frac_zero__h7793,
       x__h1222,
       x__h1224,
       x__h1823,
       x__h19423,
       x__h19508,
       x__h19530,
       x__h19532,
       x__h20562,
       x__h20729,
       x__h21639,
       x__h5039,
       x__h5044,
       x__h6429,
       x__h6472,
       x__h7172,
       x__h7249,
       x__h7261,
       x__h7262,
       x__h7967,
       x__h7968,
       x__h7988,
       x__h804,
       x__h848,
       y__h1223,
       y__h3234,
       y__h5057,
       y__h7989;

  // action method server_core_request_put
  assign RDY_server_core_request_put = ffI$FULL_N ;
  assign CAN_FIRE_server_core_request_put = ffI$FULL_N ;
  assign WILL_FIRE_server_core_request_put = EN_server_core_request_put ;

  // actionvalue method server_core_response_get
  assign server_core_response_get =
	     { CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q2,
	       ffO$D_OUT[68:0] } ;
  assign RDY_server_core_response_get = ffO$EMPTY_N ;
  assign CAN_FIRE_server_core_response_get = ffO$EMPTY_N ;
  assign WILL_FIRE_server_core_response_get = EN_server_core_response_get ;

  // submodule extracter1_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter1_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_output_reg$D_IN),
						      .ENQ(extracter1_fifo_output_reg$ENQ),
						      .DEQ(extracter1_fifo_output_reg$DEQ),
						      .CLR(extracter1_fifo_output_reg$CLR),
						      .D_OUT(extracter1_fifo_output_reg$D_OUT),
						      .FULL_N(extracter1_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter1_fifo_output_reg$EMPTY_N));

  // submodule extracter1_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter1_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage0_reg$D_IN),
						      .ENQ(extracter1_fifo_stage0_reg$ENQ),
						      .DEQ(extracter1_fifo_stage0_reg$DEQ),
						      .CLR(extracter1_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter1_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage1_reg$D_IN),
						      .ENQ(extracter1_fifo_stage1_reg$ENQ),
						      .DEQ(extracter1_fifo_stage1_reg$DEQ),
						      .CLR(extracter1_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter1_fifo_stage2_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter1_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter1_fifo_stage2_reg$D_IN),
						      .ENQ(extracter1_fifo_stage2_reg$ENQ),
						      .DEQ(extracter1_fifo_stage2_reg$DEQ),
						      .CLR(extracter1_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter2_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_output_reg$D_IN),
						      .ENQ(extracter2_fifo_output_reg$ENQ),
						      .DEQ(extracter2_fifo_output_reg$DEQ),
						      .CLR(extracter2_fifo_output_reg$CLR),
						      .D_OUT(extracter2_fifo_output_reg$D_OUT),
						      .FULL_N(extracter2_fifo_output_reg$FULL_N),
						      .EMPTY_N(extracter2_fifo_output_reg$EMPTY_N));

  // submodule extracter2_fifo_stage0_reg
  FIFO2 #(.width(32'd10),
	  .guarded(32'd1)) extracter2_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage0_reg$D_IN),
						      .ENQ(extracter2_fifo_stage0_reg$ENQ),
						      .DEQ(extracter2_fifo_stage0_reg$DEQ),
						      .CLR(extracter2_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) extracter2_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage1_reg$D_IN),
						      .ENQ(extracter2_fifo_stage1_reg$ENQ),
						      .DEQ(extracter2_fifo_stage1_reg$DEQ),
						      .CLR(extracter2_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule extracter2_fifo_stage2_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) extracter2_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(extracter2_fifo_stage2_reg$D_IN),
						      .ENQ(extracter2_fifo_stage2_reg$ENQ),
						      .DEQ(extracter2_fifo_stage2_reg$DEQ),
						      .CLR(extracter2_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule ffI
  FIFO2 #(.width(32'd138), .guarded(32'd1)) ffI(.RST(RST_N),
						.CLK(CLK),
						.D_IN(ffI$D_IN),
						.ENQ(ffI$ENQ),
						.DEQ(ffI$DEQ),
						.CLR(ffI$CLR),
						.D_OUT(ffI$D_OUT),
						.FULL_N(ffI$FULL_N),
						.EMPTY_N(ffI$EMPTY_N));

  // submodule ffO
  FIFO2 #(.width(32'd71), .guarded(32'd1)) ffO(.RST(RST_N),
					       .CLK(CLK),
					       .D_IN(ffO$D_IN),
					       .ENQ(ffO$ENQ),
					       .DEQ(ffO$DEQ),
					       .CLR(ffO$CLR),
					       .D_OUT(ffO$D_OUT),
					       .FULL_N(ffO$FULL_N),
					       .EMPTY_N(ffO$EMPTY_N));

  // submodule fma_adder_fifo_output_reg
  FIFO20 #(.guarded(32'd1)) fma_adder_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .ENQ(fma_adder_fifo_output_reg$ENQ),
						      .DEQ(fma_adder_fifo_output_reg$DEQ),
						      .CLR(fma_adder_fifo_output_reg$CLR),
						      .FULL_N(fma_adder_fifo_output_reg$FULL_N),
						      .EMPTY_N(fma_adder_fifo_output_reg$EMPTY_N));

  // submodule fma_adder_fifo_stage0_reg
  FIFO2 #(.width(32'd39),
	  .guarded(32'd1)) fma_adder_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(fma_adder_fifo_stage0_reg$D_IN),
						     .ENQ(fma_adder_fifo_stage0_reg$ENQ),
						     .DEQ(fma_adder_fifo_stage0_reg$DEQ),
						     .CLR(fma_adder_fifo_stage0_reg$CLR),
						     .D_OUT(fma_adder_fifo_stage0_reg$D_OUT),
						     .FULL_N(fma_adder_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(fma_adder_fifo_stage0_reg$EMPTY_N));

  // submodule fma_ffO
  FIFO20 #(.guarded(32'd1)) fma_ffO(.RST(RST_N),
				    .CLK(CLK),
				    .ENQ(fma_ffO$ENQ),
				    .DEQ(fma_ffO$DEQ),
				    .CLR(fma_ffO$CLR),
				    .FULL_N(fma_ffO$FULL_N),
				    .EMPTY_N(fma_ffO$EMPTY_N));

  // submodule fma_multiplier_fifo_output_reg
  FIFO2 #(.width(32'd37),
	  .guarded(32'd1)) fma_multiplier_fifo_output_reg(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fma_multiplier_fifo_output_reg$D_IN),
							  .ENQ(fma_multiplier_fifo_output_reg$ENQ),
							  .DEQ(fma_multiplier_fifo_output_reg$DEQ),
							  .CLR(fma_multiplier_fifo_output_reg$CLR),
							  .D_OUT(fma_multiplier_fifo_output_reg$D_OUT),
							  .FULL_N(fma_multiplier_fifo_output_reg$FULL_N),
							  .EMPTY_N(fma_multiplier_fifo_output_reg$EMPTY_N));

  // submodule fma_multiplier_fifo_stage0_reg
  FIFO2 #(.width(32'd21),
	  .guarded(32'd1)) fma_multiplier_fifo_stage0_reg(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(fma_multiplier_fifo_stage0_reg$D_IN),
							  .ENQ(fma_multiplier_fifo_stage0_reg$ENQ),
							  .DEQ(fma_multiplier_fifo_stage0_reg$DEQ),
							  .CLR(fma_multiplier_fifo_stage0_reg$CLR),
							  .D_OUT(fma_multiplier_fifo_stage0_reg$D_OUT),
							  .FULL_N(fma_multiplier_fifo_stage0_reg$FULL_N),
							  .EMPTY_N(fma_multiplier_fifo_stage0_reg$EMPTY_N));

  // submodule ftop_fToP_fifo_output_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) ftop_fToP_fifo_output_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ftop_fToP_fifo_output_reg$D_IN),
						     .ENQ(ftop_fToP_fifo_output_reg$ENQ),
						     .DEQ(ftop_fToP_fifo_output_reg$DEQ),
						     .CLR(ftop_fToP_fifo_output_reg$CLR),
						     .D_OUT(ftop_fToP_fifo_output_reg$D_OUT),
						     .FULL_N(ftop_fToP_fifo_output_reg$FULL_N),
						     .EMPTY_N(ftop_fToP_fifo_output_reg$EMPTY_N));

  // submodule ftop_fToP_fifo_stage0_reg
  FIFO2 #(.width(32'd19),
	  .guarded(32'd1)) ftop_fToP_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ftop_fToP_fifo_stage0_reg$D_IN),
						     .ENQ(ftop_fToP_fifo_stage0_reg$ENQ),
						     .DEQ(ftop_fToP_fifo_stage0_reg$DEQ),
						     .CLR(ftop_fToP_fifo_stage0_reg$CLR),
						     .D_OUT(ftop_fToP_fifo_stage0_reg$D_OUT),
						     .FULL_N(ftop_fToP_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(ftop_fToP_fifo_stage0_reg$EMPTY_N));

  // submodule ftop_ffO
  FIFO2 #(.width(32'd15), .guarded(32'd1)) ftop_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ftop_ffO$D_IN),
						    .ENQ(ftop_ffO$ENQ),
						    .DEQ(ftop_ffO$DEQ),
						    .CLR(ftop_ffO$CLR),
						    .D_OUT(ftop_ffO$D_OUT),
						    .FULL_N(ftop_ffO$FULL_N),
						    .EMPTY_N(ftop_ffO$EMPTY_N));

  // submodule need_normalize
  FIFO1 #(.width(32'd1), .guarded(32'd1)) need_normalize(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(need_normalize$D_IN),
							 .ENQ(need_normalize$ENQ),
							 .DEQ(need_normalize$DEQ),
							 .CLR(need_normalize$CLR),
							 .D_OUT(),
							 .FULL_N(),
							 .EMPTY_N());

  // submodule normalizer_fifo_output_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) normalizer_fifo_output_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_output_reg$D_IN),
						      .ENQ(normalizer_fifo_output_reg$ENQ),
						      .DEQ(normalizer_fifo_output_reg$DEQ),
						      .CLR(normalizer_fifo_output_reg$CLR),
						      .D_OUT(normalizer_fifo_output_reg$D_OUT),
						      .FULL_N(normalizer_fifo_output_reg$FULL_N),
						      .EMPTY_N(normalizer_fifo_output_reg$EMPTY_N));

  // submodule normalizer_fifo_stage0_reg
  FIFO2 #(.width(32'd18),
	  .guarded(32'd1)) normalizer_fifo_stage0_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage0_reg$D_IN),
						      .ENQ(normalizer_fifo_stage0_reg$ENQ),
						      .DEQ(normalizer_fifo_stage0_reg$DEQ),
						      .CLR(normalizer_fifo_stage0_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage1_reg
  FIFO2 #(.width(32'd22),
	  .guarded(32'd1)) normalizer_fifo_stage1_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage1_reg$D_IN),
						      .ENQ(normalizer_fifo_stage1_reg$ENQ),
						      .DEQ(normalizer_fifo_stage1_reg$DEQ),
						      .CLR(normalizer_fifo_stage1_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule normalizer_fifo_stage2_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) normalizer_fifo_stage2_reg(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(normalizer_fifo_stage2_reg$D_IN),
						      .ENQ(normalizer_fifo_stage2_reg$ENQ),
						      .DEQ(normalizer_fifo_stage2_reg$DEQ),
						      .CLR(normalizer_fifo_stage2_reg$CLR),
						      .D_OUT(),
						      .FULL_N(),
						      .EMPTY_N());

  // submodule opcode_norm
  FIFO1 #(.width(32'd3), .guarded(32'd1)) opcode_norm(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(opcode_norm$D_IN),
						      .ENQ(opcode_norm$ENQ),
						      .DEQ(opcode_norm$DEQ),
						      .CLR(opcode_norm$CLR),
						      .D_OUT(opcode_norm$D_OUT),
						      .FULL_N(opcode_norm$FULL_N),
						      .EMPTY_N(opcode_norm$EMPTY_N));

  // submodule opcode_out
  FIFO1 #(.width(32'd3), .guarded(32'd1)) opcode_out(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(opcode_out$D_IN),
						     .ENQ(opcode_out$ENQ),
						     .DEQ(opcode_out$DEQ),
						     .CLR(opcode_out$CLR),
						     .D_OUT(opcode_out$D_OUT),
						     .FULL_N(opcode_out$FULL_N),
						     .EMPTY_N(opcode_out$EMPTY_N));

  // submodule ptof_ffO
  FIFO2 #(.width(32'd35), .guarded(32'd1)) ptof_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ptof_ffO$D_IN),
						    .ENQ(ptof_ffO$ENQ),
						    .DEQ(ptof_ffO$DEQ),
						    .CLR(ptof_ffO$CLR),
						    .D_OUT(ptof_ffO$D_OUT),
						    .FULL_N(ptof_ffO$FULL_N),
						    .EMPTY_N(ptof_ffO$EMPTY_N));

  // submodule ptof_ptoF_fifo_output_reg
  FIFO2 #(.width(32'd35),
	  .guarded(32'd1)) ptof_ptoF_fifo_output_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ptof_ptoF_fifo_output_reg$D_IN),
						     .ENQ(ptof_ptoF_fifo_output_reg$ENQ),
						     .DEQ(ptof_ptoF_fifo_output_reg$DEQ),
						     .CLR(ptof_ptoF_fifo_output_reg$CLR),
						     .D_OUT(ptof_ptoF_fifo_output_reg$D_OUT),
						     .FULL_N(ptof_ptoF_fifo_output_reg$FULL_N),
						     .EMPTY_N(ptof_ptoF_fifo_output_reg$EMPTY_N));

  // submodule ptof_ptoF_fifo_stage0_reg
  FIFO2 #(.width(32'd42),
	  .guarded(32'd1)) ptof_ptoF_fifo_stage0_reg(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ptof_ptoF_fifo_stage0_reg$D_IN),
						     .ENQ(ptof_ptoF_fifo_stage0_reg$ENQ),
						     .DEQ(ptof_ptoF_fifo_stage0_reg$DEQ),
						     .CLR(ptof_ptoF_fifo_stage0_reg$CLR),
						     .D_OUT(ptof_ptoF_fifo_stage0_reg$D_OUT),
						     .FULL_N(ptof_ptoF_fifo_stage0_reg$FULL_N),
						     .EMPTY_N(ptof_ptoF_fifo_stage0_reg$EMPTY_N));

  // submodule ptoq_ffO
  FIFO20 #(.guarded(32'd1)) ptoq_ffO(.RST(RST_N),
				     .CLK(CLK),
				     .ENQ(ptoq_ffO$ENQ),
				     .DEQ(ptoq_ffO$DEQ),
				     .CLR(ptoq_ffO$CLR),
				     .FULL_N(ptoq_ffO$FULL_N),
				     .EMPTY_N(ptoq_ffO$EMPTY_N));

  // submodule ptoq_positToquire_fifo_output_reg
  FIFO20 #(.guarded(32'd1)) ptoq_positToquire_fifo_output_reg(.RST(RST_N),
							      .CLK(CLK),
							      .ENQ(ptoq_positToquire_fifo_output_reg$ENQ),
							      .DEQ(ptoq_positToquire_fifo_output_reg$DEQ),
							      .CLR(ptoq_positToquire_fifo_output_reg$CLR),
							      .FULL_N(ptoq_positToquire_fifo_output_reg$FULL_N),
							      .EMPTY_N(ptoq_positToquire_fifo_output_reg$EMPTY_N));

  // submodule ptoq_positToquire_fifo_stage0_reg
  FIFO2 #(.width(32'd12),
	  .guarded(32'd1)) ptoq_positToquire_fifo_stage0_reg(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ptoq_positToquire_fifo_stage0_reg$D_IN),
							     .ENQ(ptoq_positToquire_fifo_stage0_reg$ENQ),
							     .DEQ(ptoq_positToquire_fifo_stage0_reg$DEQ),
							     .CLR(ptoq_positToquire_fifo_stage0_reg$CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N());

  // submodule ptoq_positToquire_fifo_stage1_reg
  FIFO2 #(.width(32'd27),
	  .guarded(32'd1)) ptoq_positToquire_fifo_stage1_reg(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ptoq_positToquire_fifo_stage1_reg$D_IN),
							     .ENQ(ptoq_positToquire_fifo_stage1_reg$ENQ),
							     .DEQ(ptoq_positToquire_fifo_stage1_reg$DEQ),
							     .CLR(ptoq_positToquire_fifo_stage1_reg$CLR),
							     .D_OUT(ptoq_positToquire_fifo_stage1_reg$D_OUT),
							     .FULL_N(ptoq_positToquire_fifo_stage1_reg$FULL_N),
							     .EMPTY_N(ptoq_positToquire_fifo_stage1_reg$EMPTY_N));

  // submodule qtop_ffO
  FIFO2 #(.width(32'd15), .guarded(32'd1)) qtop_ffO(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(qtop_ffO$D_IN),
						    .ENQ(qtop_ffO$ENQ),
						    .DEQ(qtop_ffO$DEQ),
						    .CLR(qtop_ffO$CLR),
						    .D_OUT(qtop_ffO$D_OUT),
						    .FULL_N(qtop_ffO$FULL_N),
						    .EMPTY_N(qtop_ffO$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_output_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_output_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_output_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_output_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_output_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_output_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_output_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_output_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_output_reg$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_stage0_reg
  FIFO2 #(.width(32'd39),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_stage0_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_stage0_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_stage0_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_stage0_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_stage0_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_stage0_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_stage0_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N));

  // submodule qtop_quireToPosit1_fifo_stage1_reg
  FIFO2 #(.width(32'd15),
	  .guarded(32'd1)) qtop_quireToPosit1_fifo_stage1_reg(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(qtop_quireToPosit1_fifo_stage1_reg$D_IN),
							      .ENQ(qtop_quireToPosit1_fifo_stage1_reg$ENQ),
							      .DEQ(qtop_quireToPosit1_fifo_stage1_reg$DEQ),
							      .CLR(qtop_quireToPosit1_fifo_stage1_reg$CLR),
							      .D_OUT(qtop_quireToPosit1_fifo_stage1_reg$D_OUT),
							      .FULL_N(qtop_quireToPosit1_fifo_stage1_reg$FULL_N),
							      .EMPTY_N(qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N));

  // rule RL_extract_in
  assign CAN_FIRE_RL_extract_in =
	     ffI$EMPTY_N && !opcode_in_rv[3] &&
	     IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329 ;
  assign WILL_FIRE_RL_extract_in = CAN_FIRE_RL_extract_in ;

  // rule RL_rl_fma
  assign CAN_FIRE_RL_rl_fma =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     extracter2_fifo_output_reg$EMPTY_N &&
	     fma_multiplier_fifo_stage0_reg$FULL_N &&
	     opcode_out$FULL_N &&
	     (opcode_in_rv$port1__read[2:0] == 3'd0 ||
	      opcode_in_rv$port1__read[2:0] == 3'd2) &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_fma = CAN_FIRE_RL_rl_fma ;

  // rule RL_rl_ptof
  assign CAN_FIRE_RL_rl_ptof =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     opcode_out$FULL_N &&
	     ptof_ptoF_fifo_stage0_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd5 ;
  assign WILL_FIRE_RL_rl_ptof = CAN_FIRE_RL_rl_ptof ;

  // rule RL_rl_ftop
  assign CAN_FIRE_RL_rl_ftop =
	     opcode_in_rv$port1__read[3] && ffI_f_rv$port1__read[32] &&
	     ftop_fToP_fifo_stage0_reg$FULL_N &&
	     opcode_norm$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd4 ;
  assign WILL_FIRE_RL_rl_ftop = CAN_FIRE_RL_rl_ftop ;

  // rule RL_rl_ptoq
  assign CAN_FIRE_RL_rl_ptoq =
	     opcode_in_rv$port1__read[3] &&
	     extracter1_fifo_output_reg$EMPTY_N &&
	     opcode_out$FULL_N &&
	     ptoq_positToquire_fifo_stage1_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd7 &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_ptoq = CAN_FIRE_RL_rl_ptoq ;

  // rule RL_rl_qtop
  assign CAN_FIRE_RL_rl_qtop =
	     opcode_in_rv$port1__read[3] && opcode_norm$FULL_N &&
	     qtop_quireToPosit1_fifo_stage0_reg$FULL_N &&
	     opcode_in_rv$port1__read[2:0] == 3'd6 &&
	     !rg_quire_busy ;
  assign WILL_FIRE_RL_rl_qtop = CAN_FIRE_RL_rl_qtop ;

  // rule RL_rl_norm
  assign CAN_FIRE_RL_rl_norm =
	     opcode_out$FULL_N && opcode_norm$EMPTY_N &&
	     IF_opcode_norm_first__84_EQ_4_85_THEN_ftop_ffO_ETC___d794 ;
  assign WILL_FIRE_RL_rl_norm =
	     CAN_FIRE_RL_rl_norm && !WILL_FIRE_RL_rl_ptoq &&
	     !WILL_FIRE_RL_rl_ptof &&
	     !WILL_FIRE_RL_rl_fma ;

  // rule RL_rl_out
  assign CAN_FIRE_RL_rl_out =
	     opcode_out$EMPTY_N &&
	     IF_opcode_out_first__054_EQ_0_055_OR_opcode_ou_ETC___d1077 ;
  assign WILL_FIRE_RL_rl_out = CAN_FIRE_RL_rl_out ;

  // rule RL_fma_rl_connect1
  assign CAN_FIRE_RL_fma_rl_connect1 =
	     fma_multiplier_fifo_output_reg$EMPTY_N &&
	     fma_adder_fifo_stage0_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_rl_connect1 = CAN_FIRE_RL_fma_rl_connect1 ;

  // rule RL_fma_rl_out
  assign CAN_FIRE_RL_fma_rl_out =
	     fma_adder_fifo_output_reg$EMPTY_N && fma_ffO$FULL_N ;
  assign WILL_FIRE_RL_fma_rl_out = CAN_FIRE_RL_fma_rl_out ;

  // rule RL_fma_multiplier_stage_1
  assign CAN_FIRE_RL_fma_multiplier_stage_1 =
	     fma_multiplier_fifo_stage0_reg$EMPTY_N &&
	     fma_multiplier_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_multiplier_stage_1 =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;

  // rule RL_fma_adder_stage_1
  assign CAN_FIRE_RL_fma_adder_stage_1 =
	     fma_adder_fifo_stage0_reg$EMPTY_N &&
	     fma_adder_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_fma_adder_stage_1 = CAN_FIRE_RL_fma_adder_stage_1 ;

  // rule RL_ptoq_rl_out
  assign CAN_FIRE_RL_ptoq_rl_out =
	     ptoq_positToquire_fifo_output_reg$EMPTY_N && ptoq_ffO$FULL_N ;
  assign WILL_FIRE_RL_ptoq_rl_out = CAN_FIRE_RL_ptoq_rl_out ;

  // rule RL_ptoq_positToquire_stage_2
  assign CAN_FIRE_RL_ptoq_positToquire_stage_2 =
	     ptoq_positToquire_fifo_stage1_reg$EMPTY_N &&
	     ptoq_positToquire_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ptoq_positToquire_stage_2 =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;

  // rule RL_qtop_rl_out
  assign CAN_FIRE_RL_qtop_rl_out =
	     qtop_quireToPosit1_fifo_output_reg$EMPTY_N && qtop_ffO$FULL_N ;
  assign WILL_FIRE_RL_qtop_rl_out = CAN_FIRE_RL_qtop_rl_out ;

  // rule RL_qtop_quireToPosit1_stage_1
  assign CAN_FIRE_RL_qtop_quireToPosit1_stage_1 =
	     qtop_quireToPosit1_fifo_stage0_reg$EMPTY_N &&
	     qtop_quireToPosit1_fifo_stage1_reg$FULL_N ;
  assign WILL_FIRE_RL_qtop_quireToPosit1_stage_1 =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;

  // rule RL_qtop_quireToPosit1_stage_2
  assign CAN_FIRE_RL_qtop_quireToPosit1_stage_2 =
	     qtop_quireToPosit1_fifo_stage1_reg$EMPTY_N &&
	     qtop_quireToPosit1_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_qtop_quireToPosit1_stage_2 =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;

  // rule RL_ftop_rl_out
  assign CAN_FIRE_RL_ftop_rl_out =
	     ftop_fToP_fifo_output_reg$EMPTY_N && ftop_ffO$FULL_N ;
  assign WILL_FIRE_RL_ftop_rl_out = CAN_FIRE_RL_ftop_rl_out ;

  // rule RL_ftop_fToP_stage_1
  assign CAN_FIRE_RL_ftop_fToP_stage_1 =
	     ftop_fToP_fifo_stage0_reg$EMPTY_N &&
	     ftop_fToP_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ftop_fToP_stage_1 = CAN_FIRE_RL_ftop_fToP_stage_1 ;

  // rule RL_ptof_rl_out
  assign CAN_FIRE_RL_ptof_rl_out =
	     ptof_ptoF_fifo_output_reg$EMPTY_N && ptof_ffO$FULL_N ;
  assign WILL_FIRE_RL_ptof_rl_out = CAN_FIRE_RL_ptof_rl_out ;

  // rule RL_ptof_ptoF_stage_2
  assign CAN_FIRE_RL_ptof_ptoF_stage_2 =
	     ptof_ptoF_fifo_stage0_reg$EMPTY_N &&
	     ptof_ptoF_fifo_output_reg$FULL_N ;
  assign WILL_FIRE_RL_ptof_ptoF_stage_2 = CAN_FIRE_RL_ptof_ptoF_stage_2 ;

  // inputs to muxes for submodule ports
  assign MUX_opcode_out$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptoq || WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fma ;
  assign MUX_rg_quire_busy$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd7) ;
  assign MUX_rg_quire_busy$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 ;
  assign MUX_rg_quire$write_1__VAL_1 =
	     (ptoq_positToquire_fifo_stage1_reg$D_OUT[1:0] == 2'd2) ?
	       32'd0 :
	       twos_complement_carry_int_frac__h5584 ;
  assign MUX_rg_quire$write_1__VAL_2 =
	     (x__h1222 | y__h1223) ?
	       32'h80000000 :
	       IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d110 ;

  // inlined wires
  assign opcode_in_rv$port0__write_1 = { 1'd1, ffI$D_OUT[2:0] } ;
  assign opcode_in_rv$port1__read =
	     CAN_FIRE_RL_extract_in ?
	       opcode_in_rv$port0__write_1 :
	       opcode_in_rv ;
  assign opcode_in_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_qtop || WILL_FIRE_RL_rl_ptoq ||
	     WILL_FIRE_RL_rl_ftop ||
	     WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fma ;
  assign opcode_in_rv$port2__read =
	     opcode_in_rv$EN_port1__write ? 4'd2 : opcode_in_rv$port1__read ;
  assign ffI_f_rv$EN_port0__write =
	     WILL_FIRE_RL_extract_in && ffI$D_OUT[2:0] == 3'd4 ;
  assign ffI_f_rv$port0__write_1 = { 1'd1, ffI$D_OUT[103:72] } ;
  assign ffI_f_rv$port1__read =
	     ffI_f_rv$EN_port0__write ? ffI_f_rv$port0__write_1 : ffI_f_rv ;
  assign ffI_f_rv$port2__read =
	     CAN_FIRE_RL_rl_ftop ? 33'h0AAAAAAAA : ffI_f_rv$port1__read ;

  // register ffI_f_rv
  assign ffI_f_rv$D_IN = ffI_f_rv$port2__read ;
  assign ffI_f_rv$EN = 1'b1 ;

  // register fma_check_quire
  assign fma_check_quire$D_IN = 1'b0 ;
  assign fma_check_quire$EN = 1'b0 ;

  // register opcode_in_rv
  assign opcode_in_rv$D_IN = opcode_in_rv$port2__read ;
  assign opcode_in_rv$EN = 1'b1 ;

  // register rg_quire
  assign rg_quire$D_IN =
	     WILL_FIRE_RL_ptoq_positToquire_stage_2 ?
	       MUX_rg_quire$write_1__VAL_1 :
	       MUX_rg_quire$write_1__VAL_2 ;
  assign rg_quire$EN =
	     WILL_FIRE_RL_fma_adder_stage_1 ||
	     WILL_FIRE_RL_ptoq_positToquire_stage_2 ;

  // register rg_quire_busy
  assign rg_quire_busy$D_IN =
	     !MUX_rg_quire_busy$write_1__SEL_1 &&
	     !MUX_rg_quire_busy$write_1__SEL_2 ;
  assign rg_quire_busy$EN =
	     WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 ||
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd7) ||
	     WILL_FIRE_RL_rl_qtop ||
	     WILL_FIRE_RL_rl_ptoq ||
	     WILL_FIRE_RL_rl_fma ;

  // submodule extracter1_fifo_output_reg
  assign extracter1_fifo_output_reg$D_IN =
	     { (ffI$D_OUT[78:72] == 7'd0 && !ffI$D_OUT[79]) ?
		 2'd2 :
		 ((ffI$D_OUT[78:72] == 7'd0 && ffI$D_OUT[79]) ? 2'd1 : 2'd0),
	       ffI$D_OUT[79],
	       (ffI$D_OUT[78:72] == 7'd0 && !ffI$D_OUT[79]) ?
		 9'd0 :
		 IF_IF_ffI_first__06_BIT_79_40_THEN_0_MINUS_ffI_ETC___d425 } ;
  assign extracter1_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_extract_in &&
	     (ffI$D_OUT[2:0] == 3'd1 || ffI$D_OUT[2:0] == 3'd3 ||
	      ffI$D_OUT[2:0] == 3'd2 ||
	      ffI$D_OUT[2:0] == 3'd0 ||
	      ffI$D_OUT[2:0] == 3'd5 ||
	      ffI$D_OUT[2:0] == 3'd7) ;
  assign extracter1_fifo_output_reg$DEQ = MUX_opcode_out$enq_1__SEL_1 ;
  assign extracter1_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage0_reg
  assign extracter1_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter1_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage1_reg
  assign extracter1_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter1_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter1_fifo_stage2_reg
  assign extracter1_fifo_stage2_reg$D_IN = 12'h0 ;
  assign extracter1_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter1_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_output_reg
  assign extracter2_fifo_output_reg$D_IN =
	     { (IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432[6:0] ==
		7'd0 &&
		!IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432[7]) ?
		 2'd2 :
		 ((IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432[6:0] ==
		   7'd0 &&
		   IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432[7]) ?
		    2'd1 :
		    2'd0),
	       IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432[7],
	       (IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432[6:0] ==
		7'd0 &&
		!IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432[7]) ?
		 9'd0 :
		 IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d520 } ;
  assign extracter2_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_extract_in &&
	     (ffI$D_OUT[2:0] == 3'd1 || ffI$D_OUT[2:0] == 3'd3 ||
	      ffI$D_OUT[2:0] == 3'd2 ||
	      ffI$D_OUT[2:0] == 3'd0) ;
  assign extracter2_fifo_output_reg$DEQ = CAN_FIRE_RL_rl_fma ;
  assign extracter2_fifo_output_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage0_reg
  assign extracter2_fifo_stage0_reg$D_IN = 10'h0 ;
  assign extracter2_fifo_stage0_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage1_reg
  assign extracter2_fifo_stage1_reg$D_IN = 15'h0 ;
  assign extracter2_fifo_stage1_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule extracter2_fifo_stage2_reg
  assign extracter2_fifo_stage2_reg$D_IN = 12'h0 ;
  assign extracter2_fifo_stage2_reg$ENQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$DEQ = 1'b0 ;
  assign extracter2_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule ffI
  assign ffI$D_IN =
	     { CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q20,
	       server_core_request_put[135:72],
	       CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q21,
	       server_core_request_put[69:0] } ;
  assign ffI$ENQ = EN_server_core_request_put ;
  assign ffI$DEQ = CAN_FIRE_RL_extract_in ;
  assign ffI$CLR = 1'b0 ;

  // submodule ffO
  always@(opcode_out$D_OUT or
	  normalizer_fifo_output_reg$D_OUT or ptof_ffO$D_OUT)
  begin
    case (opcode_out$D_OUT)
      3'd0, 3'd2, 3'd7: ffO$D_IN = 71'h555555555555554000;
      3'd5:
	  ffO$D_IN =
	      { 34'h1AAAAAAAA,
		ptof_ffO$D_OUT[34:3],
		2'd0,
		ptof_ffO$D_OUT[2:1] == 2'd1,
		ptof_ffO$D_OUT[2:1] == 2'd2 && ptof_ffO$D_OUT[0],
		ptof_ffO$D_OUT[0] };
      default: ffO$D_IN =
		   { 57'h12AAAAAAAAAAAAA,
		     normalizer_fifo_output_reg$D_OUT[11:3],
		     normalizer_fifo_output_reg$D_OUT[11],
		     1'd0,
		     normalizer_fifo_output_reg$D_OUT[2:1] == 2'd1,
		     normalizer_fifo_output_reg$D_OUT[2:1] == 2'd2 &&
		     normalizer_fifo_output_reg$D_OUT[0],
		     normalizer_fifo_output_reg$D_OUT[0] };
    endcase
  end
  assign ffO$ENQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2 ||
	      opcode_out$D_OUT == 3'd7 ||
	      opcode_out$D_OUT == 3'd5 ||
	      opcode_out$D_OUT == 3'd4 ||
	      opcode_out$D_OUT == 3'd6) ;
  assign ffO$DEQ = EN_server_core_response_get ;
  assign ffO$CLR = 1'b0 ;

  // submodule fma_adder_fifo_output_reg
  assign fma_adder_fifo_output_reg$ENQ = CAN_FIRE_RL_fma_adder_stage_1 ;
  assign fma_adder_fifo_output_reg$DEQ = CAN_FIRE_RL_fma_rl_out ;
  assign fma_adder_fifo_output_reg$CLR = 1'b0 ;

  // submodule fma_adder_fifo_stage0_reg
  assign fma_adder_fifo_stage0_reg$D_IN =
	     { IF_NOT_rg_quire_15_BIT_31_16_17_AND_NOT_fma_mu_ETC___d130,
	       x__h5039,
	       x__h5044,
	       (rg_quire == 32'd0) ? 2'd2 : 2'd0,
	       fma_multiplier_fifo_output_reg$D_OUT[36:34] } ;
  assign fma_adder_fifo_stage0_reg$ENQ = CAN_FIRE_RL_fma_rl_connect1 ;
  assign fma_adder_fifo_stage0_reg$DEQ = CAN_FIRE_RL_fma_adder_stage_1 ;
  assign fma_adder_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule fma_ffO
  assign fma_ffO$ENQ = CAN_FIRE_RL_fma_rl_out ;
  assign fma_ffO$DEQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd0 || opcode_out$D_OUT == 3'd2) ;
  assign fma_ffO$CLR = 1'b0 ;

  // submodule fma_multiplier_fifo_output_reg
  assign fma_multiplier_fifo_output_reg$D_IN =
	     { (twos_complement_carry_int_frac__h437 == 32'd0 &&
		fma_multiplier_fifo_stage0_reg$D_OUT[19:18] == 2'd0) ?
		 2'd2 :
		 fma_multiplier_fifo_stage0_reg$D_OUT[19:18],
	       fma_multiplier_fifo_stage0_reg$D_OUT[20],
	       twos_complement_carry_int_frac__h437,
	       x__h804,
	       x__h848 } ;
  assign fma_multiplier_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;
  assign fma_multiplier_fifo_output_reg$DEQ = CAN_FIRE_RL_fma_rl_connect1 ;
  assign fma_multiplier_fifo_output_reg$CLR = 1'b0 ;

  // submodule fma_multiplier_fifo_stage0_reg
  assign fma_multiplier_fifo_stage0_reg$D_IN =
	     { x__h19423,
	       (extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2 &&
		extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
		 2'd2 :
		 ((extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 ||
		   extracter2_fifo_output_reg$D_OUT[11:10] == 2'd1) ?
		    2'd1 :
		    2'd0),
	       extracter1_fifo_output_reg_first__67_BIT_9_82__ETC___d604 } ;
  assign fma_multiplier_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_fma ;
  assign fma_multiplier_fifo_stage0_reg$DEQ =
	     CAN_FIRE_RL_fma_multiplier_stage_1 ;
  assign fma_multiplier_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ftop_fToP_fifo_output_reg
  assign ftop_fToP_fifo_output_reg$D_IN =
	     { ftop_fToP_fifo_stage0_reg$D_OUT[18:11],
	       x_frac__h7046,
	       x__h7172,
	       x__h7249 } ;
  assign ftop_fToP_fifo_output_reg$ENQ = CAN_FIRE_RL_ftop_fToP_stage_1 ;
  assign ftop_fToP_fifo_output_reg$DEQ = CAN_FIRE_RL_ftop_rl_out ;
  assign ftop_fToP_fifo_output_reg$CLR = 1'b0 ;

  // submodule ftop_fToP_fifo_stage0_reg
  assign ftop_fToP_fifo_stage0_reg$D_IN =
	     { ffI_f_rv$port1__read[31],
	       (ffI_f_rv$port1__read[30:23] == 8'd255 &&
		ffI_f_rv$port1__read[22:0] == 23'd0) ?
		 2'd1 :
		 ((ffI_f_rv$port1__read[30:23] == 8'd0 &&
		   ffI_f_rv$port1__read[22:0] == 23'd0) ?
		    2'd2 :
		    2'd0),
	       x__h20562,
	       IF_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_T_ETC___d661,
	       ffI_f_rv$port1__read[22:18],
	       IF_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_T_ETC___d672,
	       ffI_f_rv$port1__read[17],
	       x__h20729 } ;
  assign ftop_fToP_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_ftop ;
  assign ftop_fToP_fifo_stage0_reg$DEQ = CAN_FIRE_RL_ftop_fToP_stage_1 ;
  assign ftop_fToP_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ftop_ffO
  assign ftop_ffO$D_IN = ftop_fToP_fifo_output_reg$D_OUT ;
  assign ftop_ffO$ENQ = CAN_FIRE_RL_ftop_rl_out ;
  assign ftop_ffO$DEQ = WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 ;
  assign ftop_ffO$CLR = 1'b0 ;

  // submodule need_normalize
  assign need_normalize$D_IN = 1'b0 ;
  assign need_normalize$ENQ = 1'b0 ;
  assign need_normalize$DEQ = 1'b0 ;
  assign need_normalize$CLR = 1'b0 ;

  // submodule normalizer_fifo_output_reg
  assign normalizer_fifo_output_reg$D_IN =
	     (opcode_norm$D_OUT == 3'd4) ?
	       { ftop_ffO$D_OUT[11],
		 output_regf_out_posit__h27235,
		 ftop_ffO$D_OUT[13:12],
		 flag_prev_truncate__h27213 - _theResult____h27214 ||
		 a__h27251 == 7'd0 &&
		 ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d896 } :
	       { qtop_ffO$D_OUT[11],
		 output_regf_out_posit__h29708,
		 qtop_ffO$D_OUT[13:12],
		 flag_prev_truncate__h29690 - _theResult____h29691 ||
		 a__h29724 == 7'd0 &&
		 qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d1010 } ;
  assign normalizer_fifo_output_reg$ENQ =
	     WILL_FIRE_RL_rl_norm &&
	     (opcode_norm$D_OUT == 3'd4 || opcode_norm$D_OUT == 3'd6) ;
  assign normalizer_fifo_output_reg$DEQ =
	     WILL_FIRE_RL_rl_out &&
	     (opcode_out$D_OUT == 3'd4 || opcode_out$D_OUT == 3'd6) ;
  assign normalizer_fifo_output_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage0_reg
  assign normalizer_fifo_stage0_reg$D_IN = 18'h0 ;
  assign normalizer_fifo_stage0_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage1_reg
  assign normalizer_fifo_stage1_reg$D_IN = 22'h0 ;
  assign normalizer_fifo_stage1_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule normalizer_fifo_stage2_reg
  assign normalizer_fifo_stage2_reg$D_IN = 12'h0 ;
  assign normalizer_fifo_stage2_reg$ENQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$DEQ = 1'b0 ;
  assign normalizer_fifo_stage2_reg$CLR = 1'b0 ;

  // submodule opcode_norm
  assign opcode_norm$D_IN = opcode_in_rv$port1__read[2:0] ;
  assign opcode_norm$ENQ = WILL_FIRE_RL_rl_qtop || WILL_FIRE_RL_rl_ftop ;
  assign opcode_norm$DEQ = WILL_FIRE_RL_rl_norm ;
  assign opcode_norm$CLR = 1'b0 ;

  // submodule opcode_out
  assign opcode_out$D_IN =
	     MUX_opcode_out$enq_1__SEL_1 ?
	       opcode_in_rv$port1__read[2:0] :
	       opcode_norm$D_OUT ;
  assign opcode_out$ENQ =
	     WILL_FIRE_RL_rl_ptoq || WILL_FIRE_RL_rl_ptof ||
	     WILL_FIRE_RL_rl_fma ||
	     WILL_FIRE_RL_rl_norm ;
  assign opcode_out$DEQ = CAN_FIRE_RL_rl_out ;
  assign opcode_out$CLR = 1'b0 ;

  // submodule ptof_ffO
  assign ptof_ffO$D_IN = ptof_ptoF_fifo_output_reg$D_OUT ;
  assign ptof_ffO$ENQ = CAN_FIRE_RL_ptof_rl_out ;
  assign ptof_ffO$DEQ = WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd5 ;
  assign ptof_ffO$CLR = 1'b0 ;

  // submodule ptof_ptoF_fifo_output_reg
  assign ptof_ptoF_fifo_output_reg$D_IN =
	     { float_no__h7802,
	       (ptof_ptoF_fifo_stage0_reg$D_OUT[40:39] == 2'd0) ?
		 CASE_float_no802_0_2_4286578688_1_0__q22 :
		 ptof_ptoF_fifo_stage0_reg$D_OUT[40:39],
	       add_round__h7800 } ;
  assign ptof_ptoF_fifo_output_reg$ENQ = CAN_FIRE_RL_ptof_ptoF_stage_2 ;
  assign ptof_ptoF_fifo_output_reg$DEQ = CAN_FIRE_RL_ptof_rl_out ;
  assign ptof_ptoF_fifo_output_reg$CLR = 1'b0 ;

  // submodule ptof_ptoF_fifo_stage0_reg
  assign ptof_ptoF_fifo_stage0_reg$D_IN =
	     { extracter1_fifo_output_reg$D_OUT[9],
	       extracter1_fifo_output_reg$D_OUT[11:10],
	       IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC___d617,
	       stage0_regf_frac__h19968,
	       IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC___d630,
	       2'd1 } ;
  assign ptof_ptoF_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_ptof ;
  assign ptof_ptoF_fifo_stage0_reg$DEQ = CAN_FIRE_RL_ptof_ptoF_stage_2 ;
  assign ptof_ptoF_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ptoq_ffO
  assign ptoq_ffO$ENQ = CAN_FIRE_RL_ptoq_rl_out ;
  assign ptoq_ffO$DEQ = WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd7 ;
  assign ptoq_ffO$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_output_reg
  assign ptoq_positToquire_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;
  assign ptoq_positToquire_fifo_output_reg$DEQ = CAN_FIRE_RL_ptoq_rl_out ;
  assign ptoq_positToquire_fifo_output_reg$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_stage0_reg
  assign ptoq_positToquire_fifo_stage0_reg$D_IN = 12'h0 ;
  assign ptoq_positToquire_fifo_stage0_reg$ENQ = 1'b0 ;
  assign ptoq_positToquire_fifo_stage0_reg$DEQ = 1'b0 ;
  assign ptoq_positToquire_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule ptoq_positToquire_fifo_stage1_reg
  assign ptoq_positToquire_fifo_stage1_reg$D_IN =
	     { extracter1_fifo_output_reg$D_OUT[9],
	       int_frac__h20905,
	       extracter1_fifo_output_reg$D_OUT[11:10] } ;
  assign ptoq_positToquire_fifo_stage1_reg$ENQ = CAN_FIRE_RL_rl_ptoq ;
  assign ptoq_positToquire_fifo_stage1_reg$DEQ =
	     CAN_FIRE_RL_ptoq_positToquire_stage_2 ;
  assign ptoq_positToquire_fifo_stage1_reg$CLR = 1'b0 ;

  // submodule qtop_ffO
  assign qtop_ffO$D_IN = qtop_quireToPosit1_fifo_output_reg$D_OUT ;
  assign qtop_ffO$ENQ = CAN_FIRE_RL_qtop_rl_out ;
  assign qtop_ffO$DEQ = MUX_rg_quire_busy$write_1__SEL_2 ;
  assign qtop_ffO$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_output_reg
  assign qtop_quireToPosit1_fifo_output_reg$D_IN =
	     qtop_quireToPosit1_fifo_stage1_reg$D_OUT ;
  assign qtop_quireToPosit1_fifo_output_reg$ENQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;
  assign qtop_quireToPosit1_fifo_output_reg$DEQ = CAN_FIRE_RL_qtop_rl_out ;
  assign qtop_quireToPosit1_fifo_output_reg$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_stage0_reg
  assign qtop_quireToPosit1_fifo_stage0_reg$D_IN =
	     { rg_quire[31],
	       (!rg_quire[31] && rg_quire[30:0] == 31'd0) ? 2'd2 : 2'd0,
	       rg_quire_15_BIT_31_16_AND_rg_quire_15_BITS_30__ETC___d781 } ;
  assign qtop_quireToPosit1_fifo_stage0_reg$ENQ = CAN_FIRE_RL_rl_qtop ;
  assign qtop_quireToPosit1_fifo_stage0_reg$DEQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;
  assign qtop_quireToPosit1_fifo_stage0_reg$CLR = 1'b0 ;

  // submodule qtop_quireToPosit1_fifo_stage1_reg
  assign qtop_quireToPosit1_fifo_stage1_reg$D_IN =
	     { qtop_quireToPosit1_fifo_stage0_reg$D_OUT[38:31],
	       stage1_regf_frac__h6205,
	       x__h6429,
	       x__h6472 } ;
  assign qtop_quireToPosit1_fifo_stage1_reg$ENQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_1 ;
  assign qtop_quireToPosit1_fifo_stage1_reg$DEQ =
	     CAN_FIRE_RL_qtop_quireToPosit1_stage_2 ;
  assign qtop_quireToPosit1_fifo_stage1_reg$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_rg_quire_15_BIT_31_16_THEN_0_ETC___d775 =
	     (_0_CONCAT_IF_IF_rg_quire_15_BIT_31_16_THEN_0_MI_ETC___d770[5] &&
	      _19_MINUS_0_CONCAT_IF_IF_rg_quire_15_BIT_31_16__ETC___d772[5]) ?
	       6'd31 :
	       _19_MINUS_0_CONCAT_IF_IF_rg_quire_15_BIT_31_16__ETC___d772 ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_T_ETC___d661 =
	     _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d657 ?
	       4'd10 :
	       (_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d658 ?
		  _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d655[3:0] :
		  4'd6) ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_T_ETC___d672 =
	     _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d657 ?
	       IF_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_T_ETC__q18[3:0] :
	       (_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d658 ?
		  4'd0 :
		  IF_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_T_ETC__q19[3:0]) ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_T_ETC__q18 =
	     ((_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d663 ^
	       8'h80) <=
	      8'd121) ?
	       8'd249 :
	       _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d663 ;
  assign IF_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_T_ETC__q19 =
	     ((_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d667 ^
	       8'h80) <=
	      8'd135) ?
	       _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d667 :
	       8'd7 ;
  assign IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d506 =
	     new_inp__h13382[6] ?
	       ((!INV_new_inp3382__q10[6] && !INV_new_inp3382__q10[5] &&
		 !INV_new_inp3382__q10[4] &&
		 !INV_new_inp3382__q10[3] &&
		 !INV_new_inp3382__q10[2] &&
		 !INV_new_inp3382__q10[1] &&
		 !INV_new_inp3382__q10[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h13828 :
	       ((!new_inp__h13382[5] && !new_inp__h13382[4] &&
		 !new_inp__h13382[3] &&
		 !new_inp__h13382[2] &&
		 !new_inp__h13382[1] &&
		 !new_inp__h13382[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h14846 ;
  assign IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d520 =
	     { new_inp__h13382[6] ? b__h13818 : b__h13820, frac__h13390 } ;
  assign IF_IF_NOT_IF_ftop_ffO_first__98_BIT_10_03_THEN_ETC___d878 =
	     (b__h27372[6] &&
	      !IF_NOT_IF_ftop_ffO_first__98_BIT_10_03_THEN_1__ETC___d874[6]) ?
	       7'd127 :
	       IF_NOT_IF_ftop_ffO_first__98_BIT_10_03_THEN_1__ETC___d874 ;
  assign IF_IF_NOT_IF_qtop_ffO_first__12_BIT_10_17_THEN_ETC___d992 =
	     (b__h29845[6] &&
	      !IF_NOT_IF_qtop_ffO_first__12_BIT_10_17_THEN_1__ETC___d988[6]) ?
	       7'd127 :
	       IF_NOT_IF_qtop_ffO_first__12_BIT_10_17_THEN_1__ETC___d988 ;
  assign IF_IF_ffI_first__06_BIT_79_40_THEN_0_MINUS_ffI_ETC___d411 =
	     new_inp__h10681[6] ?
	       ((!INV_new_inp0681__q3[6] && !INV_new_inp0681__q3[5] &&
		 !INV_new_inp0681__q3[4] &&
		 !INV_new_inp0681__q3[3] &&
		 !INV_new_inp0681__q3[2] &&
		 !INV_new_inp0681__q3[1] &&
		 !INV_new_inp0681__q3[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h11056 :
	       ((!new_inp__h10681[5] && !new_inp__h10681[4] &&
		 !new_inp__h10681[3] &&
		 !new_inp__h10681[2] &&
		 !new_inp__h10681[1] &&
		 !new_inp__h10681[0]) ?
		  3'd7 :
		  3'd6) -
	       x__h12074 ;
  assign IF_IF_ffI_first__06_BIT_79_40_THEN_0_MINUS_ffI_ETC___d425 =
	     { new_inp__h10681[6] ? b__h11046 : b__h11048, frac__h10689 } ;
  assign IF_INV_NOT_IF_NOT_fma_adder_fifo_stage0_reg_fi_ETC___d110 =
	     (all_bits_0__h1179 & y__h3234 &&
	      fma_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd0 &&
	      fma_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd0) ?
	       32'd0 :
	       x__h3258 ;
  assign IF_NOT_IF_ftop_ffO_first__98_BIT_10_03_THEN_1__ETC___d874 =
	     b__h27372 + b__h29113 ;
  assign IF_NOT_IF_qtop_ffO_first__12_BIT_10_17_THEN_1__ETC___d988 =
	     b__h29845 + b__h31585 ;
  assign IF_NOT_rg_quire_15_BIT_31_16_17_AND_NOT_fma_mu_ETC___d130 =
	     (!rg_quire[31] && !fma_multiplier_fifo_output_reg$D_OUT[33] &&
	      rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123[31]) ?
	       32'h7FFFFFFF :
	       ((rg_quire[31] && fma_multiplier_fifo_output_reg$D_OUT[33] &&
		 !rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123[31]) ?
		  32'h80000000 :
		  rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123) ;
  assign IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC___d617 =
	     SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d614 ?
	       8'd129 :
	       (SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d615 ?
		  SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d613 :
		  8'd127) ;
  assign IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC___d630 =
	     SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d614 ?
	       { {2{IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC__q16[3]}},
		 IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC__q16 } :
	       (SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d615 ?
		  6'd0 :
		  { {2{IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC__q17[3]}},
		    IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC__q17 }) ;
  assign IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC__q16 =
	     ((SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC__q15[3:0] ^
	       4'h8) <=
	      4'd9) ?
	       4'd1 :
	       SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC__q15[3:0] ;
  assign IF_SEXT_extracter1_fifo_output_reg_first__67_B_ETC__q17 =
	     SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d624[3] ?
	       SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d624[3:0] :
	       4'd15 ;
  assign IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12 =
	     (SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8[5] ?
		-SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8 :
		SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8) -
	     6'd12 ;
  assign IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15 =
	     (IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8[4:0] ^
	      5'h10) <=
	     5'd16 ;
  assign IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8 =
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12 +
	     6'd10 ;
  assign IF_extracter1_fifo_output_reg_first__67_BITS_1_ETC___d586 =
	     (extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
	       2'b01 :
	       ((extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2) ?
		  extracter2_fifo_output_reg$D_OUT[11:10] :
		  2'b11) ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_16_ETC___d27 =
	     (fma_multiplier_fifo_stage0_reg$D_OUT[16] &&
	      !IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15 ||
	      (IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12 +
	       6'd2 ^
	       6'h20) <=
	      6'd32) ?
	       7'd0 :
	       x__h642[6:0] ;
  assign IF_fma_multiplier_fifo_stage0_reg_first_BIT_16_ETC___d36 =
	     (fma_multiplier_fifo_stage0_reg$D_OUT[16] &&
	      !IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15) ?
	       f_new___1__h682 :
	       f_new__h629 ;
  assign IF_ftop_fToP_fifo_stage0_reg_first__06_BIT_5_0_ETC___d213 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[5] ?
	       -ftop_fToP_fifo_stage0_reg$D_OUT[5:2] :
	       ftop_fToP_fifo_stage0_reg$D_OUT[5:2] ;
  assign IF_ftop_ffO_first__98_BIT_10_03_THEN_1_SL_6_MI_ETC___d829 =
	     b__h27498 + b__h28145 ;
  assign IF_ftop_ffO_first__98_BIT_9_09_AND_NOT_ftop_ff_ETC___d815 =
	     (ftop_ffO$D_OUT[9] &&
	      !ftop_ffO_first__98_BITS_9_TO_7_10_PLUS_1___d811[2]) ?
	       3'd7 :
	       ftop_ffO_first__98_BITS_9_TO_7_10_PLUS_1___d811 ;
  assign IF_opcode_norm_first__84_EQ_4_85_THEN_ftop_ffO_ETC___d794 =
	     (opcode_norm$D_OUT == 3'd4) ?
	       ftop_ffO$EMPTY_N && normalizer_fifo_output_reg$FULL_N :
	       opcode_norm$D_OUT != 3'd6 ||
	       qtop_ffO$EMPTY_N && normalizer_fifo_output_reg$FULL_N ;
  assign IF_ptof_ptoF_fifo_stage0_reg_first__45_BIT_7_5_ETC___d259 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       -ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] ;
  assign IF_qtop_ffO_first__12_BIT_10_17_THEN_1_SL_6_MI_ETC___d943 =
	     b__h29971 + b__h30617 ;
  assign IF_qtop_ffO_first__12_BIT_9_23_AND_NOT_qtop_ff_ETC___d929 =
	     (qtop_ffO$D_OUT[9] &&
	      !qtop_ffO_first__12_BITS_9_TO_7_24_PLUS_1___d925[2]) ?
	       3'd7 :
	       qtop_ffO_first__12_BITS_9_TO_7_24_PLUS_1___d925 ;
  assign IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173 =
	     qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166 ?
	       carry_int_frac_shifted__h6325[30:25] :
	       6'd63 ;
  assign INV_new_inp0681__q3 = ~new_inp__h10681 ;
  assign INV_new_inp3382__q10 = ~new_inp__h13382 ;
  assign NOT_IF_ftop_ffO_first__98_BIT_10_03_THEN_1_SL__ETC___d834 =
	     (!b__h27498[6] && b__h28145[6] ||
	      b__h27498[6] && !b__h28145[6]) &&
	     !IF_ftop_ffO_first__98_BIT_10_03_THEN_1_SL_6_MI_ETC___d829[6] ||
	     b__h27498[6] && b__h28145[6] ;
  assign NOT_IF_qtop_ffO_first__12_BIT_10_17_THEN_1_SL__ETC___d948 =
	     (!b__h29971[6] && b__h30617[6] ||
	      b__h29971[6] && !b__h30617[6]) &&
	     !IF_qtop_ffO_first__12_BIT_10_17_THEN_1_SL_6_MI_ETC___d943[6] ||
	     b__h29971[6] && b__h30617[6] ;
  assign NOT_ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MI_ETC___d856 =
	     !ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d841 &&
	     flag_prev_truncate__h27213 &&
	     ftop_ffO$D_OUT[0] &&
	     (_6_MINUS_IF_ftop_ffO_first__98_BIT_10_03_THEN_0_ETC___d822 !=
	      3'd0 ||
	      ~k_expo__h27207[0]) ;
  assign NOT_qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MI_ETC___d970 =
	     !qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d955 &&
	     flag_prev_truncate__h29690 &&
	     qtop_ffO$D_OUT[0] &&
	     (_6_MINUS_IF_qtop_ffO_first__12_BIT_10_17_THEN_0_ETC___d936 !=
	      3'd0 ||
	      ~k_expo__h29684[0]) ;
  assign NOT_verbosity_ULE_1_24___d525 = verbosity > 4'd1 ;
  assign SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77 =
	     { {30{truncated_frac__h1176[1]}}, truncated_frac__h1176 } ;
  assign SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d592 =
	     { extracter1_fifo_output_regD_OUT_BITS_8_TO_5__q11[3],
	       extracter1_fifo_output_regD_OUT_BITS_8_TO_5__q11 } ;
  assign SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d613 =
	     { {4{extracter1_fifo_output_regD_OUT_BITS_8_TO_5__q11[3]}},
	       extracter1_fifo_output_regD_OUT_BITS_8_TO_5__q11 } ;
  assign SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d614 =
	     (SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d613 ^
	      8'h80) <
	     8'd1 ;
  assign SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d615 =
	     (SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d613 ^
	      8'h80) <=
	     8'd255 ;
  assign SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d624 =
	     SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d613 -
	     8'd127 ;
  assign SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC__q15 =
	     SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d613 -
	     8'd129 ;
  assign SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8 =
	     { fma_multiplier_fifo_stage0_regD_OUT_BITS_16_T_ETC__q7[4],
	       fma_multiplier_fifo_stage0_regD_OUT_BITS_16_T_ETC__q7 } ;
  assign _0_CONCAT_IF_IF_rg_quire_15_BIT_31_16_THEN_0_MI_ETC___d770 =
	     { 1'd0, msbZeros__h21072 } + 6'd1 ;
  assign _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d602 =
	     { 6'd0, f1__h19515 } * { 6'd0, f2__h19516 } ;
  assign _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d655 =
	     { 1'd0, ffI_f_rv$port1__read[30:23] } - 9'd127 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d657 =
	     (_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d655[7:0] ^
	      8'h80) <
	     8'd122 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d658 =
	     (_0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d655[7:0] ^
	      8'h80) <=
	     8'd134 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d663 =
	     _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d655[7:0] -
	     8'd250 ;
  assign _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d667 =
	     _0_CONCAT_ffI_f_rv_port1__read__33_BITS_30_TO_2_ETC___d655[7:0] -
	     8'd6 ;
  assign _0_MINUS_ftop_ffOD_OUT_BITS_10_TO_7__q5 =
	     4'd0 - ftop_ffO$D_OUT[10:7] ;
  assign _0_MINUS_qtop_ffOD_OUT_BITS_10_TO_7__q6 =
	     4'd0 - qtop_ffO$D_OUT[10:7] ;
  assign _19_MINUS_0_CONCAT_IF_IF_rg_quire_15_BIT_31_16__ETC___d772 =
	     6'd19 -
	     _0_CONCAT_IF_IF_rg_quire_15_BIT_31_16_THEN_0_MI_ETC___d770 ;
  assign _5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838 =
	     3'd5 -
	     _6_MINUS_IF_ftop_ffO_first__98_BIT_10_03_THEN_0_ETC___d822 ;
  assign _5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d860 =
	     _5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838 <
	     3'd2 ;
  assign _5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952 =
	     3'd5 -
	     _6_MINUS_IF_qtop_ffO_first__12_BIT_10_17_THEN_0_ETC___d936 ;
  assign _5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d974 =
	     _5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952 <
	     3'd2 ;
  assign _6_MINUS_IF_ftop_ffO_first__98_BIT_10_03_THEN_0_ETC___d822 =
	     3'd6 -
	     (ftop_ffO$D_OUT[10] ?
		_0_MINUS_ftop_ffOD_OUT_BITS_10_TO_7__q5[2:0] :
		IF_ftop_ffO_first__98_BIT_9_09_AND_NOT_ftop_ff_ETC___d815) ;
  assign _6_MINUS_IF_qtop_ffO_first__12_BIT_10_17_THEN_0_ETC___d936 =
	     3'd6 -
	     (qtop_ffO$D_OUT[10] ?
		_0_MINUS_qtop_ffOD_OUT_BITS_10_TO_7__q6[2:0] :
		IF_qtop_ffO_first__12_BIT_9_23_AND_NOT_qtop_ff_ETC___d929) ;
  assign _theResult____h27214 =
	     NOT_ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MI_ETC___d856 &&
	     (_5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838 ==
	      3'd0 ||
	      _5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838 ==
	      3'd1 &&
	      !ftop_ffO$D_OUT[1] ||
	      !_5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d860 &&
	      { 27'd0, (ftop_ffO$D_OUT[6:2] & ~(5'h1E << x__h28975)) >> 0 } ==
	      32'd0 &&
	      !ftop_ffO$D_OUT[1]) ;
  assign _theResult____h29691 =
	     NOT_qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MI_ETC___d970 &&
	     (_5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952 ==
	      3'd0 ||
	      _5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952 ==
	      3'd1 &&
	      !qtop_ffO$D_OUT[1] ||
	      !_5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d974 &&
	      { 27'd0, (qtop_ffO$D_OUT[6:2] & ~(5'h1E << x__h31447)) >> 0 } ==
	      32'd0 &&
	      !qtop_ffO$D_OUT[1]) ;
  assign a__h27251 =
	     IF_IF_NOT_IF_ftop_ffO_first__98_BIT_10_03_THEN_ETC___d878 +
	     { 6'd0,
	       IF_IF_NOT_IF_ftop_ffO_first__98_BIT_10_03_THEN_ETC___d878 ==
	       7'd0 &&
	       ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d896 } ;
  assign a__h29724 =
	     IF_IF_NOT_IF_qtop_ffO_first__12_BIT_10_17_THEN_ETC___d992 +
	     { 6'd0,
	       IF_IF_NOT_IF_qtop_ffO_first__12_BIT_10_17_THEN_ETC___d992 ==
	       7'd0 &&
	       qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d1010 } ;
  assign add_round__h7800 = x__h7967 & truncated_frac_msb__h7794 ;
  assign all_bits_0__h1179 = ~(x__h1229[30:0] != 31'd0) ;
  assign b__h11046 = { 1'd0, x__h11056 } - 4'd1 ;
  assign b__h11048 = 4'd0 - x__h12067 ;
  assign b__h13818 = { 1'd0, x__h13828 } - 4'd1 ;
  assign b__h13820 = 4'd0 - x__h14839 ;
  assign b__h27372 = x__h27388 - y__h27389 ;
  assign b__h27498 = ftop_ffO$D_OUT[10] ? k__h27558 : k__h27603 ;
  assign b__h28145 =
	     7'd0 <<
	     _6_MINUS_IF_ftop_ffO_first__98_BIT_10_03_THEN_0_ETC___d822 ;
  assign b__h29113 = { 6'd0, flag_prev_truncate__h27213 } ;
  assign b__h29845 = x__h29861 - y__h29862 ;
  assign b__h29971 = qtop_ffO$D_OUT[10] ? k__h30031 : k__h30075 ;
  assign b__h30617 =
	     7'd0 <<
	     _6_MINUS_IF_qtop_ffO_first__12_BIT_10_17_THEN_0_ETC___d936 ;
  assign b__h31585 = { 6'd0, flag_prev_truncate__h29690 } ;
  assign carry_int_frac_shifted__h6325 =
	     qtop_quireToPosit1_fifo_stage0_reg$D_OUT[30:0] << x__h6413 ;
  assign extracter1_fifo_output_regD_OUT_BITS_8_TO_5__q11 =
	     extracter1_fifo_output_reg$D_OUT[8:5] ;
  assign extracter1_fifo_output_reg_first__67_BIT_9_82__ETC___d604 =
	     { x__h19508,
	       SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d592 +
	       { extracter2_fifo_output_regD_OUT_BITS_8_TO_5__q14[3],
		 extracter2_fifo_output_regD_OUT_BITS_8_TO_5__q14 },
	       _0_CONCAT_IF_extracter1_fifo_output_reg_first___ETC___d602[11:0] } ;
  assign extracter2_fifo_output_regD_OUT_BITS_8_TO_5__q14 =
	     extracter2_fifo_output_reg$D_OUT[8:5] ;
  assign f1__h19515 =
	     { IF_extracter1_fifo_output_reg_first__67_BITS_1_ETC___d586[1],
	       extracter1_fifo_output_reg$D_OUT[4:0] } ;
  assign f2__h19516 =
	     { IF_extracter1_fifo_output_reg_first__67_BITS_1_ETC___d586[0],
	       extracter2_fifo_output_reg$D_OUT[4:0] } ;
  assign f_new___1__h682 =
	     f_new__h487 >>
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8[4:0] ;
  assign f_new__h20922 = { 19'd1, extracter1_fifo_output_reg$D_OUT[4:0] } ;
  assign f_new__h487 = { 12'd0, fma_multiplier_fifo_stage0_reg$D_OUT[11:0] } ;
  assign f_new__h629 = f_new__h487 << x__h763 ;
  assign flag_prev_truncate__h27213 =
	     (_5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838 ==
	      3'd0) ?
	       ftop_ffO$D_OUT[1] :
	       ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d846 ;
  assign flag_prev_truncate__h29690 =
	     (_5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952 ==
	      3'd0) ?
	       qtop_ffO$D_OUT[1] :
	       qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d960 ;
  assign flag_truncated_frac__h1174 =
	     x__h1823 | fma_adder_fifo_stage0_reg$D_OUT[5] ;
  assign float_no__h7799 =
	     { ptof_ptoF_fifo_stage0_reg$D_OUT[41],
	       x__h7850[7:0],
	       frac_f__h7798 } ;
  assign fma_adder_fifo_stage0_reg_first__7_BITS_38_TO__ETC___d82 =
	     fma_adder_fifo_stage0_reg$D_OUT[38:7] +
	     SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77 ;
  assign fma_multiplier_fifo_stage0_regD_OUT_BITS_11_TO_0__q9 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[11:0] ;
  assign fma_multiplier_fifo_stage0_regD_OUT_BITS_16_T_ETC__q7 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[16:12] ;
  assign frac__h10689 = new_inp__h10681[4:0] << x__h13265 ;
  assign frac__h13390 = new_inp__h13382[4:0] << x__h16037 ;
  assign frac__h7032 = { 1'd1, ftop_fToP_fifo_stage0_reg$D_OUT[10:6] } ;
  assign frac__h7792 = { 1'd1, ptof_ptoF_fifo_stage0_reg$D_OUT[30:8] } ;
  assign frac_f__h7798 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       x__h7880[22:0] :
	       ((ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] == 6'd0) ?
		  ptof_ptoF_fifo_stage0_reg$D_OUT[30:8] :
		  23'd8388607) ;
  assign ftop_ffOD_OUT_BITS_6_TO_2__q12 = ftop_ffO$D_OUT[6:2] ;
  assign ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d841 =
	     ftop_ffOD_OUT_BITS_6_TO_2__q12[_5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838] ;
  assign ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d846 =
	     ftop_ffOD_OUT_BITS_6_TO_2__q12[x__h28871] ;
  assign ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d882 =
	     ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d841 ||
	     ((_5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838 ==
	       3'd0) ?
		!ftop_ffO$D_OUT[1] :
		!ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d846) ;
  assign ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d896 =
	     ftop_ffO_first__98_BITS_6_TO_2_36_BIT_5_MINUS__ETC___d882 ||
	     !ftop_ffO$D_OUT[0] ||
	     _6_MINUS_IF_ftop_ffO_first__98_BIT_10_03_THEN_0_ETC___d822 ==
	     3'd0 &&
	     !(~k_expo__h27207[0]) ||
	     _5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838 !=
	     3'd0 &&
	     (_5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838 !=
	      3'd1 ||
	      ftop_ffO$D_OUT[1]) &&
	     (_5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d860 ||
	      { 27'd0, (ftop_ffO$D_OUT[6:2] & ~(5'h1E << x__h28975)) >> 0 } !=
	      32'd0 ||
	      ftop_ffO$D_OUT[1]) ;
  assign ftop_ffO_first__98_BITS_9_TO_7_10_PLUS_1___d811 =
	     ftop_ffO$D_OUT[9:7] + 3'd1 ;
  assign in_posit2___1_posit_inp__h13438 = 8'd0 - ffI$D_OUT[13:6] ;
  assign int_frac__h20905 = f_new__h20922 << x__h20966 ;
  assign k__h27558 = 7'd1 << x__h27601 ;
  assign k__h27603 = ~x__h27615 ;
  assign k__h30031 = 7'd1 << x__h30073 ;
  assign k__h30075 = ~x__h30087 ;
  assign k_expo__h27207 =
	     NOT_IF_ftop_ffO_first__98_BIT_10_03_THEN_1_SL__ETC___d834 ?
	       7'd127 :
	       IF_ftop_ffO_first__98_BIT_10_03_THEN_1_SL_6_MI_ETC___d829 ;
  assign k_expo__h29684 =
	     NOT_IF_qtop_ffO_first__12_BIT_10_17_THEN_1_SL__ETC___d948 ?
	       7'd127 :
	       IF_qtop_ffO_first__12_BIT_10_17_THEN_1_SL_6_MI_ETC___d943 ;
  assign mask1__h684 = ~x__h865 ;
  assign msbZeros__h21072 =
	     twos_complement_carry_int_frac__h21071[30] ?
	       5'd0 :
	       (twos_complement_carry_int_frac__h21071[29] ?
		  5'd1 :
		  (twos_complement_carry_int_frac__h21071[28] ?
		     5'd2 :
		     (twos_complement_carry_int_frac__h21071[27] ?
			5'd3 :
			(twos_complement_carry_int_frac__h21071[26] ?
			   5'd4 :
			   (twos_complement_carry_int_frac__h21071[25] ?
			      5'd5 :
			      (twos_complement_carry_int_frac__h21071[24] ?
				 5'd6 :
				 (twos_complement_carry_int_frac__h21071[23] ?
				    5'd7 :
				    (twos_complement_carry_int_frac__h21071[22] ?
				       5'd8 :
				       (twos_complement_carry_int_frac__h21071[21] ?
					  5'd9 :
					  (twos_complement_carry_int_frac__h21071[20] ?
					     5'd10 :
					     (twos_complement_carry_int_frac__h21071[19] ?
						5'd11 :
						(twos_complement_carry_int_frac__h21071[18] ?
						   5'd12 :
						   (twos_complement_carry_int_frac__h21071[17] ?
						      5'd13 :
						      (twos_complement_carry_int_frac__h21071[16] ?
							 5'd14 :
							 (twos_complement_carry_int_frac__h21071[15] ?
							    5'd15 :
							    (twos_complement_carry_int_frac__h21071[14] ?
							       5'd16 :
							       (twos_complement_carry_int_frac__h21071[13] ?
								  5'd17 :
								  (twos_complement_carry_int_frac__h21071[12] ?
								     5'd18 :
								     (twos_complement_carry_int_frac__h21071[11] ?
									5'd19 :
									(twos_complement_carry_int_frac__h21071[10] ?
									   5'd20 :
									   (twos_complement_carry_int_frac__h21071[9] ?
									      5'd21 :
									      (twos_complement_carry_int_frac__h21071[8] ?
										 5'd22 :
										 (twos_complement_carry_int_frac__h21071[7] ?
										    5'd23 :
										    (twos_complement_carry_int_frac__h21071[6] ?
										       5'd24 :
										       (twos_complement_carry_int_frac__h21071[5] ?
											  5'd25 :
											  (twos_complement_carry_int_frac__h21071[4] ?
											     5'd26 :
											     (twos_complement_carry_int_frac__h21071[3] ?
												5'd27 :
												(twos_complement_carry_int_frac__h21071[2] ?
												   5'd28 :
												   (twos_complement_carry_int_frac__h21071[1] ?
												      5'd29 :
												      (twos_complement_carry_int_frac__h21071[0] ?
													 5'd30 :
													 5'd31)))))))))))))))))))))))))))))) ;
  assign new_inp__h10681 =
	     ffI$D_OUT[79] ? 7'd0 - ffI$D_OUT[78:72] : ffI$D_OUT[78:72] ;
  assign new_inp__h13382 =
	     IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432[7] ?
	       7'd0 -
	       IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432[6:0] :
	       IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432[6:0] ;
  assign ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q4 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[38:31] ;
  assign qtop_ffOD_OUT_BITS_6_TO_2__q13 = qtop_ffO$D_OUT[6:2] ;
  assign qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d1010 =
	     qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d996 ||
	     !qtop_ffO$D_OUT[0] ||
	     _6_MINUS_IF_qtop_ffO_first__12_BIT_10_17_THEN_0_ETC___d936 ==
	     3'd0 &&
	     !(~k_expo__h29684[0]) ||
	     _5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952 !=
	     3'd0 &&
	     (_5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952 !=
	      3'd1 ||
	      qtop_ffO$D_OUT[1]) &&
	     (_5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d974 ||
	      { 27'd0, (qtop_ffO$D_OUT[6:2] & ~(5'h1E << x__h31447)) >> 0 } !=
	      32'd0 ||
	      qtop_ffO$D_OUT[1]) ;
  assign qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d955 =
	     qtop_ffOD_OUT_BITS_6_TO_2__q13[_5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952] ;
  assign qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d960 =
	     qtop_ffOD_OUT_BITS_6_TO_2__q13[x__h31343] ;
  assign qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d996 =
	     qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d955 ||
	     ((_5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952 ==
	       3'd0) ?
		!qtop_ffO$D_OUT[1] :
		!qtop_ffO_first__12_BITS_6_TO_2_50_BIT_5_MINUS__ETC___d960) ;
  assign qtop_ffO_first__12_BITS_9_TO_7_24_PLUS_1___d925 =
	     qtop_ffO$D_OUT[9:7] + 3'd1 ;
  assign qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q1 =
	     qtop_quireToPosit1_fifo_stage0_reg$D_OUT[34:31] ;
  assign qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166 =
	     (qtop_quireToPosit1_fifo_stage0_reg$D_OUT[34:31] ^ 4'h8) <
	     4'd14 ;
  assign rg_quire_15_BIT_31_16_AND_rg_quire_15_BITS_30__ETC___d781 =
	     { x__h21639,
	       ((IF_0_CONCAT_IF_IF_rg_quire_15_BIT_31_16_THEN_0_ETC___d775 ^
		 6'h20) <
		6'd26) ?
		 4'd10 :
		 (((IF_0_CONCAT_IF_IF_rg_quire_15_BIT_31_16_THEN_0_ETC___d775 ^
		    6'h20) <=
		   6'd38) ?
		    IF_0_CONCAT_IF_IF_rg_quire_15_BIT_31_16_THEN_0_ETC___d775[3:0] :
		    4'd6),
	       twos_complement_carry_int_frac__h21071 } ;
  assign rg_quire_15_PLUS_fma_multiplier_fifo_output_re_ETC___d123 =
	     rg_quire + fma_multiplier_fifo_output_reg$D_OUT[33:2] ;
  assign stage0_regf_frac__h19968 =
	     { extracter1_fifo_output_reg$D_OUT[4:0], 18'd0 } ;
  assign stage1_regf_frac__h6205 =
	     IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173[5] ?
	       IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173[4:0] :
	       IF_qtop_quireToPosit1_fifo_stage0_reg_first__6_ETC___d173[5:1] ;
  assign truncated_frac__h1176 =
	     flag_truncated_frac__h1174 ?
	       { fma_adder_fifo_stage0_reg$D_OUT[38],
		 flag_truncated_frac__h1174 } :
	       2'b0 ;
  assign truncated_frac_msb__h7794 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       frac__h7792[x__h7940[4:0]] :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] != 6'd0 ||
	       ptof_ptoF_fifo_stage0_reg$D_OUT[1] ;
  assign truncated_frac_zero__h7033 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[5] ?
	       { 26'd0,
		 (frac__h7032 &
		  ~(6'h3E <<
		    IF_ftop_fToP_fifo_stage0_reg_first__06_BIT_5_0_ETC___d213[2:0])) >>
		 0 } ==
	       32'd0 :
	       ftop_fToP_fifo_stage0_reg$D_OUT[5:2] == 4'd0 ;
  assign truncated_frac_zero__h7793 =
	     ptof_ptoF_fifo_stage0_reg$D_OUT[7] ?
	       x__h7988 & y__h7989 :
	       ptof_ptoF_fifo_stage0_reg$D_OUT[7:2] == 6'd0 &&
	       ptof_ptoF_fifo_stage0_reg$D_OUT[0] ;
  assign twos_complement_carry_int_frac__h21071 =
	     rg_quire[31] ? 31'd0 - rg_quire[30:0] : rg_quire[30:0] ;
  assign twos_complement_carry_int_frac__h437 =
	     { fma_multiplier_fifo_stage0_reg$D_OUT[17],
	       fma_multiplier_fifo_stage0_reg$D_OUT[17] ?
		 31'd0 - x__h773 :
		 x__h773 } ;
  assign twos_complement_carry_int_frac__h5584 =
	     { ptoq_positToquire_fifo_stage1_reg$D_OUT[26],
	       ptoq_positToquire_fifo_stage1_reg$D_OUT[26] ?
		 31'd0 -
		 { 7'd0, ptoq_positToquire_fifo_stage1_reg$D_OUT[25:2] } :
		 { 7'd0, ptoq_positToquire_fifo_stage1_reg$D_OUT[25:2] } } ;
  assign x__h11056 =
	     INV_new_inp0681__q3[6] ?
	       3'd0 :
	       (INV_new_inp0681__q3[5] ?
		  3'd1 :
		  (INV_new_inp0681__q3[4] ?
		     3'd2 :
		     (INV_new_inp0681__q3[3] ?
			3'd3 :
			(INV_new_inp0681__q3[2] ?
			   3'd4 :
			   (INV_new_inp0681__q3[1] ?
			      3'd5 :
			      (INV_new_inp0681__q3[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h12067 = { 1'd0, x__h12074 } ;
  assign x__h12074 =
	     new_inp__h10681[6] ?
	       3'd0 :
	       (new_inp__h10681[5] ?
		  3'd1 :
		  (new_inp__h10681[4] ?
		     3'd2 :
		     (new_inp__h10681[3] ?
			3'd3 :
			(new_inp__h10681[2] ?
			   3'd4 :
			   (new_inp__h10681[1] ?
			      3'd5 :
			      (new_inp__h10681[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h1222 = x__h1224 | fma_adder_fifo_stage0_reg$D_OUT[0] ;
  assign x__h1224 = all_bits_0__h1179 & fma_adder_fifo_stage0_reg$D_OUT[38] ;
  assign x__h1229 =
	     (!fma_adder_fifo_stage0_reg$D_OUT[38] &&
	      !SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77[31] &&
	      fma_adder_fifo_stage0_reg_first__7_BITS_38_TO__ETC___d82[31]) ?
	       32'h7FFFFFFF :
	       ((fma_adder_fifo_stage0_reg$D_OUT[38] &&
		 SEXT_IF_fma_adder_fifo_stage0_reg_first__7_BIT_ETC___d77[31] &&
		 !fma_adder_fifo_stage0_reg_first__7_BITS_38_TO__ETC___d82[31]) ?
		  32'h80000000 :
		  fma_adder_fifo_stage0_reg_first__7_BITS_38_TO__ETC___d82) ;
  assign x__h13828 =
	     INV_new_inp3382__q10[6] ?
	       3'd0 :
	       (INV_new_inp3382__q10[5] ?
		  3'd1 :
		  (INV_new_inp3382__q10[4] ?
		     3'd2 :
		     (INV_new_inp3382__q10[3] ?
			3'd3 :
			(INV_new_inp3382__q10[2] ?
			   3'd4 :
			   (INV_new_inp3382__q10[1] ?
			      3'd5 :
			      (INV_new_inp3382__q10[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h14839 = { 1'd0, x__h14846 } ;
  assign x__h14846 =
	     new_inp__h13382[6] ?
	       3'd0 :
	       (new_inp__h13382[5] ?
		  3'd1 :
		  (new_inp__h13382[4] ?
		     3'd2 :
		     (new_inp__h13382[3] ?
			3'd3 :
			(new_inp__h13382[2] ?
			   3'd4 :
			   (new_inp__h13382[1] ?
			      3'd5 :
			      (new_inp__h13382[0] ? 3'd6 : 3'd7)))))) ;
  assign x__h1823 =
	     fma_adder_fifo_stage0_reg$D_OUT[7] &
	     fma_adder_fifo_stage0_reg$D_OUT[6] ;
  assign x__h19423 =
	     extracter1_fifo_output_reg$D_OUT[11:10] == 2'd1 &&
	     extracter2_fifo_output_reg$D_OUT[11:10] == 2'd2 ||
	     extracter2_fifo_output_reg$D_OUT[11:10] == 2'd1 &&
	     extracter1_fifo_output_reg$D_OUT[11:10] == 2'd2 ;
  assign x__h19508 =
	     x__h19530 &
	     IF_extracter1_fifo_output_reg_first__67_BITS_1_ETC___d586[0] ;
  assign x__h19530 =
	     x__h19532 &
	     IF_extracter1_fifo_output_reg_first__67_BITS_1_ETC___d586[1] ;
  assign x__h19532 =
	     extracter1_fifo_output_reg$D_OUT[9] ^
	     extracter2_fifo_output_reg$D_OUT[9] ;
  assign x__h20562 =
	     ffI_f_rv$port1__read[30:23] == 8'd255 &&
	     ffI_f_rv$port1__read[22:0] != 23'd0 ;
  assign x__h20729 = ffI_f_rv$port1__read[16:0] == 17'd0 ;
  assign x__h20966 =
	     SEXT_extracter1_fifo_output_reg_first__67_BITS_ETC___d592 +
	     5'd7 ;
  assign x__h21639 = rg_quire[31] && rg_quire[30:0] == 31'd0 ;
  assign x__h27388 = k_expo__h27207 + y__h27390 ;
  assign x__h27601 = 3'd6 - _0_MINUS_ftop_ffOD_OUT_BITS_10_TO_7__q5[2:0] ;
  assign x__h27615 =
	     7'd127 >>
	     IF_ftop_ffO_first__98_BIT_9_09_AND_NOT_ftop_ff_ETC___d815 ;
  assign x__h28871 =
	     _5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838 -
	     3'd1 ;
  assign x__h28975 =
	     _5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838 -
	     3'd2 ;
  assign x__h29861 = k_expo__h29684 + y__h29863 ;
  assign x__h30073 = 3'd6 - _0_MINUS_qtop_ffOD_OUT_BITS_10_TO_7__q6[2:0] ;
  assign x__h30087 =
	     7'd127 >>
	     IF_qtop_ffO_first__12_BIT_9_23_AND_NOT_qtop_ff_ETC___d929 ;
  assign x__h31343 =
	     _5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952 -
	     3'd1 ;
  assign x__h31447 =
	     _5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952 -
	     3'd2 ;
  assign x__h3258 = { fma_adder_fifo_stage0_reg$D_OUT[38], x__h1229[30:0] } ;
  assign x__h5039 =
	     fma_multiplier_fifo_output_reg$D_OUT[1] &
	     fma_multiplier_fifo_output_reg$D_OUT[0] ;
  assign x__h5044 = fma_multiplier_fifo_output_reg$D_OUT[1] & y__h5057 ;
  assign x__h6413 =
	     (6'd19 -
	      { {2{qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q1[3]}},
		qtop_quireToPosit1_fifo_stage0_regD_OUT_BITS__ETC__q1 }) -
	     6'd1 ;
  assign x__h642 = fma_multiplier_fifo_stage0_reg$D_OUT[11:0] >> x__h675 ;
  assign x__h6429 =
	     ((qtop_quireToPosit1_fifo_stage0_reg$D_OUT[30:0] == 31'd0 &&
	       qtop_quireToPosit1_fifo_stage0_reg$D_OUT[37:36] == 2'd0) ?
		2'd2 :
		qtop_quireToPosit1_fifo_stage0_reg$D_OUT[37:36]) !=
	     2'd2 &&
	     (!qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166 ||
	      carry_int_frac_shifted__h6325[24]) ;
  assign x__h6472 =
	     ((qtop_quireToPosit1_fifo_stage0_reg$D_OUT[30:0] == 31'd0 &&
	       qtop_quireToPosit1_fifo_stage0_reg$D_OUT[37:36] == 2'd0) ?
		2'd2 :
		qtop_quireToPosit1_fifo_stage0_reg$D_OUT[37:36]) ==
	     2'd2 ||
	     qtop_quireToPosit1_fifo_stage0_reg_first__63_B_ETC___d166 &&
	     carry_int_frac_shifted__h6325[23:0] == 24'd0 ;
  assign x__h675 =
	     6'd10 -
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d12 ;
  assign x__h7099 = frac__h7032 >> x__h7159 ;
  assign x__h7159 =
	     IF_ftop_fToP_fifo_stage0_reg_first__06_BIT_5_0_ETC___d213 +
	     4'd1 ;
  assign x__h7172 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[5] ?
	       frac__h7032[x__h7159[2:0]] :
	       ftop_fToP_fifo_stage0_reg$D_OUT[5:2] != 4'd0 ||
	       ftop_fToP_fifo_stage0_reg$D_OUT[1] ;
  assign x__h7249 = x__h7261 & truncated_frac_zero__h7033 ;
  assign x__h7261 = x__h7262 & ftop_fToP_fifo_stage0_reg$D_OUT[0] ;
  assign x__h7262 = ~ftop_fToP_fifo_stage0_reg$D_OUT[1] ;
  assign x__h763 =
	     SEXT_fma_multiplier_fifo_stage0_reg_first_BITS_ETC___d8 + 6'd2 ;
  assign x__h773 =
	     { IF_fma_multiplier_fifo_stage0_reg_first_BIT_16_ETC___d27,
	       IF_fma_multiplier_fifo_stage0_reg_first_BIT_16_ETC___d36 } ;
  assign x__h7850 =
	     { ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q4[7],
	       ptof_ptoF_fifo_stage0_regD_OUT_BITS_38_TO_31__q4 } +
	     9'd127 ;
  assign x__h7880 = frac__h7792 >> x__h7940 ;
  assign x__h7940 =
	     IF_ptof_ptoF_fifo_stage0_reg_first__45_BIT_7_5_ETC___d259 +
	     6'd1 ;
  assign x__h7967 = x__h7968 | frac_f__h7798[0] ;
  assign x__h7968 = ~truncated_frac_zero__h7793 ;
  assign x__h7988 = ~ptof_ptoF_fifo_stage0_reg$D_OUT[1] ;
  assign x__h804 =
	     fma_multiplier_fifo_stage0_reg$D_OUT[16] &&
	     !IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15 &&
	     fma_multiplier_fifo_stage0_regD_OUT_BITS_11_TO_0__q9[x__h841[3:0]] ;
  assign x__h841 =
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8[4:0] -
	     5'd1 ;
  assign x__h848 =
	     !fma_multiplier_fifo_stage0_reg$D_OUT[16] ||
	     IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC___d15 ||
	     (IF_SEXT_fma_multiplier_fifo_stage0_reg_first_B_ETC__q8[4:0] ^
	      5'h10) <=
	     5'd17 ||
	     (f_new__h487 & mask1__h684) == 24'd0 ;
  assign x__h865 = 24'd16777215 >> x__h841 ;
  assign x_frac__h7046 =
	     ftop_fToP_fifo_stage0_reg$D_OUT[5] ?
	       x__h7099[4:0] :
	       ((ftop_fToP_fifo_stage0_reg$D_OUT[5:2] == 4'd0) ?
		  ftop_fToP_fifo_stage0_reg$D_OUT[10:6] :
		  5'd31) ;
  assign y__h1223 =
	     fma_adder_fifo_stage0_reg$D_OUT[4:3] == 2'd1 ||
	     fma_adder_fifo_stage0_reg$D_OUT[2:1] == 2'd1 ;
  assign y__h27389 = { 6'd0, _theResult____h27214 } ;
  assign y__h27390 =
	     { 2'd0, ftop_ffO$D_OUT[6:2] } >>
	     _5_MINUS_6_MINUS_IF_ftop_ffO_first__98_BIT_10_0_ETC___d838 ;
  assign y__h29862 = { 6'd0, _theResult____h29691 } ;
  assign y__h29863 =
	     { 2'd0, qtop_ffO$D_OUT[6:2] } >>
	     _5_MINUS_6_MINUS_IF_qtop_ffO_first__12_BIT_10_1_ETC___d952 ;
  assign y__h3234 = ~fma_adder_fifo_stage0_reg$D_OUT[38] ;
  assign y__h5057 = ~fma_multiplier_fifo_output_reg$D_OUT[0] ;
  assign y__h7989 =
	     { 8'd0,
	       (frac__h7792 &
		~(24'hFFFFFE <<
		  IF_ptof_ptoF_fifo_stage0_reg_first__45_BIT_7_5_ETC___d259[4:0])) >>
	       0 } ==
	     32'd0 ;
  always@(ffO$D_OUT)
  begin
    case (ffO$D_OUT[70:69])
      2'd0, 2'd1:
	  CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q2 =
	      ffO$D_OUT[70:69];
      default: CASE_ffOD_OUT_BITS_70_TO_69_0_ffOD_OUT_BITS__ETC__q2 = 2'd2;
    endcase
  end
  always@(ptof_ptoF_fifo_stage0_reg$D_OUT or
	  float_no__h7799 or add_round__h7800)
  begin
    case (ptof_ptoF_fifo_stage0_reg$D_OUT[40:39])
      2'd1: float_no__h7802 = 32'hFF800000;
      2'd2: float_no__h7802 = 32'd0;
      default: float_no__h7802 =
		   float_no__h7799 + { 31'd0, add_round__h7800 };
    endcase
  end
  always@(IF_IF_ffI_first__06_BIT_79_40_THEN_0_MINUS_ffI_ETC___d411)
  begin
    case (IF_IF_ffI_first__06_BIT_79_40_THEN_0_MINUS_ffI_ETC___d411)
      3'd0: x__h13265 = 5'd5;
      3'd1: x__h13265 = 5'd4;
      3'd2: x__h13265 = 5'd3;
      3'd3: x__h13265 = 5'd2;
      3'd4: x__h13265 = 5'd1;
      3'd5: x__h13265 = 5'd0;
      default: x__h13265 = 5'd0;
    endcase
  end
  always@(ffI$D_OUT or in_posit2___1_posit_inp__h13438)
  begin
    case (ffI$D_OUT[2:0])
      3'd2, 3'd3:
	  IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432 =
	      in_posit2___1_posit_inp__h13438;
      default: IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15_OR_ffI_ETC___d432 =
		   ffI$D_OUT[13:6];
    endcase
  end
  always@(IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d506)
  begin
    case (IF_IF_IF_ffI_first__06_BITS_2_TO_0_07_EQ_2_15__ETC___d506)
      3'd0: x__h16037 = 5'd5;
      3'd1: x__h16037 = 5'd4;
      3'd2: x__h16037 = 5'd3;
      3'd3: x__h16037 = 5'd2;
      3'd4: x__h16037 = 5'd1;
      3'd5: x__h16037 = 5'd0;
      default: x__h16037 = 5'd0;
    endcase
  end
  always@(ftop_ffO$D_OUT or a__h27251)
  begin
    case (ftop_ffO$D_OUT[13:12])
      2'd0:
	  output_regf_out_posit__h27235 =
	      { ftop_ffO$D_OUT[14],
		ftop_ffO$D_OUT[14] ? 7'd0 - a__h27251 : a__h27251 };
      2'd1: output_regf_out_posit__h27235 = 8'd128;
      default: output_regf_out_posit__h27235 = 8'd0;
    endcase
  end
  always@(qtop_ffO$D_OUT or a__h29724)
  begin
    case (qtop_ffO$D_OUT[13:12])
      2'd0:
	  output_regf_out_posit__h29708 =
	      { qtop_ffO$D_OUT[14],
		qtop_ffO$D_OUT[14] ? 7'd0 - a__h29724 : a__h29724 };
      2'd1: output_regf_out_posit__h29708 = 8'd128;
      default: output_regf_out_posit__h29708 = 8'd0;
    endcase
  end
  always@(opcode_out$D_OUT or
	  ffO$FULL_N or
	  normalizer_fifo_output_reg$EMPTY_N or
	  fma_ffO$EMPTY_N or ptof_ffO$EMPTY_N or ptoq_ffO$EMPTY_N)
  begin
    case (opcode_out$D_OUT)
      3'd0, 3'd2:
	  IF_opcode_out_first__054_EQ_0_055_OR_opcode_ou_ETC___d1077 =
	      fma_ffO$EMPTY_N && ffO$FULL_N;
      3'd5:
	  IF_opcode_out_first__054_EQ_0_055_OR_opcode_ou_ETC___d1077 =
	      ffO$FULL_N && ptof_ffO$EMPTY_N;
      3'd7:
	  IF_opcode_out_first__054_EQ_0_055_OR_opcode_ou_ETC___d1077 =
	      ffO$FULL_N && ptoq_ffO$EMPTY_N;
      default: IF_opcode_out_first__054_EQ_0_055_OR_opcode_ou_ETC___d1077 =
		   opcode_out$D_OUT != 3'd4 && opcode_out$D_OUT != 3'd6 ||
		   ffO$FULL_N && normalizer_fifo_output_reg$EMPTY_N;
    endcase
  end
  always@(ffI$D_OUT or
	  extracter1_fifo_output_reg$FULL_N or
	  extracter2_fifo_output_reg$FULL_N or ffI_f_rv)
  begin
    case (ffI$D_OUT[2:0])
      3'd0, 3'd1, 3'd2, 3'd3:
	  IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329 =
	      extracter1_fifo_output_reg$FULL_N &&
	      extracter2_fifo_output_reg$FULL_N;
      3'd4:
	  IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329 =
	      !ffI_f_rv[32];
      default: IF_ffI_first__06_BITS_2_TO_0_07_EQ_4_08_THEN_N_ETC___d329 =
		   ffI$D_OUT[2:0] != 3'd5 && ffI$D_OUT[2:0] != 3'd7 ||
		   extracter1_fifo_output_reg$FULL_N;
    endcase
  end
  always@(server_core_request_put)
  begin
    case (server_core_request_put[137:136])
      2'd0, 2'd1:
	  CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q20 =
	      server_core_request_put[137:136];
      default: CASE_server_core_request_put_BITS_137_TO_136_0_ETC__q20 = 2'd2;
    endcase
  end
  always@(server_core_request_put)
  begin
    case (server_core_request_put[71:70])
      2'd0, 2'd1:
	  CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q21 =
	      server_core_request_put[71:70];
      default: CASE_server_core_request_put_BITS_71_TO_70_0_s_ETC__q21 = 2'd2;
    endcase
  end
  always@(float_no__h7802)
  begin
    case (float_no__h7802)
      32'd0: CASE_float_no802_0_2_4286578688_1_0__q22 = 2'd2;
      32'hFF800000: CASE_float_no802_0_2_4286578688_1_0__q22 = 2'd1;
      default: CASE_float_no802_0_2_4286578688_1_0__q22 = 2'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ffI_f_rv <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	fma_check_quire <= `BSV_ASSIGNMENT_DELAY 1'd0;
	opcode_in_rv <= `BSV_ASSIGNMENT_DELAY 4'd2;
	rg_quire <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_quire_busy <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (ffI_f_rv$EN) ffI_f_rv <= `BSV_ASSIGNMENT_DELAY ffI_f_rv$D_IN;
	if (fma_check_quire$EN)
	  fma_check_quire <= `BSV_ASSIGNMENT_DELAY fma_check_quire$D_IN;
	if (opcode_in_rv$EN)
	  opcode_in_rv <= `BSV_ASSIGNMENT_DELAY opcode_in_rv$D_IN;
	if (rg_quire$EN) rg_quire <= `BSV_ASSIGNMENT_DELAY rg_quire$D_IN;
	if (rg_quire_busy$EN)
	  rg_quire_busy <= `BSV_ASSIGNMENT_DELAY rg_quire_busy$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ffI_f_rv = 33'h0AAAAAAAA;
    fma_check_quire = 1'h0;
    opcode_in_rv = 4'hA;
    rg_quire = 32'hAAAAAAAA;
    rg_quire_busy = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525)
	begin
	  v__h19095 = $stime;
	  #0;
	end
    v__h19089 = v__h19095 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525)
	$write("%0d: %m: rl_extract_in: ", v__h19089);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525 &&
	  ffI$D_OUT[2:0] == 3'd0)
	$write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525 &&
	  ffI$D_OUT[2:0] == 3'd1)
	$write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525 &&
	  ffI$D_OUT[2:0] == 3'd2)
	$write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525 &&
	  ffI$D_OUT[2:0] == 3'd3)
	$write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525 &&
	  ffI$D_OUT[2:0] == 3'd4)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525 &&
	  ffI$D_OUT[2:0] == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525 &&
	  ffI$D_OUT[2:0] == 3'd6)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525 &&
	  ffI$D_OUT[2:0] != 3'd0 &&
	  ffI$D_OUT[2:0] != 3'd1 &&
	  ffI$D_OUT[2:0] != 3'd2 &&
	  ffI$D_OUT[2:0] != 3'd3 &&
	  ffI$D_OUT[2:0] != 3'd4 &&
	  ffI$D_OUT[2:0] != 3'd5 &&
	  ffI$D_OUT[2:0] != 3'd6)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525)
	$write("'h%h", ffI$D_OUT[79:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525)
	$write("'h%h", ffI$D_OUT[13:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_extract_in && NOT_verbosity_ULE_1_24___d525)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_24___d525)
	begin
	  v__h29608 = $stime;
	  #0;
	end
    v__h29602 = v__h29608 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_24___d525)
	$write("%0d: %m: rl_norm: ", v__h29602);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_24___d525)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd4 &&
	  NOT_verbosity_ULE_1_24___d525)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_24___d525)
	begin
	  v__h32103 = $stime;
	  #0;
	end
    v__h32097 = v__h32103 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_24___d525)
	$write("%0d: %m: rl_norm: ", v__h32097);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_24___d525)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd6 &&
	  NOT_verbosity_ULE_1_24___d525)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	begin
	  v__h27163 = $stime;
	  #0;
	end
    v__h27157 = v__h27163 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	$write("%0d: %m: rl_norm: Error Illegal Opcode", v__h27157);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd0) $write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd1) $write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd2) $write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd3) $write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6 &&
	  opcode_norm$D_OUT != 3'd0 &&
	  opcode_norm$D_OUT != 3'd1 &&
	  opcode_norm$D_OUT != 3'd2 &&
	  opcode_norm$D_OUT != 3'd3 &&
	  opcode_norm$D_OUT != 3'd5)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_norm && opcode_norm$D_OUT != 3'd4 &&
	  opcode_norm$D_OUT != 3'd6)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd7 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd6)
	begin
	  v__h33202 = $stime;
	  #0;
	end
    v__h33196 = v__h33202 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd7 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd6)
	$write("%0d: %m: rl_out: Error Illegal Opcode", v__h33196);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd1) $write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT == 3'd3) $write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd7 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd6)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_24___d525)
	begin
	  v__h33344 = $stime;
	  #0;
	end
    v__h33338 = v__h33344 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_24___d525)
	$write("%0d: %m: rl_out: ", v__h33338);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_24___d525 &&
	  opcode_out$D_OUT == 3'd0)
	$write("FMA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_24___d525 &&
	  opcode_out$D_OUT == 3'd1)
	$write("FDA_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_24___d525 &&
	  opcode_out$D_OUT == 3'd2)
	$write("FMS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_24___d525 &&
	  opcode_out$D_OUT == 3'd3)
	$write("FDS_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_24___d525 &&
	  opcode_out$D_OUT == 3'd4)
	$write("FCVT_P_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_24___d525 &&
	  opcode_out$D_OUT == 3'd5)
	$write("FCVT_S_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_24___d525 &&
	  opcode_out$D_OUT == 3'd6)
	$write("FCVT_P_R");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_24___d525 &&
	  opcode_out$D_OUT != 3'd0 &&
	  opcode_out$D_OUT != 3'd1 &&
	  opcode_out$D_OUT != 3'd2 &&
	  opcode_out$D_OUT != 3'd3 &&
	  opcode_out$D_OUT != 3'd4 &&
	  opcode_out$D_OUT != 3'd5 &&
	  opcode_out$D_OUT != 3'd6)
	$write("FCVT_R_P");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_24___d525) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_out && NOT_verbosity_ULE_1_24___d525)
	$display("  QUIRE: %h", rg_quire);
  end
  // synopsys translate_on
endmodule  // mkPositCore

